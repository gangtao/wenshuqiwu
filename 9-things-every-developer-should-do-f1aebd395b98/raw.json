[{
  "tag": "P",
  "text": "Did I miss something? What are some things that you think every developer should do? Let me know in the comments!",
  "translation": "我错过了什么？ 您认为每个开发人员应该做什么？ 在评论中让我知道！"
}, {
  "tag": "H1",
  "text": "If You Don’t Want to Do [Thing], Don’t Put It on Your Resumé",
  "translation": "如果您不想做[事情]，请不要放在简历上"
}, {
  "tag": "P",
  "text": "This is something I’ve been guilty of and I’m sure I’ll make this mistake again. When you’re looking for a new job it's fairly obvious you want to make your resumé look as good as possible. So what do we do? We put everything we’ve ever worked on onto our CV. Every technology, every tool, every language we’ve written hello world in, it’s all there. But somehow we’re always surprised when we get hired and they ask us to work with or manage a piece of technology we actively dislike. It usually goes something like this:",
  "translation": "我一直对此感到内，我敢肯定我会再犯一次这个错误。 在寻找新工作时，很明显，您想使简历看起来尽可能的好。 那么我们该怎么办？ 我们将曾经从事的所有工作都放入了简历。 我们在其中使用的每一种技术，每种工具，每种语言都可以用它来编写。 但是以某种方式，当我们被录用时，我们总是感到惊讶，他们要求我们使用或管理我们非常不喜欢的技术。 通常情况如下："
}, {
  "tag": "P",
  "text": "“You had on your resumé that you’ve used Jenkins before. We don’t have anyone else that knows Jenkins, so you’re going to be our Jenkins admin.”",
  "translation": "“您的简历上曾经使用过詹金斯。 我们没有其他人认识Jenkins，因此您将成为我们的Jenkins管理员。”"
}, {
  "tag": "P",
  "text": "Now you’re stuck being “the Jenkins person.”",
  "translation": "现在，您被困为“詹金斯人”。"
}, {
  "tag": "P",
  "text": "So how do you avoid this scenario? Treat your resumé not as simply a catalog of your past career, but also as shaping the next step in your career path. Your CV sets the boundaries within which people will hire you. If you make those boundaries as broad as possible you’ll get more responses, but the odds are that most of those responses won’t be for positions you actually want. By narrowing the focus of your CV to the technologies that you’re really good at and actually want to use, you ensure that you won’t find yourself in a position that you don’t really like, necessitating yet another job search.",
  "translation": "那么如何避免这种情况呢？ 对待您的简历不仅要考虑自己过去的职业，还应将其视为塑造职业道路的下一步。 您的简历确定了人们雇用您的界限。 如果您将这些界限尽可能地广泛，则会获得更多的答复，但是很有可能大多数答复都不适合您实际想要的职位。 通过将简历的重点放到您真正擅长并真正想要使用的技术上，可以确保您不会找到自己不喜欢的位置，这需要重新寻找工作。"
}, {
  "tag": "H1",
  "text": "Toxic Workplaces Kill",
  "translation": "有毒工作场所致死"
}, {
  "tag": "P",
  "text": "There is no software job more important than your personal well-being. Let me repeat that:",
  "translation": "没有什么软件工作比您的个人福祉更重要。 让我重复一遍："
}, {
  "tag": "P",
  "text": "There is no software job more important than your personal wellbeing.",
  "translation": "没有什么软件工作比您的个人福祉更重要。"
}, {
  "tag": "P",
  "text": "There is no boss, no peer, no bit of code, no company that deserves to be more important than your wellbeing. It's okay to leave your job, especially when you find yourself in a toxic environment and there’s no way to remove yourself from it inside the company. Find a new job, put in your notice, and walk away.",
  "translation": "没有老板，没有同事，没有代码，没有任何一家公司比您的福祉更重要。 可以辞职，尤其是当您发现自己处于有毒的环境中并且无法在公司内部将自己从工作中解雇时。 找一份新工作，放在通知里，然后走开。"
}, {
  "tag": "P",
  "text": "Early in my career, I worked at a small software shop that did commercial and government contracting for digital communications systems. It was a small ~20 person office (dogs not included), the kind where everyone knew everyone and I felt like I was the odd one out from day one. I was excited to start there, though, because while I had been a full-time admin in my previous position, this position offered more in terms of technologies and opportunities to learn development and DevOps (in fact, this was the position that drove me to learn Python and AngularJS, so I guess that’s a win). They touted their “flat structure” as a way of saying that everyone was equal and you’re your own boss, but in reality, it became very clear very quickly that there were two or three people who really ran the office, despite titles and whatnot. The office, in general, was a high-tension, backstab-y, snitchfest that made it a not-at-all pleasant place to work. Asking questions was frowned upon, and my counterpart (the long-time IT guy) had anger management problems, meaning if you caught him on a bad day/hour/minute he was liable to just yell at you for literally anything. Needless to say, it didn’t work out there.",
  "translation": "在我职业生涯的早期，我曾在一家小型软件商店工作，从事数字通信系统的商业和政府合同。那是一个约20人的小型办公室（不包括狗），每个人都认识每个人，我觉得从第一天起我就很奇怪。不过，我很高兴能从这里开始，因为在我担任以前的专职管理员时，该职位在技术和学习开发与DevOps的机会方面提供了更多（实际上，这是促使我前进的职位）学习Python和AngularJS，所以我想这是一个胜利。他们吹捧他们的“扁平式结构”，是说每个人都是平等的，而你是你自己的老板，但实际上，很快就很清楚地知道，有两到三个人真正掌管了办公室，尽管有头衔和职位。没什么。总的来说，办公室是一个高强度，后背刺鼻的活动，这使它成为了一个并非所有人都喜欢的工作场所。询问的问题被拒之门外，而我的同事（长期担任IT的人）遇到了愤怒管理问题，这意味着如果您在糟糕的一天/小时/分钟抓到他，他可能只是对您大喊大叫。不用说，它在那里没有用。"
}, {
  "tag": "P",
  "text": "Walking out of the door for the last time on that Friday I realized that I had been internalizing so much stress and so much tension that the relief of never having to deal with those assholes outweighed any frustration or fear I had about being without gainful employment. It was literally a weight off my shoulders. By Tuesday I had found a new job at a small MSP that I thoroughly enjoyed and where I met one of my good friends. The moral of this story is really simple: get out. Monster.com has a really great guide for checking if your work environment is hostile, I highly suggest you go check it out and evaluate your current working environment.",
  "translation": "在那个星期五的最后一次走出门时，我意识到我一直在承受着如此巨大的压力和压力，以至于不必去面对那些混蛋，所产生的满足感超过了我对无薪工作所产生的沮丧或恐惧。 从字面上看，这是我的负担。 到星期二，我在一个小型MSP上找到了一份新工作，我很喜欢这个MSP，并且在那里遇到了一位好朋友。 这个故事的寓意很简单：滚蛋。 Monster.com为检查您的工作环境是否存在恶意提供了非常好的指南，我强烈建议您检查一下并评估当前的工作环境。"
}, {
  "tag": "H1",
  "text": "Win as a Team, Die as an Individual",
  "translation": "团队胜利，个人死亡"
}, {
  "tag": "P",
  "text": "Just as important as your relationship with your manager is your relationship with your peers. You need to build and reinforce that peer-to-peer relationship — you live as a team and you die as a team. Especially so if you are a senior member of that team, you need to recognize your peers when they do awesome work and take responsibility for your failures when they happen, because they will happen. No manager is going to fault you for making a mistake (the good ones won’t, at least), the greater sin is not learning from those mistakes (see #7). So when you screw up just take the responsibility for it, learn from it, and don’t do it again. The absolute worst thing you can do is lay the blame for your mistakes at the feet of your peers.",
  "translation": "与同事的关系同您与经理的关系一样重要。 您需要建立并加强这种点对点关系-您作为一个团队生活，并且作为一个团队死亡。 尤其是，如果您是该团队的高级成员，则需要在同事做的出色工作时认出他们，并要对失败负责，因为失败会发生。 没有经理会因犯错而责备你（至少好的人不会犯错），更大的罪恶是没有从这些错误中汲取教训（请参阅第7条）。 因此，当您搞砸了时，只需承担起责任，从中吸取教训，然后就不再做。 您可以做的绝对最糟糕的事情是将错误归咎于同行。"
}, {
  "tag": "P",
  "text": "The opposite is true for success, though. When you win as a team, don’t take personal credit for it. If someone wants to call you out for your contributions, let them, but taking credit for things that were a team effort is also the worst thing you can do.",
  "translation": "但是，成功则相反。 当您赢得团队合作时，请不要为此付出个人功劳。 如果有人想请您为自己的贡献大声疾呼，那就让他们接受，但是为团队合作做的事情得到赞誉也是您最糟糕的事情。"
}, {
  "tag": "H1",
  "text": "Be Available",
  "translation": "能得到的"
}, {
  "tag": "P",
  "text": "Now, I’m not talking about 24/7 always-on, always-answering-email kind of availability, but generally, someone should be able to reach you when they need to. Whether you are on-call or not (if you have an on-call rotation) someone from your team or your management hierarchy should be able to reach you should the proverbial fan be hit by any proverbial excrement. This goes doubly if you’re working remotely: always be reachable during office hours. It doesn’t matter if its Slack, e-mail, text, phone, Skype, Facebook Messenger, AIM, Twitch, or whatever, your team needs to be able to reach you and, possibly more importantly, you need to be able to participate in your team’s discussions.",
  "translation": "现在，我不是在谈论24/7的始终在线，始终应答电子邮件的可用性，但总的来说，有人应该可以在需要时与您联系。 无论您是在待命中（如果有待命轮换），团队中的某人或您的管理层级都应该能够与您联系，如果谚语迷被任何谚语排泄物击中。 如果您是远程工作，这会变得更加困难：在办公时间内始终可以访问。 不管它的Slack，电子邮件，文本，电话，Skype，Facebook Messenger，AIM，Twitch或其他任何内容，您的团队都需要能够联系到您，更重要的是，您需要能够与您联系 参加团队的讨论。"
}, {
  "tag": "H1",
  "text": "Stand Up, Walk Away, Get Coffee",
  "translation": "站起来，走开，喝咖啡"
}, {
  "tag": "P",
  "text": "There’s no rule that says you have to stay at your desk. When you get frustrated, stuck on something, or just tired, unless you’re literally chained to your desk, get up and walk around. Go get some coffee, chat with some colleagues, do something to take your mind off work. The human brain is a strange organ — even when you’re not actively thinking about a problem it's still trying to work through solutions in the background. Letting your mind relax and wander isn’t wasted time, it’s time spent letting your brain work through things asynchronously.",
  "translation": "没有规定说您必须待在办公桌前。 当您感到沮丧，卡在某物上或只是感到疲倦时，除非您确实被束缚在办公桌上，否则请起来走走。 去喝杯咖啡，和一些同事聊天，做些让您下班的事。 人脑是一个奇怪的器官，即使您没有积极思考问题，它仍在尝试在后台解决问题。 让您的心灵放松和游荡并不是浪费时间，而是让您的大脑异步处理所有事情的时间。"
}, {
  "tag": "P",
  "text": "I’m a shower thinker. Not exactly practical for working in an office, but when I’m working from home or I have a problem that is bugging me outside office hours I like to hop in the shower and let my mind wander. There’s something about being in the shower, for me at least, that lets my mind wander in a way that it doesn’t when I’m just sitting and thinking elsewhere. Some of my more awesome ideas have come from just sitting in the shower and zoning out. It sounds counterintuitive but it goes back to letting your brain work through problems in the background: it’s always thinking, always working, so give it time to think and work.",
  "translation": "我是个淋浴思想家。 在办公室工作并不完全实用，但是当我在家工作时，或者遇到一个在办公时间以外困扰我的问题时，我想跳上淋浴，让自己的思维陷入困境。 至少对我而言，淋浴是一种让我以某种方式徘徊的方式，就像我只是坐在其他地方思考时那样。 我的一些更出色的想法来自坐在淋浴间并进行分区。 这听起来似乎违反直觉，但可以回过头来让您的大脑解决背景中的问题：它一直在思考，一直在工作，因此请花点时间思考和工作。"
}, {
  "tag": "H1",
  "text": "Read the F***ing Logs/Manual/Documentation",
  "translation": "阅读F *** ing日志/手册/文档"
}, {
  "tag": "P",
  "text": "I really can’t stress this enough: you have to actually read what is given to you. Any application, library, package, language, or whatever that’s worth it’s salt will have a decent enough documentation set. Even if it’s something as simple as an API reference, you have to actually use it.",
  "translation": "我真的没有足够的压力：您必须阅读给您的东西。 任何应用程序，库，程序包，语言或任何有价值的东西都将具有足够好的文档集。 即使它像API参考一样简单，您也必须实际使用它。"
}, {
  "tag": "P",
  "text": "Way too many times I’ve had someone ask for help on an issue, one that they’ve been banging their heads against for a long time, only for me to discover the answer literally staring them in the face. Log outputs and error messages are there for a reason and you should read them. Often they tell you exactly what is wrong, and if not, there’s usually someone on Stack Overflow or Server Fault that has a solution for your problem. Before you jump down a rabbit hole and start looking at kernel parameters or trying to find obscure bugs on Bugzilla that explain your symptoms, you should try stopping, reading the output, and taking it at face value. If it says that it's missing a field value in some XML tag, try adding the field value to the XML, don’t go chasing down a phantom issue that may or may not have been introduced when you upgraded Tomcat versions if the answer is literally written out in a log file in front of you.",
  "translation": "我有太多次有人在某个问题上寻求帮助，他们很长时间以来一直在撞，只是我发现了从字面上盯着他们的答案。 日志输出和错误消息在那里是有原因的，您应该阅读它们。 通常，他们会确切地告诉您出了什么问题，如果不是，通常是Stack Overflow或Server Fault上有人为您解决问题。 在跳下兔子洞并开始查看内核参数或尝试在Bugzilla上找到解释您的症状的晦涩的bug之前，您应该尝试停止，读取输出并以其面值看待。 如果它说它在某些XML标记中缺少字段值，请尝试将字段值添加到XML中，如果答案是字面上的话，请不要追究升级Tomcat版本时可能引入或未引入的幻像问题。 写在您面前的日志文件中。"
}, {
  "tag": "P",
  "text": "This exact scenario played out soon after I joined my current team. We got paged by our network operations center because they were seeing an issue in production where some message queues wouldn’t connect. Three managers and I stayed after hours (hey, free dinner!) and banged our collective heads against this problem for hours. We tried everything we could think of: rebuild the Tomcat cluster, update the machine images, check what kernel modules were loaded, run down every single DNS failure mode we could think of: you name it, we did it. I was new to this particular stack at the time and was pretty much only there because I wanted to impress my new bosses and because I could be a fresh pair of eyes on the problem. I made one critical mistake, though, in that I didn’t re-check everyone else’s work. When you’re running down a production issue there’s no time to “play nice” or try not to step on everyone’s toes because in that moment no one cares (rather no one should care) if you check their work or try to find something they missed. When I finally decided to go back and look at the logs despite someone having said they already had, I discovered the root cause: Tomcat had changed a tag name in its XML configuration. The tag we had been using was no longer valid and we needed to change it to a new value. I quickly tested it and poof! Tomcat came up and started working as expected.",
  "translation": "加入我目前的团队后不久，这种确切的情况就出现了。我们得到了网络运营中心的呼叫，因为他们在生产中发现某些消息队列无法连接的问题。我和三个管理人员下班后呆了（嘿，免费吃晚饭！），我们的集体负责人为这个问题狂奔了好几个小时。我们尝试了所有可能想到的事情：重建Tomcat集群，更新机器映像，检查加载了哪些内核模块，运行我们可能想到的每个DNS故障模式：命名，做到了。当时我对这个特定的堆栈还很陌生，因为我想打动我的新老板，并且因为我可以在这个问题上崭露头角，所以我当时只是在那里。不过，我犯了一个严重错误，因为我没有重新检查其他人的工作。当您遇到生产问题时，没有时间“玩得开心”或尽量不要踩到每个人的脚趾，因为在那一刻，如果您检查他们的工作或尝试找到他们感兴趣的东西，那么没人在乎（宁愿没人在乎）错过了。当我终于决定回头查看日志时，尽管有人说已经有日志了，但我发现了根本原因：Tomcat已在其XML配置中更改了标签名称。我们一直在使用的标签不再有效，我们需要将其更改为新值。我很快对其进行了测试并po了！ Tomcat出现并开始按预期工作。"
}, {
  "tag": "P",
  "text": "The moral of this story isn’t how I fixed the problem, the moral is that oftentimes what the logs or errors or documentation tells you is exactly what the problem or error is. Take it at face value, try that solution first, and if that doesn’t work then you can fall down the rabbit hole.",
  "translation": "这个故事的寓意不是我解决问题的方法，寓意是通常日志或错误或文档告诉您的正是问题或错误的所在。 从表面上看，首先尝试该解决方案，如果该方法不起作用，则可以掉进兔子洞。"
}, {
  "tag": "H1",
  "text": "Challenge the Status Quo and Ask the “Dumb” Questions",
  "translation": "挑战现状并询问“哑巴”问题"
}, {
  "tag": "P",
  "text": "My favorite question to ask is “Why?” and I would argue that it should become yours, too. Challenging the status quo won’t always make you the most popular person in the room, but innovation demands that we stop and ask why. No good thing comes out of maintaining the equilibrium — either we lose sight of the original goal and our goals become maintaining what’s already there, or we step back, examine why things are the way they are, and find out if there’s a better way to do things.",
  "translation": "我最想问的问题是“为什么？”，我认为它也应该成为您的问题。 挑战现状并不能总是使您成为会议室中最受欢迎的人，但是创新要求我们停止并询问原因。 保持平衡不会带来任何好处-要么我们忘记了最初的目标，而我们的目标变成了维持已经存在的目标，要么我们退后一步，研究为什么事情是这样，并找出是否有更好的方法来实现 做事。"
}, {
  "tag": "P",
  "text": "The best way I’ve found to do this is to take it back to the basics and ask the “dumb questions.” You don’t have to come out and say “Why are we doing this?”—not only will some people see that as rude, but it’s also pretty vague. Instead, asking something like “Is there a specific reason why we’re using Product X for this part?” will get you the same result, but in a more focused and direct way.",
  "translation": "我发现做到这一点的最佳方法是回到基础知识并提出“愚蠢的问题”。您不必出来说“我们为什么要这样做？” —不仅有些人会这样做 认为这很粗鲁，但也很模糊。 取而代之的是，询问“是否有特定原因为何要为此部分使用Product X？”将为您带来相同的结果，但会更加集中和直接。"
}, {
  "tag": "H1",
  "text": "Never Stop Learning",
  "translation": "从未停止学习"
}, {
  "tag": "P",
  "text": "I cannot stress this point enough: you have to be willing to learn if you want to grow in your career. If you don’t want to grow and are happy with being a .NET 4 developer for your entire career, well, to each their own, but if you have even the slightest inclination to move up, change positions, or do something different, you have to be willing to learn new things. “New things” could be new languages, new technologies, new methods, etc., but you need to continue your education in some capacity. Doing so not only makes you more valuable to your current employer but it also gives you more leverage when negotiating compensation and opens up more opportunities should you decide to go elsewhere.",
  "translation": "我不能足够强调这一点：如果您想在职业生涯中成长，就必须愿意学习。 如果您不想成长，并且对成为自己整个职业的.NET 4开发人员感到满意，那么，如果每个人都有自己的意愿，但是如果您有一点点倾向向上，更换职位或做其他事情， 您必须乐于学习新事物。 “新事物”可能是新语言，新技术，新方法等，但是您需要以某种能力继续接受教育。 这样做不仅使您对当前的雇主更具价值，而且在谈判薪酬时也能给您带来更大的影响力，并在您决定去其他地方时提供更多的机会。"
}, {
  "tag": "H1",
  "text": "Tenacity Is Your #1 Skill",
  "translation": "坚韧是您的第一技能"
}, {
  "tag": "P",
  "text": "Every developer will be handed problems. It’s part of the job and one of the more rewarding parts at that. But your career is made or broken by how you handle those problems; I’ve made my career out of being the go-to engineer for the big, hairy problems that no one else can figure out. Being able to take something that other people have tried to solve, whether that’s a coding problem, an issue with some operation’s functionality, or getting a new technology working; it doesn’t really matter as long as you can do it. And the big secret is that it doesn’t take any special knowledge or skill, you just have to keep at it until you get it done. That’s it. Are you going to have doubts as to whether you can do it? Yeah, of course you are. I’ve had them too. Are you going to want to give up? Yep, but that’s when you need to push through and just get it done.",
  "translation": "每个开发人员都会遇到问题。 这是工作的一部分，也是其中最有意义的部分之一。 但是，您如何解决这些问题决定了您的职业生涯成败。 我的职业生涯之所以成为，是因为我是无法解决其他大问题的工程师。 能够采取其他人试图解决的问题，无论是编码问题，某些操作的功能问题还是使新技术正常工作； 只要您能做到，就没有关系。 而且最大的秘密是，它不需要任何特殊的知识或技能，只需要坚持下去，直到完成它。 而已。 您是否会对此表示怀疑？ 是的，你当然是。 我也有。 你要放弃吗？ 是的，但是那是您需要完成并完成它的时候。"
}, {
  "tag": "P",
  "text": "My first job in technology was as an on-site IT guy for a retail company. Being the only IT guy for the company had its ups and downs (sometimes I really miss the freedom I had, since I could basically implement, build, work on whatever I wanted), but one episode that marked a watershed moment was when I failed to upgrade our Active Directory domain version. Being a green engineer I had the bright idea to upgrade our domain from Server 2003 to Server 2008R2, seeing as I was in the middle of decomming our 2003 domain controller. So I pulled up the MSDN how-to, got all my stuff together, and dove into the process.",
  "translation": "我的第一项技术工作是在一家零售公司担任现场IT人员。 作为该公司唯一的IT人士，它有起有落（有时我真的很想念我拥有的自由，因为我基本上可以实施，构建，从事我想做的事情），但是标志着一个分水岭的时刻是我失败了 升级我们的Active Directory域版本。 作为一名绿色工程师，我想到了将域从Server 2003升级到Server 2008R2的绝妙主意，因为我正要分解我们的2003域控制器。 因此，我提出了MSDN的使用方法，将所有内容整理在一起，并深入研究了该过程。"
}, {
  "tag": "P",
  "text": "Then it failed. At 3 P.M. on a Tuesday.",
  "translation": "然后失败了。 下午3点 在星期二。"
}, {
  "tag": "P",
  "text": "Everything went down. E-mail, RDP logins, everything. Fast forward to 3 A.M. that next morning, I’m still at the office: tired, hungry, frustrated, standing in the server room trying desperately to recover our primary domain controller, when I have this thought: I could just leave and never come back. I could block all the company numbers, leave my key in the office, grab my stuff, and just walk out. No one has to know I ever worked here. Someone else can fix this problem.",
  "translation": "一切都崩溃了。 电子邮件，RDP登录，一切。 快进到凌晨3点 第二天早上，我仍在办公室里：累，饿，沮丧，站在服务器机房里拼命试图恢复我们的主域控制器，当时我有这样的想法：我只能离开而永远不会回来。 我可以封锁所有公司号码，将钥匙留在办公室，拿起我的东西，然后走出去。 没有人知道我曾经在这里工作过。 其他人可以解决此问题。"
}, {
  "tag": "P",
  "text": "I didn’t do any of that. I stayed. I worked the problem and eventually got it fixed. Sure, I had caused the problem in the first place, but fixing it felt amazing at the same time. Tenacity won out.",
  "translation": "我什么都没做。 我留下。 我解决了这个问题，并最终解决了问题。 当然，我首先是造成问题的原因，但同时解决它令我感到惊奇。 坚韧胜出。"
}, {
  "tag": "H1",
  "text": "9 Things Every Developer Should Do",
  "translation": "每个开发人员应该做的9件事"
}, {
  "tag": "H2",
  "text": "A random guy on the internet tells you 9 more things loosely related to development",
  "translation": "互联网上的一个随机人告诉您另外9项与发展无关的事情"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*pfiPbi0IaCdv9aYYXdTdpg.jpeg?q=20",
  "caption": "Photo by Lorenzo Herrera on Unsplash",
  "type": "image",
  "file": "1*pfiPbi0IaCdv9aYYXdTdpg.jpeg"
}, {
  "tag": "P",
  "text": "Hey, it’s me again. You might remember me from such under-appreciated classics as “People are Not Resources” and “The Six-legged Triangle of Doom”, but more likely for my previous piece, “10 Things Every Developer Should Learn.” Welcome to “9 Things Every Developer Should Do.” It's not exactly a follow-up to “10 Things”— more like a spiritual successor.",
  "translation": "嘿，又是我。 您可能会从诸如“人不是资源”和“厄运的六足三角”之类的未被重视的经典中记住我，但是对于我的上一篇文章“每个开发人员都应该学习的10件事”更可能成为我的回忆。欢迎阅读“ 9件事” 每个开发人员都应该这样做。”这并不是“十件事”的跟进，更像是精神上的继任者。"
}]