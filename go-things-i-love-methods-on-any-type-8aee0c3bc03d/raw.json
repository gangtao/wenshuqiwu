[{
  "tag": "P",
  "text": "Hi, I’m Justin Fuller. I’m so glad you read my post! I need to let you know that everything I’ve written here is my own opinion and is not intended to represent my employer. All code samples are my own.",
  "translation": "大家好，我叫Justin Fuller。 我很高兴您阅读我的帖子！ 我需要让您知道，我在这里写的所有内容都是我个人的观点，并不代表我的雇主。 所有代码示例都是我自己的。"
}, {
  "tag": "P",
  "text": "I’d also love to hear from you, please feel free to follow me on Github or Twitter. Thanks again for reading!",
  "translation": "我也希望收到您的来信，请随时在Github或Twitter上关注我。 再次感谢您的阅读！"
}, {
  "tag": "H1",
  "text": "Go Things I Love: Methods On Any Type",
  "translation": "去做我喜欢的事情：任何类型的方法"
}, {
  "tag": "P",
  "text": "This post originally appeared on JustinDFuller.com.",
  "translation": "该帖子最初出现在JustinDFuller.com上。"
}, {
  "tag": "P",
  "text": "Now that I am working with Go as my primary language at The New York Times, I want to explore some of my favorite features of the language. I don’t intend this to reveal previously unknown features or best practices; I just want to share some of the reasons that I enjoy working with the language.",
  "translation": "现在，我已经在《纽约时报》上使用Go作为主要语言，现在，我想探索一下我最喜欢的语言功能。 我不想以此来揭示以前未知的功能或最佳做法； 我只想分享一些喜欢使用该语言的原因。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*KQgxJN65k173fJ0Q0zRQrA.png?q=20",
  "caption": "Go Things I Love: Methods On Any Type",
  "type": "image",
  "file": "1*KQgxJN65k173fJ0Q0zRQrA.png"
}, {
  "tag": "H2",
  "text": "Methods",
  "translation": "方法"
}, {
  "tag": "P",
  "text": "Typically a method is defined as a function that belongs to an object or class. This means you wouldn’t necessarily add a method to a string, boolean, or number.",
  "translation": "通常，方法定义为属于对象或类的函数。 这意味着您不必向字符串，布尔值或数字添加方法。"
}, {
  "tag": "P",
  "text": "This limitation might lead a developer to produce code that looks like this:",
  "translation": "此限制可能导致开发人员生成如下代码："
}, {
  "tag": "PRE",
  "text": "const LastOldSchoolID = 23959if id < LastOldSchoolID { // allow access to the old school version of the game}// and elsewhereif id < LastOldSchoolID { // allow access to the old school version of the forum // or some other custom logic for old school players}",
  "translation": "const LastOldSchoolID = 23959if id <LastOldSchoolID {//允许访问游戏的旧版本} //和其他地方if id <LastOldSchoolID {//允许访问论坛的旧版本//或其他旧版本的自定义逻辑 学校球员}"
}, {
  "tag": "P",
  "text": "In this silly example there is a game that recently released a new version. Players who made an account before the release are still allowed to play the old game and use the old forum. To do this, the developers went around the code base and added a check: Is the user’s ID lower than the last old school player’s ID? If so, they can access the old game.",
  "translation": "在这个愚蠢的例子中，有一个游戏最近发布了一个新版本。 在发行前创建帐户的玩家仍然可以玩旧游戏并使用旧论坛。 为此，开发人员遍历了代码库并添加了一个检查：用户的ID是否低于上一个老学校玩家的ID？ 如果是这样，他们可以访问旧游戏。"
}, {
  "tag": "H2",
  "text": "Encapsulation",
  "translation": "封装形式"
}, {
  "tag": "P",
  "text": "Unfortunately, and right away, the community notices a bug. Specifically, a single user notices this bug. The last old school player is locked out of the game!",
  "translation": "不幸的是，社区立即发现了一个错误。 具体来说，单个用户会注意到此错误。 最后一位老派球员被拒登游戏！"
}, {
  "tag": "P",
  "text": "The developers used the check id < LastOldSchoolID everywhere. So it works for all but the very last player.",
  "translation": "开发人员到处都使用检查ID <LastOldSchoolID。 因此，它适用于除最后一位玩家以外的所有玩家。"
}, {
  "tag": "P",
  "text": "At this point the developers are forced to search for every instance of this check (fortunately there aren’t that many, only a dozen or so)and they replace the logic with id <= LastOldSchoolId. Everything is working perfectly again.",
  "translation": "此时，开发人员被迫搜索该检查的每个实例（很幸运，搜索的实例并不多，只有十几个左右），他们用id <= LastOldSchoolId替换了逻辑。 一切再次恢复正常。"
}, {
  "tag": "P",
  "text": "Except it’s not. The developer who coded logic for the old school login page included this snippet:",
  "translation": "除非不是。 为旧学校登录页面编写逻辑代码的开发人员包括以下代码段："
}, {
  "tag": "PRE",
  "text": "if id >= LastOldSchoolId { return httperrors.Unauthorized(“We’re sorry but you don’t have access to the old school game.”)}",
  "translation": "如果id> = LastOldSchoolId {返回httperrors.Unauthorized（“很抱歉，您不能使用旧版游戏。”）}"
}, {
  "tag": "P",
  "text": "So, unfortunately, the bug still exists.",
  "translation": "因此，不幸的是，该错误仍然存在。"
}, {
  "tag": "P",
  "text": "This could have all been prevented by a little encapsulation. The developers shouldn’t have repeated the logic — all over the codebase — to determine if an ID is valid for old school. The logic should live in only one place.",
  "translation": "只需封装一下就可以防止一切。 开发人员不应该在整个代码库中重复此逻辑来确定ID是否对旧学校有效。 逻辑应该只存在于一个地方。"
}, {
  "tag": "P",
  "text": "Thankfully, Go provides exactly what is needed.",
  "translation": "值得庆幸的是，Go确实提供了所需的东西。"
}, {
  "tag": "H2",
  "text": "Using a custom type",
  "translation": "使用自定义类型"
}, {
  "tag": "P",
  "text": "The User’s ID will be implemented as a custom type. The type can be used independently or as part of a user struct. Most importantly, it can have custom methods.",
  "translation": "用户ID将作为自定义类型实现。 该类型可以单独使用，也可以作为用户结构的一部分使用。 最重要的是，它可以具有自定义方法。"
}, {
  "tag": "P",
  "text": "Here’s how it works:",
  "translation": "运作方式如下："
}, {
  "tag": "PRE",
  "text": "const LastOldSchoolID = 23959type UserID intfunc (id UserID) IsOldSchool() bool { return id <= LastOldSchoolID // The last oldschool player}func (id UserID) IsNotOldSchool() bool { return !id.IsOldSchool()}",
  "translation": "const LastOldSchoolID = 23959type UserID intfunc（id UserID）IsOldSchool（）bool {return id <= LastOldSchoolID //最后的老派玩家} func（id UserID）IsNotOldSchool（）bool {return！id.IsOldSchool（）}"
}, {
  "tag": "P",
  "text": "Notice the custom methods added directly to the UserID type, which is an int. The code around the app can now be rewritten.",
  "translation": "请注意，直接添加到UserID类型（即int）的自定义方法。 现在可以重写应用程序周围的代码。"
}, {
  "tag": "PRE",
  "text": "if id.IsOldSchool() { // allow access to the old school version of the game}// elsewhereif id.IsNotOldSchool() { return httperrors.Unauthorized(“Please join us playing the new version at game.com/v2.”)}",
  "translation": "if id.IsOldSchool（）{//允许访问游戏的较旧版本} //其他地方if id.IsNotOldSchool（）{返回httperrors.Unauthorized（“请加入我们，在game.com/v2上玩新版本。” ）}"
}, {
  "tag": "P",
  "text": "If only this had been done in the first place, a lot of pain and suffering would have been saved for that poor user who wasn’t able to access the game for a few days. The developers could have made the fix at a single location in the code and the fix would have been applied everywhere.",
  "translation": "如果仅要做到这一点，那么将为几天之内无法访问游戏的可怜用户节省很多痛苦。 开发人员本可以在代码中的单个位置进行修复，并且该修复将在各处得到应用。"
}, {
  "tag": "H2",
  "text": "More encapsulation, delegation.",
  "translation": "更多封装，委托。"
}, {
  "tag": "P",
  "text": "Some might point out that the code is still revealing too many details about the user and the old school logic.",
  "translation": "有人可能会指出，该代码仍在揭示有关用户和旧式逻辑的太多细节。"
}, {
  "tag": "P",
  "text": "Why should the rest of the code need to know that old school access is determined by the ID? What if the business decides to change the rules to instead use the creation date? What if the developers decide to make an IsOldSchool property on the user?",
  "translation": "为什么其余代码需要知道旧访问权限是由ID确定的？ 如果企业决定更改规则以改为使用创建日期怎么办？ 如果开发人员决定对用户创建IsOldSchool属性，该怎么办？"
}, {
  "tag": "P",
  "text": "These are all valid points. First, I ask you to remember that this is simply an example to show a great feature within Go.",
  "translation": "这些都是有效点。 首先，我请您记住，这只是一个展示Go强大功能的示例。"
}, {
  "tag": "P",
  "text": "Next, I’d like to point out two things.",
  "translation": "接下来，我想指出两点。"
}, {
  "tag": "OL",
  "texts": ["Adding methods to a non-struct type (like an int or string) might be a code smell that you are unnecessarily leaking implementation details or other logic that should be private.", "If the details need to be hidden, methods can still be added to the custom type, while at the same time hiding where that logic comes from."],
  "translations": ["将方法添加到非结构类型（如int或字符串）可能是一种代码味道，您不必要地泄漏了实现细节或其他应为私有的逻辑。", "如果需要隐藏细节，则仍然可以将方法添加到自定义类型中，同时隐藏该逻辑的来源。"]
}, {
  "tag": "P",
  "text": "Allow me to demonstrate.",
  "translation": "请允许我示范。"
}, {
  "tag": "PRE",
  "text": "type User struct { UserID}func (u User) IsOldSchool() bool { return u.UserID.IsOldSchool()}func (u User) IsNotOldSchool() bool { return u.UserID.IsNotOldSchool()}",
  "translation": "类型User struct {UserID} func（u User）IsOldSchool（）bool {返回u.UserID.IsOldSchool（）} func（u User）IsNotOldSchool（）bool {返回u.UserID.IsNotOldSchool（）}"
}, {
  "tag": "P",
  "text": "Delegation is used inside the User struct. The details of how the ID calculates old school are even hidden to User.",
  "translation": "在User结构中使用委托。 用户甚至不知道ID如何计算旧学校的详细信息。"
}, {
  "tag": "P",
  "text": "Now the implementation details (that old school access is based on the ID) can be hidden from the rest of the code.",
  "translation": "现在，实现细节（以前的访问是基于ID的）可以从其余代码中隐藏。"
}, {
  "tag": "PRE",
  "text": "if user.IsOldSchool() { // allow access to the old school version of the game}// elsewhereif user.IsNotOldSchool() { return httperrors.Unauthorized(“Please join us playing the new version at game.com/v2.”)}",
  "translation": "如果user.IsOldSchool（）{//允许访问游戏的较旧版本} //其他地方if user.IsNotOldSchool（）{返回httperrors.Unauthorized（“请加入我们，在game.com/v2上玩新版本。” ）}"
}, {
  "tag": "P",
  "text": "Again, internally, the User struct will take advantage of the methods on the ID, further encapsulating the logic.",
  "translation": "同样，在内部，User结构将利用ID上的方法，进一步封装逻辑。"
}, {
  "tag": "P",
  "text": "You can play around with these examples on the Go Playground.",
  "translation": "您可以在Go Playground上玩这些示例。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Justin Fuller的文章《Go Things I Love: Methods On Any Type》，参考：https://medium.com/swlh/go-things-i-love-methods-on-any-type-8aee0c3bc03d)",
  "translation": "（本文翻译自Justin Fuller的文章，《我喜欢的东西：任何类型的方法》，参考：https：//medium.com/swlh/go-things-i-love-methods-on-any-type-8aee0c3bc03d）"
}]