[{
  "tag": "H1",
  "text": "Occam’s Razor: Keeping the Code Short and Simple",
  "translation": "Occam的Razor：使代码简洁明了"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*MiZt64Bfp287J6ej1pIk1g.jpeg?q=20",
  "type": "image",
  "file": "1*MiZt64Bfp287J6ej1pIk1g.jpeg"
}, {
  "tag": "H1",
  "text": "Background",
  "translation": "背景"
}, {
  "tag": "P",
  "text": "In my Group Randomizer application, one of the features for my MVP (minimum viable product) is creating a saving group feature. When the user clicks on the “Save Group” button, it will save the current list of options as a new group. However, the core functionality of this feature is that if it finds an existing saved group with the same options, regardless of order, then an alert will appear stating that a group with your current list of options already exist.",
  "translation": "在我的Group Randomizer应用程序中，我的MVP（最低可行产品）的功能之一是创建保存组功能。 当用户单击“保存组”按钮时，它将当前选项列表保存为新组。 但是，此功能的核心功能是，如果找到一个具有相同选项的现有保存组，而不考虑顺序，则将显示一条警报，指出具有您当前选项列表的组已经存在。"
}, {
  "tag": "P",
  "text": "For example, Saved Group #1 has the list of people, “Sam” and “Bob”. If the my current list of options is “Bob” and “Sam”, and I try to save this as a new group, then an alert will pop out, stating “A saved group with your current list of options already exist. It is Saved Group #1”.",
  "translation": "例如，“保存的组＃1”具有人员列表，即“山姆”和“鲍勃”。 如果我当前的选项列表是“ Bob”和“ Sam”，并且我尝试将其另存为新组，则会弹出警报，提示“具有当前选项列表的已保存组已存在。 它是保存的组＃1”。"
}, {
  "tag": "P",
  "text": "For this blog, I am going over how I created the algorithm to create this checking feature and an application of Occam’s razor. If you’re not familiar with Occam’s razor, Wikipedia’s definition is:",
  "translation": "对于本博客，我将介绍如何创建算法来创建此检查功能以及Occam剃刀的应用。 如果您不熟悉Occam的剃刀，则Wikipedia的定义是："
}, {
  "tag": "P",
  "text": "Occam’s razor… is the problem-solving principle that states that “Entities should not be multiplied without necessity.”",
  "translation": "奥卡姆（Occam）的剃刀……是解决问题的原则，其中指出“不应在没有必要的情况下复制实体”。"
}, {
  "tag": "H1",
  "text": "First Attempt At The Checking Group Algorithm",
  "translation": "尝试检查组算法"
}, {
  "tag": "P",
  "text": "The code below is my first attempt at the checking group algorithm.",
  "translation": "下面的代码是我第一次尝试检查组算法。"
}, {
  "tag": "PRE",
  "text": "function checkGroups(savedGroup, currentListOfOptions) {  savedGroupHash = {}  // populates the savedGroupHash based on the contents of the   savedGroup array parameter  for (let i = 0; i < savedGroup.length; i++){    savedGroupHash[savedGroup[i]] = true  }  // checks the savedGroupHash against the current list of options to check if savedGroupHash contains all of the list of options  for (let j = 0; j < currentListOfOptions.length; j++) {    if (!savedGroupHash.hasOwnProperty(currentListOfOptions[j])) {      return false    }  }    return true}",
  "translation": "函数checkGroups（savedGroup，currentListOfOptions）{savedGroupHash = {} //根据（s i = 0; i <savedGroup.length; i ++）{saveGroupHash [savedGroup [i]] = true} //检查当前选项列表中的savedGroupHash，以检查saveGroupHash是否包含（let j = 0; j <currentListOfOptions.length; j ++）的所有选项列表{if（！savedGroupHash.hasOwnProperty（currentListOfOptions [j ]））{返回false}}返回true}"
}, {
  "tag": "P",
  "text": "Note: The parameters for this algorithm are both arrays. Whenever an “option” is mentioned below, it is referring to an element in their respective arrays.",
  "translation": "注意：此算法的参数均为数组。 每当下面提到“选项”时，它就是指它们各自数组中的元素。"
}, {
  "tag": "P",
  "text": "To provide an overall view on how I approached this algorithm, I created two for loops. The first for loop populated savedGroupHash based on the contents of the savedGroup parameter. For the key-value pairs, the key is the option with a default value of true. This value, or lack of, will be used as a boolean in the second for loop. In the second for loop, I checked each option in the currentListOfOptions parameter against the savedGroupHash. As soon as an option in currentListOfOptions was not included in the savedGroupHash, I would return false which would immediately exit the function. If not, then the last line would return true since it did not return false from the second for loop.",
  "translation": "为了提供有关如何使用该算法的总体信息，我创建了两个for循环。 第一个for循环根据savedGroup参数的内容填充了saveGroupHash。 对于键值对，键是默认值为true的选项。 此值（或缺少该值）将在第二个for循环中用作布尔值。 在第二个for循环中，我对照了savedGroupHash检查了currentListOfOptions参数中的每个选项。 只要currentListOfOptions中的选项未包含在savedGroupHash中，我将返回false，这将立即退出该函数。 如果不是，那么最后一行将返回true，因为从第二个for循环开始它没有返回false。"
}, {
  "tag": "H1",
  "text": "Testing the First Attempt at the Checking Group Algorithm",
  "translation": "在检查组算法中测试首次尝试"
}, {
  "tag": "P",
  "text": "Based on my experience of testing properly from my last blog, I decided to create some test cases to thoroughly test my algorithm. In this case, there were three case scenarios that came to mind.",
  "translation": "根据我在上一个博客中进行正确测试的经验，我决定创建一些测试用例以彻底测试我的算法。 在这种情况下，想到了三种情况。"
}, {
  "tag": "P",
  "text": "1. savedGroup and currentListOfOptions actually have exactly the same options but in a different order. This should return true.2. savedGroup includes the same options as currentListOfOptions but has more options than currentListOfOptions. This should return false.3. currentListOfOptions includes the same options as savedGroup but has more options than savedGroup. This should return false.",
  "translation": "1. savedGroup和currentListOfOptions实际上具有完全相同的选项，但顺序不同。 这应该返回true.2。 savedGroup包含与currentListOfOptions相同的选项，但具有比currentListOfOptions更多的选项。 这应该返回false.3。 currentListOfOptions包含与saveGroup相同的选项，但具有比saveGroup更多的选项。 这应该返回false。"
}, {
  "tag": "P",
  "text": "In the first case, let’s use savedGroup = [“Sam, “Bob”] and currentListOfOptions = [“Bob”, “Sam”]. Next, let’s input these two variables into the algorithm as parameters and console log the return value.",
  "translation": "在第一种情况下，我们使用saveGroup = [“ Sam，” Bob“]和currentListOfOptions = [” Bob“，” Sam“]。 接下来，让我们将这两个变量作为参数输入到算法中，然后控制台记录返回值。"
}, {
  "tag": "PRE",
  "text": "const savedGroup = [\"Sam\", \"Bob\"]const currentListOfOptions = [\"Bob\", \"Sam\"]console.log(checkGroups(savedGroup, currentListOfOptions)) //true",
  "translation": "const savedGroup = [“ Sam”，“ Bob”] const currentListOfOptions = [“ Bob”，“ Sam”] console.log（checkGroups（savedGroup，currentListOfOptions））// true"
}, {
  "tag": "P",
  "text": "Looks like this passed our first test case. Let’s move on to the second test case.",
  "translation": "看起来这已经通过了我们的第一个测试用例。 让我们继续第二个测试用例。"
}, {
  "tag": "P",
  "text": "In the second case, let’s use savedGroup = [“Sam”, “Bob”, “Jane”] and currentListOfOptions = [“Bob”, “Sam”]. Next, let’s input these two variables into the algorithm and console log the return value.",
  "translation": "在第二种情况下，我们使用savedGroup = [“ Sam”，“ Bob”，“ Jane”]和currentListOfOptions = [“ Bob”，“ Sam”]。 接下来，让我们将这两个变量输入算法，然后控制台记录返回值。"
}, {
  "tag": "PRE",
  "text": "const savedGroup = [\"Sam\", \"Bob\", \"Jane\"]const currentListOfOptions = [\"Bob\", \"Sam\"]console.log(checkGroups(savedGroup, currentListOfOptions)) //true",
  "translation": "const savedGroup = [“ Sam”，“ Bob”，“ Jane”] const currentListOfOptions = [“ Bob”，“ Sam”] console.log（checkGroups（savedGroup，currentListOfOptions））// true"
}, {
  "tag": "P",
  "text": "Looks like this did not pass our second test case. Let’s move on to the third test case.",
  "translation": "看起来这没有通过我们的第二个测试案例。 让我们继续第三个测试案例。"
}, {
  "tag": "P",
  "text": "In the third case, let’s use savedGroup = [“Sam”, “Bob”] and currentListOfOptions = [“Bob”, “Sam”, “Jane”]. Next, let’s input these two variables into the algorithm and console log the return value.",
  "translation": "在第三种情况下，我们使用savedGroup = [“ Sam”，“ Bob”]和currentListOfOptions = [“ Bob”，“ Sam”，“ Jane”]。 接下来，让我们将这两个变量输入算法，然后控制台记录返回值。"
}, {
  "tag": "PRE",
  "text": "const savedGroup = [\"Sam\", \"Bob\"]const currentListOfOptions = [\"Bob\", \"Sam\", \"Jane\"]console.log(checkGroups(savedGroup, currentListOfOptions)) //false",
  "translation": "const savedGroup = [“ Sam”，“ Bob”] const currentListOfOptions = [“ Bob”，“ Sam”，“ Jane”] console.log（checkGroups（savedGroup，currentListOfOptions））// false"
}, {
  "tag": "P",
  "text": "Looks like this passed our third test case.",
  "translation": "看起来这已经通过了我们的第三个测试用例。"
}, {
  "tag": "P",
  "text": "Hmm… it seems that this algorithm isn’t working as intended. After analyzing my code, it looks like the difference in the lengths of each parameter may be throwing it off. If that’s the case, let’s change the algorithm to accommodate this.",
  "translation": "嗯……看来此算法无法正常工作。 在分析完我的代码后，看起来每个参数的长度差异可能会使其丢掉。 如果是这种情况，请更改算法以适应这种情况。"
}, {
  "tag": "H1",
  "text": "Second Attempt At The Checking Group Algorithm",
  "translation": "检查组算法的第二次尝试"
}, {
  "tag": "P",
  "text": "The code below is my second attempt at the checking group algorithm.",
  "translation": "下面的代码是我第二次尝试检查组算法。"
}, {
  "tag": "PRE",
  "text": "function checkGroups(savedGroup, currentListOfOptions) {  const savedGroupHash = {}  for (let i = 0; i < savedGroup.length; i++) {    savedGroupHash[savedGroup[i]] = 1  }  for (let j = 0; j < currentListOfOptions.length; j++) {    if (savedGroupHash.hasOwnProperty(currentListOfOptions[j])) {      savedGroupHash[currentListOfOptions[j]] -= 1    } else {      savedGroupHash[currentListOfOptions[j]] = 1    }  }    let sum = Object.values(savedGroupHash).reduce( (acc, current) => acc += current)  if (sum === 0) {    //this means the same group already exists    return true  } else {    //this means the group does not already exist    return false  }}",
  "translation": "函数checkGroups（savedGroup，currentListOfOptions）{常量saveGroupHash = {}用于（let i = 0; i <savedGroup.length; i ++）{saveGroupHash [savedGroup [i]] = 1} for（let j = 0; j <currentListOfOptions。 长度； j ++）{如果（（savedGroupHash.hasOwnProperty（currentListOfOptions [j]））{savedGroupHash [currentListOfOptions [j]]-= 1}否则{saveGroupHash [currentListOfOptions [j]] = 1}}让sum = Object.values（savedGroupHash ）.reduce（（acc，current）=> acc + = current）if（sum === 0）{//这意味着该组已经存在返回true} else {//这意味着该组已经不存在return 错误}}"
}, {
  "tag": "P",
  "text": "To provide a general overview of this algorithm, there are two for loops, an accumulator, and an if/else statement. The first for loop does almost the same thing as the first for loop in the first algorithm but instead, it provides a default value of 1. The second for loop manipulates the savedGroupHash for each option in currentListOfOptions. If the option is in the savedGroupHash, decrement the value by 1, which will result in 0, and if it is not, add a new key-value pair where the key is the option itself and the value is 1, similar to the first for loop.",
  "translation": "为了提供对该算法的总体概述，有两个for循环，一个累加器和一个if / else语句。 第一个for循环与第一个算法中的第一个for循环几乎具有相同的功能，但是，它提供了默认值1。第二个for循环为currentListOfOptions中的每个选项操纵saveedGroupHash。 如果该选项位于SavedGroupHash中，则将值减1，结果为0；否则，添加一个新的键值对，其中键为选项本身，值为1，类似于第一个 for循环。"
}, {
  "tag": "P",
  "text": "Next, with the accumulator, it will take the sum of all the values in the savedGroupHash. The purpose of sum is to help determine if there is a difference in length between the savedGroup array and the currentListOfOptions array. I use the sum in the conditional comparison in the if/else statement in order to return true or false.",
  "translation": "接下来，使用累加器，它将获取saveGroupHash中所有值的总和。 sum的目的是帮助确定saveGroup数组和currentListOfOptions数组之间的长度是否存在差异。 我在if / else语句的条件比较中使用总和，以便返回true或false。"
}, {
  "tag": "P",
  "text": "Now comes the nerve-wracking part: testing this new algorithm.",
  "translation": "现在是令人不安的部分：测试此新算法。"
}, {
  "tag": "H1",
  "text": "Testing the Second Attempt at the Checking Group Algorithm",
  "translation": "在检查组算法中测试第二次尝试"
}, {
  "tag": "P",
  "text": "For consistency, I am going to use the same test cases as when I tested the first attempt at the algorithm. For brevity, I am also going to combine the code and results of all three test cases.",
  "translation": "为了保持一致性，我将使用与首次尝试该算法时相同的测试用例。 为简洁起见，我还将结合所有三个测试用例的代码和结果。"
}, {
  "tag": "PRE",
  "text": "//Test Case #1const savedGroup = [\"Sam\", \"Bob\"]const currentListOfOptions = [\"Bob\", \"Sam\"]console.log(checkGroups(savedGroup, currentListOfOptions)) //true//Test Case #2const savedGroup = [\"Sam\", \"Bob\", \"Jane\"]const currentListOfOptions = [\"Bob\", \"Sam\"]console.log(checkGroups(savedGroup, currentListOfOptions)) //false//Test Case #3const savedGroup = [\"Sam\", \"Bob\"]const currentListOfOptions = [\"Bob\", \"Sam\", \"Jane\"]console.log(checkGroups(savedGroup, currentListOfOptions)) //false",
  "translation": "//测试用例＃1const savedGroup = [“ Sam”，“ Bob”] const currentListOfOptions = [“ Bob”，“ Sam”] console.log（checkGroups（savedGroup，currentListOfOptions））// true //测试用例＃2const savedGroup = [“” Sam“，” Bob“，” Jane“] const currentListOfOptions = [”“ Bob”，“ Sam”] console.log（checkGroups（savedGroup，currentListOfOptions））// false //测试案例＃3const savedGroup = [“ Sam“，” Bob“] const currentListOfOptions = [” Bob“，” Sam“，” Jane“] console.log（checkGroups（savedGroup，currentListOfOptions））// false"
}, {
  "tag": "P",
  "text": "Yes! It looks like the algorithm is working as intended now! We can finally call it a day but…",
  "translation": "是! 看起来该算法正在按预期工作！ 我们终于可以称之为一天了，但是…"
}, {
  "tag": "H1",
  "text": "Occam’s Razor",
  "translation": "奥卡姆剃刀"
}, {
  "tag": "P",
  "text": "While I was working on the Group Randomizer application the next day, I took a look at the checking group algorithm again. I kept grinning at the success of this algorithm (since it took me 1–2 hours to develop it) until I realized that the second algorithm was complete overkill. What do I mean by this?",
  "translation": "第二天，当我在Group Randomizer应用程序上工作时，我再次查看了检查组算法。 我一直为这个算法的成功而苦恼（因为我花了1-2个小时来开发它），直到我意识到第二种算法完全是矫kill过正。 我是什么意思"
}, {
  "tag": "P",
  "text": "Let’s take a look at the test cases again and why I changed the first attempt at the algorithm. The original assumption for the root cause of failing the test was the length of the arrays for each parameter (as reflected in test case #2). In the second attempt of the algorithm, I manipulated the savedGroupHash hash in order to keep track on the difference in array lengths between savedGroup and currentListOfOptions . The sum is the difference between the array lengths. If sum was 0, then the array lengths are the same which returns true . Any other value would return false .",
  "translation": "让我们再次看看测试用例，以及为什么我改变了对算法的第一次尝试。 导致测试失败的根本原因的原始假设是每个参数的数组长度（如测试用例2所示）。 在该算法的第二次尝试中，我操纵了savedGroupHash哈希值，以便跟踪saveGroup和currentListOfOptions之间的数组长度差异。 总和是数组长度之间的差。 如果sum为0，则数组长度相同，并返回true。 其他任何值都将返回false。"
}, {
  "tag": "P",
  "text": "Another way to look at this, I was essentially checking if savedGroup and currentListOfOptions were the same length. Since I know these two parameters are array types, I can just invoke .length on each parameter to confirm if they’re equal length. If these are not the same length, I can immediately return false . The code below represents this implementation.",
  "translation": "换一种方式来看，我本质上是在检查saveGroup和currentListOfOptions的长度是否相同。 由于我知道这两个参数是数组类型，因此我只需在每个参数上调用.length即可确认它们的长度是否相等。 如果这些长度不一样，我可以立即返回false。 下面的代码表示此实现。"
}, {
  "tag": "PRE",
  "text": "if (savedGroup.length !== currentListOfOptions.length) {  return false}",
  "translation": "如果（savedGroup.length！== currentListOfOptions.length）{返回false}"
}, {
  "tag": "P",
  "text": "I can now modify the first attempt of the algorithm with the code above.",
  "translation": "现在，我可以使用上面的代码修改算法的首次尝试。"
}, {
  "tag": "PRE",
  "text": "function checkGroups(savedGroup, currentListOfOptions) {  //insert new code here  if (savedGroup.length !== currentListOfOptions.length) {    return false  }  savedGroupHash = {}  for (let i = 0; i < savedGroup.length; i++){    savedGroupHash[savedGroup[i]] = true  }  for (let j = 0; j < currentListOfOptions.length; j++) {    if (!savedGroupHash.hasOwnProperty(currentListOfOptions[j])) {      return false    }  }    return true}",
  "translation": "函数checkGroups（savedGroup，currentListOfOptions）{//在此处插入新代码，如果（savedGroup.length！== currentListOfOptions.length）{return false} saveGroupHash = {} for（let i = 0; i <savedGroup.length; i ++）{ savedGroupHash [savedGroup [i]] = true} for（let j = 0; j <currentListOfOptions.length; j ++）{if（！savedGroupHash.hasOwnProperty（currentListOfOptions [j]））{返回false}}返回true}"
}, {
  "tag": "P",
  "text": "As you can probably guess next, I ran all three test cases with this algorithm and passed all three test cases!",
  "translation": "您可能接下来会猜到，我使用此算法运行了所有三个测试用例，并通过了所有三个测试用例！"
}, {
  "tag": "P",
  "text": "I was able to simplify the code of checking the array lengths from",
  "translation": "我能够简化从中检查数组长度的代码"
}, {
  "tag": "PRE",
  "text": "for (let j = 0; j < currentListOfOptions.length; j++) {    if (savedGroupHash.hasOwnProperty(currentListOfOptions[j])) {      savedGroupHash[currentListOfOptions[j]] -= 1    } else {      savedGroupHash[currentListOfOptions[j]] = 1    }  }    let sum = Object.values(savedGroupHash).reduce( (acc, current) => acc += current)if (sum === 0) {    //this means the same group already exists    return true  } else {    //this means the group does not already exist    return false  }}",
  "translation": "for（let j = 0; j <currentListOfOptions.length; j ++）{如果（savedGroupHash.hasOwnProperty（currentListOfOptions [j]））{saveGroupHash [currentListOfOptions [j]]-= 1}否则{savedGroupHash [currentListOfOptions [j]] = 1}} let sum = Object.values（savedGroupHash）.reduce（（acc，current）=> acc + = current）if（sum === 0）{//这意味着同一组已经存在，返回true} else { //这表示该组不存在，返回false}}"
}, {
  "tag": "P",
  "text": "to",
  "translation": "至"
}, {
  "tag": "PRE",
  "text": "if (savedGroup.length !== currentListOfOptions.length) {  return false}",
  "translation": "如果（savedGroup.length！== currentListOfOptions.length）{返回false}"
}, {
  "tag": "H1",
  "text": "Unintentional Result in the First Attempt of the Checking Group Algorithm",
  "translation": "第一次尝试检查组算法的意外结果"
}, {
  "tag": "P",
  "text": "While I was in the midst of testing between the first unmodified algorithm and the second algorithm, I realized what the first unmodified algorithm was actually doing. Although it did not serve my intentional purpose of checking if the groups are identical, it checked if one group, currentListOfOptions , was a subset of the other group, savedGroup . I unintentionally created an algorithm of checking subsets in lieu of checking the entire set. Now, if I need to check subsets in the future, I do not need to re-create the algorithm from scratch and leverage using the first unmodified algorithm.",
  "translation": "在测试第一个未修改算法和第二个算法之间的过程中，我意识到了第一个未修改算法的实际作用。 尽管它没有达到检查组是否相同的目的，但它检查了一个组currentListOfOptions是否是另一组saveGroup的子集。 我无意间创建了一种检查子集的算法，而不是检查整个集合的算法。 现在，如果将来需要检查子集，则无需从头开始重新创建算法，也不需要使用第一个未修改的算法来利用它。"
}, {
  "tag": "H1",
  "text": "Key Takeaways",
  "translation": "重要要点"
}, {
  "tag": "P",
  "text": "I took away two major lessons when creating this algorithm.",
  "translation": "创建此算法时，我学了两个主要课程。"
}, {
  "tag": "OL",
  "texts": ["Don’t dig yourself into a rabbit hole by overcomplicating your thoughts."],
  "translations": ["不要因为过于复杂而陷入困境。"]
}, {
  "tag": "P",
  "text": "During the second attempt of the algorithm, I kept on thinking in the back of my mind that this algorithm must contain some kind of complicated solution because this isn’t a common feature (which is probably not true). As you can tell, I went about solving the bug in a roundabout way when it could’ve been done with three lines of code (one line if I didn’t use the curly brackets). If you start to think that your solution is starting to get complicated, take a step back and re-evaluate what you’re trying to achieve and see if it can be phrased in a different way for a possibly better approach.",
  "translation": "在算法的第二次尝试中，我一直在想着该算法必须包含某种复杂的解决方案，因为这不是一个共同的功能（可能不正确）。 如您所知，当可以用三行代码（如果我不使用大括号的话，则只需一行）完成此错误时，我就以一种about回的方式解决了该错误。 如果您开始认为您的解决方案开始变得复杂，请退后一步，重新评估您要达到的目标，然后看看是否可以用其他方式表达它，以寻求更好的方法。"
}, {
  "tag": "P",
  "text": "2. Studying algorithms in general actually helped.",
  "translation": "2.研究算法实际上是有帮助的。"
}, {
  "tag": "P",
  "text": "Like many aspiring software developers, I would be studying different data structures and algorithms and practice solving algorithms on sites like LeetCode. At first, I did not really see the purpose of studying these algorithms because I felt like I would never apply these algorithms outside of technical interviews. However, during my first attempt at creating the checking group algorithm, I intuitively used a hash for comparison purposes. When I was thinking of why I did that, it dawned on me that it was because using hashes was a common way to solve LeetCode algorithms to improve time complexity from O(n²) to O(n). I now see that the algorithms I studied may be applicable to my code when I least expect it.",
  "translation": "像许多有抱负的软件开发人员一样，我将研究不同的数据结构和算法，并在LeetCode等网站上练习求解算法。 起初，我并没有真正了解研究这些算法的目的，因为我觉得我永远不会在技术面试之外应用这些算法。 但是，在我第一次尝试创建检查组算法时，我凭直觉将哈希值用于比较目的。 当我想到为什么这样做时，我突然意识到这是因为使用哈希是解决LeetCode算法以将时间复杂度从O（n²）提升到O（n）的一种常用方法。 现在，我发现我最想不到的算法可能适用于我的代码。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Samuel Guo的文章《Occam’s Razor: Keeping the Code Short and Simple》，参考：https://levelup.gitconnected.com/occams-razor-keeping-the-code-short-and-simple-7ce4b60f87d4)",
  "translation": "（本文翻译自Samuel Guo的文章《 Occam的Razor：保持代码简洁明了》，参考：https：//levelup.gitconnected.com/occams-razor-keeping-the-code-short-and-simple-7ce4b60f87d4）"
}]