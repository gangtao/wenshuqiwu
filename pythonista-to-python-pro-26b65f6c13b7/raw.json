[{
  "tag": "H1",
  "text": "Script everything or CI/CD is your friend",
  "translation": "编写所有脚本，或者CI / CD是您的朋友"
}, {
  "tag": "P",
  "text": "If you do something once it’s an experiment. If you do it more than once it’s a script.",
  "translation": "如果您做某事，那就是一个实验。 如果您不止一次执行脚本，那就是脚本。"
}, {
  "tag": "P",
  "text": "If you have a fancy pants continuous integration set up at your workplace then great, find out how to automate the CI/CD pipeline and automatically test everything on check-in. In my environment, I’ve set up a GitLab server that handles all the git repositories and uses the CI/CD features of GitLab to run automated tests every time code is committed to a repository. To start with this will probably be overkill, but as you start collaborating with other people on a code base you may want to look at running a full CI/CD pipeline.",
  "translation": "如果您在工作场所设置了花哨的裤子进行持续集成，那就太好了，了解如何自动执行CI / CD管道并在登机时自动测试所有内容。 在我的环境中，我设置了一个GitLab服务器来处理所有git存储库，并在每次将代码提交到存储库时使用GitLab的CI / CD功能来运行自动化测试。 首先，这可能会过大，但是当您开始在代码库上与其他人合作时，您可能需要考虑运行完整的CI / CD管道。"
}, {
  "tag": "P",
  "text": "One of the best things to script first is your environment setup. This can be a simple as creating a python virtual environment, installing all the python dependencies and maybe to be super slick, a script to run your unit tests. You have done some unit tests, haven’t you? Learning a bit of bash can be a superpower when it comes to automation, but keep them small, they are not your day job.",
  "translation": "首先编写脚本的最佳方法之一就是环境设置。 这很简单，例如创建python虚拟环境，安装所有python依赖项以及运行单元测试的脚本。 您已经完成了一些单元测试，不是吗？ 在自动化方面，学习一点bash可能是一种超级能力，但要使其小巧，这不是您的日常工作。"
}, {
  "tag": "FIGURE",
  "type": "code"
}, {
  "tag": "P",
  "text": "Second, is to create a script that runs your unit tests and third, a script that generates your documentation.",
  "translation": "第二，创建一个运行单元测试的脚本，第三，生成您的文档的脚本。"
}, {
  "tag": "P",
  "text": "If your module, library or application relies on some large test files unsuitable for version control, then the generation/retrieval of that test data should be scripted. Within my professional capacity, I develop modules that analyse high-resolution image files. The environment setup script generates some images and retrieves some others from a web server using curl.",
  "translation": "如果您的模块，库或应用程序依赖于一些不适合版本控制的大型测试文件，则应编写该测试数据的生成/检索脚本。 我以自己的专业能力，开发用于分析高分辨率图像文件的模块。 环境设置脚本生成一些图像，并使用curl从Web服务器检索其他图像。"
}, {
  "tag": "H1",
  "text": "Document your code",
  "translation": "记录您的代码"
}, {
  "tag": "P",
  "text": "Even if you’re a lone developer, you need to document and test like you’re in a team.",
  "translation": "即使您是一个孤独的开发人员，也需要像在团队中一样进行记录和测试。"
}, {
  "tag": "P",
  "text": "If there’s one thing that developers hate more than writing tests, it’s writing documentation. As I’ve said before, you’re going to be a stranger to your code in 6 months time, so help your future self out by documenting.",
  "translation": "如果开发人员除了编写测试之外还讨厌做一件事，那就是编写文档。 正如我之前说过的，您将在6个月内成为代码的陌生人，因此请通过编写文档来帮助您将来实现自我。"
}, {
  "tag": "P",
  "text": "There are two levels of documentation, the API docs that are generated from your inline comments, and the much more difficult detailed documentation that uses full sentences and mystical things like examples. If you’re not used to writing documentation get yourself started with baby steps and start writing proper python code comments. I use the Google style python docstrings as I find them to be the most aesthetically pleasing and there is good support in Sphinx for generating the HTML or PDF documentation. And use Sphinx! I know it looks crunchy and a bit archaic, but once it’s set up it just sort of works. Sphinx uses reStructured text templates for documentation and lots of editors now support live preview of the rendered view it will generate.",
  "translation": "有两个级别的文档，一个是根据您的内联注释生成的API文档，另一个是难度更大的详细文档，它们使用完整的句子和诸如示例之类的神秘内容。 如果您不习惯编写文档，请从入门开始，并开始编写适当的python代码注释。 我使用Google样式的python文档字符串，因为我发现它们是最美观的，并且Sphinx在生成HTML或PDF文档方面有很好的支持。 并使用Sphinx！ 我知道它看起来很松脆，有点陈旧，但是一旦设置完成，就可以完成一些工作。 Sphinx使用重新构造的文本模板作为文档，许多编辑器现在支持对其生成的渲染视图进行实时预览。"
}, {
  "tag": "H1",
  "text": "Use unit and integration tests",
  "translation": "使用单元和集成测试"
}, {
  "tag": "P",
  "text": "Unit and integration tests are your safety net. If you can’t test your code, you can’t trust your code.",
  "translation": "单元测试和集成测试是您的安全网。 如果您无法测试代码，就无法信任您的代码。"
}, {
  "tag": "P",
  "text": "We all know, or at least should know that writing test code is something we should all be doing, but like all good things from healthy eating to regular exercise, it’s not that fun. We all want to get on to the next fun piece of work and spend less time writing tests, but it just needs to be done. Even when it comes to your own code you’re going to be a stranger to it in 6 months time. If you need to rewrite a validation routine 6 months down the line to handle a bunch of new circumstances, you need to know all the old test cases will still work as you tweak, and rehash your old regular expressions. It’s very normal for the test code for a Class to be much larger than the class itself.",
  "translation": "我们都知道，或者至少应该知道，编写测试代码是我们都应该做的事情，但是就像从健康饮食到定期运动之类的所有美好事物一样，它并不是那么有趣。 我们所有人都希望继续进行下一个有趣的工作，并减少编写测试的时间，但这只是需要完成的工作。 即使涉及到您自己的代码，您也将在6个月内成为陌生人。 如果您需要在6个月后重写验证例程以处理一系列新情况，则需要知道所有旧测试用例在进行调整时仍然可以使用，并重新整理旧的正则表达式。 类的测试代码比类本身大很多是很正常的。"
}, {
  "tag": "P",
  "text": "It’s common for developers to say that “Writing tests takes up too much time.” or “My code doesn’t work in a way that can be tested like that.” Firstly, debugging takes time, deploying code with some edge cases takes time, manually checking everything works after a code update takes time. Tests save time. Secondly, if your code is not written in a way that can be easily tested it is bad code and needs to be rewritten.",
  "translation": "开发人员通常会说“编写测试会花费太多时间。”或“我的代码无法以这种方式进行测试。”首先，调试需要时间，在某些情况下部署代码也需要时间。 ，在代码更新需要一些时间后，手动检查一切正常。 测试可以节省时间。 其次，如果您的代码不是以易于测试的方式编写的，则它是错误的代码，需要重写。"
}, {
  "tag": "FIGURE",
  "type": "code"
}, {
  "tag": "H1",
  "text": "Choose your editor to help you be lazy",
  "translation": "选择您的编辑器以帮助您懒惰"
}, {
  "tag": "P",
  "text": "As a developer, all you have is time and knowledge. There are no raw materials you have to hue into a new product, it all comes from your brain through your fingers and into the computer. So do everything you can to speed up your process, and keeping track of what things are called is a continual source of development treacle. Let your editor do the heavy lifting.",
  "translation": "作为开发人员，您所拥有的只是时间和知识。 您无需依靠任何原材料就可以开发出新产品，所有原材料都来自您的大脑，手指和计算机。 因此，您可以做的一切事情都可以加快您的流程，并且跟踪所谓的事情是开发难题的持续来源。 让您的编辑器承担繁重的工作。"
}, {
  "tag": "P",
  "text": "There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors. — Leon Bambrick",
  "translation": "在计算机科学中，有两个难题：缓存失效，命名和1位错误。 莱昂·班布里克（Leon Bambrick）"
}, {
  "tag": "P",
  "text": "Code completion and function lookup helpers are crucial in speeding up your development. Editors use class and type inference to provide pop up suggestions, parameter lists and even python documentation as you type. This function allows you as a developer to stay on track and in the flow without having to break out into looking up method calls in your code or breaking out the Google.",
  "translation": "代码完成和功能查找助手对于加快开发速度至关重要。 编辑器使用类和类型推断来在您键入时提供弹出建议，参数列表甚至python文档。 此功能使您作为开发人员能够始终如一地前进，而不用担心在代码中查找方法调用或破坏Google。"
}, {
  "tag": "FIGURE",
  "type": "code"
}, {
  "tag": "P",
  "text": "Choosing your favourite code editor can be a bit of a religious war among developers. Ignoring the vi and emacs debate/war that has been going on longer than the dawn of time, here is a list of the top slim-ish editors around.",
  "translation": "选择您喜欢的代码编辑器可能会在开发人员之间引起一场宗教战争。 忽略了时间比黎明更久的vi和emacs辩论/战争，这里列出了一些顶尖的苗条编辑。"
}, {
  "tag": "UL",
  "texts": ["Visual Studio Code — My personal favourite and a relatively new kid on the block. Microsoft has made an excellent lightweight and feature-rich editor that is free in all senses of the word. Free", "Sublime Text — An excellent editor and one which was my primary editor for a very long time. It’s powerful and has great language support. $80", "PyCharm — An editor edging into full IDE territory with a long and loyal following. I haven’t used it since the early days. Worth a try. £69/$89 per year"],
  "translations": ["Visual Studio代码-我个人的最爱，也是一个相对较新的孩子。 Microsoft制作了一款出色的轻量级且功能丰富的编辑器，该编辑器完全免费。 自由", "Sublime Text-出色的编辑，很长一段时间以来一直是我的主要编辑。 它功能强大，并提供强大的语言支持。 $ 80", "PyCharm —编辑器进入了完整的IDE领域，并拥有长期忠实的追随者。 从早期开始我就没有使用过。 值得一试。 每年£69 / $ 89"]
}, {
  "tag": "H2",
  "text": "Coding Python in a team… of one or more",
  "translation": "在一个或多个团队中编码Python"
}, {
  "tag": "H3",
  "text": "If you’re a beginner or even if you’ve been doing it for years it’s easy to get lazy and just get by, on doing what you…",
  "translation": "如果您是初学者，或者即使您已经从事多年，那么在做自己的事情时，很容易变得懒惰而轻松就可以了。"
}, {
  "tag": "H1",
  "text": "Pythonista to Python Pro",
  "translation": "从Pythonista到Python Pro"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/50/0*dAB6r7BAE8FxXWg5?q=20",
  "caption": "Photo by Fabian Grohs on Unsplash",
  "type": "image",
  "file": "0*dAB6r7BAE8FxXWg5"
}, {
  "tag": "P",
  "text": "You’ve been doing small scripts for a while and you’ve started getting bigger and bigger projects. But you're getting the fear, the dreaded imposter syndrome. Now to be fair we all get it and we all have to start somewhere. So here are a few tips to get you from somebody who does Python to a Python developer.",
  "translation": "您已经编写小型脚本已有一段时间了，并且开始获得越来越大的项目。 但是，您正在恐惧，可怕的冒名顶替综合症。 公平地说，我们都明白了，我们都必须从某个地方开始。 因此，这里有一些提示，可帮助您从从事Python的人到Python开发人员。"
}, {
  "tag": "P",
  "text": "Over the next weeks, I will be adding articles that cover each of these sections in depth with project layout examples and some example code.",
  "translation": "在接下来的几周中，我将添加一些文章，这些文章通过项目布局示例和一些示例代码深入介绍了每个部分。"
}, {
  "tag": "P",
  "text": "Update: I’ve written an article about python development in teams, and more detailed best practices.",
  "translation": "更新：我写了一篇关于团队中python开发的文章，以及更详细的最佳实践。"
}, {
  "tag": "H2",
  "text": "Coding Python in a team… of one or more",
  "translation": "在一个或多个团队中编码Python"
}, {
  "tag": "H3",
  "text": "If you’re a beginner or even if you’ve been doing it for years it’s easy to get lazy and just get by, on doing what you…",
  "translation": "如果您是初学者，或者即使您已经从事多年，那么在做自己的事情时，很容易变得懒惰而轻松就可以了。"
}, {
  "tag": "H1",
  "text": "Use a source control service",
  "translation": "使用源代码管理服务"
}, {
  "tag": "P",
  "text": "This should be a developer's Zeroth law, the one that comes before everything else. Your code is the output of your labour and as such you need to keep it safe. At the very minimum, source control like Git is a very sophisticated way to back up your code. But if you’re new to source control and the idea of branches, tags, merging and all that makes you break out into a cold sweat don’t worry. Most of the features in source control are designed around working in a team, so to begin with you won’t have to touch it. To start off, use an online git provider like GitLab, Bitbucket or GitHub and start small, with just checking in as you go. This will give you a way to roll back changes and see a history of what you did and when. If you’re doing blocks of work and then releasing you can move on to tags.",
  "translation": "这应该是开发人员的“零度定律”，这是所有其他规则中的第一定律。 您的代码是您劳动的产物，因此您需要确保其安全。 至少，像Git这样的源代码控制是备份代码的非常复杂的方法。 但是，如果您是源代码控制的新手，那么分支，标签，合并的想法以及所有使您陷入困境的想法都不必担心。 源代码管理中的大多数功能都是围绕团队协作而设计的，因此从一开始就无需动手。 首先，请使用在线git提供程序（如GitLab，Bitbucket或GitHub），并从小规模入手，随便签入。 这将为您提供回滚更改并查看所做操作和时间的历史记录的方法。 如果您要先做工作，然后再发布，则可以继续使用标签。"
}, {
  "tag": "P",
  "text": "Once you start working in a team, this is where branches become very useful. By default, the code you check in will go onto the master branch. As you move onto splitting up work amongst different team members this is where a technique like feature branches will fit in. You should quickly get to a stage where no work is lost and you can track all the changes to your code.",
  "translation": "一旦开始团队合作，分支就会变得非常有用。 默认情况下，您签入的代码将进入master分支。 当您开始在不同团队成员之间分配工作时，这就是诸如功能分支之类的技术所适用的地方。您应该迅速进入一个工作不丢失的阶段，并且可以跟踪对代码的所有更改。"
}, {
  "tag": "FIGURE",
  "type": "code"
}]