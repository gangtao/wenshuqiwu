[{
  "tag": "H2",
  "text": "Swagger Editor",
  "translation": "Swagger编辑器"
}, {
  "tag": "H3",
  "text": "API Design for Teams in SwaggerHub Swagger Editor is one of the most powerful design tools for developers to define…",
  "translation": "SwaggerHub中团队的API设计Swagger Editor是开发人员用来定义……的最强大的设计工具之一。"
}, {
  "tag": "H1",
  "text": "Playground:",
  "translation": "操场："
}, {
  "tag": "P",
  "text": "Yes, we get that one too. Swagger UI is an open-source UI for interacting with the OpenAPI definition file, we can host it ourselves or by using SwaggerHub.",
  "translation": "是的，我们也得到了那个。 Swagger UI是用于与OpenAPI定义文件进行交互的开源UI，我们可以自己托管它，也可以使用SwaggerHub托管它。"
}, {
  "tag": "H2",
  "text": "Swagger Editor",
  "translation": "Swagger编辑器"
}, {
  "tag": "H3",
  "text": "API Design for Teams in SwaggerHub Swagger Editor is one of the most powerful design tools for developers to define…",
  "translation": "SwaggerHub中团队的API设计Swagger Editor是开发人员用来定义……的最强大的设计工具之一。"
}, {
  "tag": "P",
  "text": "We can also view it online, go to http://editor.swagger.io, copy-paste the API definition or Import from URL Petstore API Spec. You will get nice & fancy UI.",
  "translation": "我们也可以在线查看它，请访问http://editor.swagger.io，复制粘贴API定义或从URL Petstore API Spec导入。 您将获得漂亮的界面。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*Tu4iRZ3ODipOfRHOVhgKlQ.png?q=20",
  "type": "image",
  "file": "1*Tu4iRZ3ODipOfRHOVhgKlQ.png"
}, {
  "tag": "H1",
  "text": "Conclusion",
  "translation": "结论"
}, {
  "tag": "P",
  "text": "With OpenAPI specification we can able to,",
  "translation": "借助OpenAPI规范，我们可以"
}, {
  "tag": "UL",
  "texts": ["Build APIs using API design-first approach,", "Enforce server & client implementation to conform to the same definitions", "Generate code for both clients & server implementation in several languages", "Generate & keep documentation up to date with the API definitions", "Have better developer experience with our APIs"],
  "translations": ["使用API设计优先方法构建API，", "强制服务器和客户端实现符合相同的定义", "为客户端和服务器实现生成多种语言的代码", "使用API定义生成并保持文档最新", "使用我们的API具有更好的开发人员经验"]
}, {
  "tag": "P",
  "text": "OpenAPI have several other tools which you might be interested in, check out OpenAPI Tools",
  "translation": "OpenAPI还有其他一些您可能会感兴趣的工具，请查看OpenAPI工具"
}, {
  "tag": "P",
  "text": "Happy building APIs…",
  "translation": "快乐的构建API…"
}, {
  "tag": "H2",
  "text": "Reference:",
  "translation": "参考："
}, {
  "tag": "UL",
  "texts": ["https://swagger.io/specification", "https://github.com/OpenAPITools/openapi-generator", "https://swagger.io", "https://github.com/ramesh-dev/petstore-demo-api", "https://github.com/ramesh-dev/petstore-demo-server"],
  "translations": ["https://swagger.io/specification", "https://github.com/OpenAPITools/openapi-generator", "https://swagger.io", "https://github.com/ramesh-dev/petstore-demo-api", "https://github.com/ramesh-dev/petstore-demo-server"]
}, {
  "tag": "H2",
  "text": "ramesh-dev/petstore-demo-server",
  "translation": "ramesh-dev / petstore-demo-server"
}, {
  "tag": "H3",
  "text": "Sample demo server for petstore open api definition, check out the article, This code was generated by the OpenAPI…",
  "translation": "petstore open api定义的示例演示服务器，请查看文章，此代码由OpenAPI生成..."
}, {
  "tag": "H1",
  "text": "Generating the Server Code:",
  "translation": "生成服务器代码："
}, {
  "tag": "P",
  "text": "What's more fun is, the openapi-generator can also generate server-side code using the same API definition (petstore-api.yml), which not only speeds up the development process but also helps the server to stick the same standard API definitions and conforms to it. So no more missing sync between the server API, its documentation and client implementation :)",
  "translation": "更有趣的是，openapi-generator还可以使用相同的API定义（petstore-api.yml）生成服务器端代码，这不仅可以加快开发过程，而且可以帮助服务器坚持相同的标准API定义，并且 符合它。 因此，服务器API，其文档和客户端实现之间不再缺少同步：)"
}, {
  "tag": "P",
  "text": "Lets quickly set up a new project petstore-server and with the same build configuration with few changes to the generator,",
  "translation": "让我们快速建立一个新项目petstore-server，并使用相同的构建配置，而对生成器所做的更改很少，"
}, {
  "tag": "P",
  "text": "I created it as a spring-boot app, but you can use any framework of your choice and generate API code accordingly.",
  "translation": "我将其创建为春季启动应用，但您可以使用您选择的任何框架并相应地生成API代码。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*FKTnS1SCru09HAb1Vhiadg.png?q=20",
  "caption": "petstore-server setup",
  "type": "image",
  "file": "1*FKTnS1SCru09HAb1Vhiadg.png"
}, {
  "tag": "P",
  "text": "My build.gradle file looks like this,",
  "translation": "我的build.gradle文件看起来像这样，"
}, {
  "tag": "FIGURE",
  "type": "code",
  "raw": "https://gist.github.com/ramesh-dev/90c30368b5542839028fa68da512aeef/raw/7813592c180f627e98aa617185b6c0ef245f5afd/openapi_complete_server_build.gradle",
  "code": "plugins {\n    id 'org.springframework.boot' version '2.2.0.RELEASE'\n    id 'io.spring.dependency-management' version '1.0.8.RELEASE'\n    id \"org.openapi.generator\" version \"4.1.1\"\n    id 'java'\n}\n\ngroup = 'com.petstore'\nversion = '0.1'\nsourceCompatibility = '11'\n\nconfigurations {\n    developmentOnly\n    runtimeClasspath {\n        extendsFrom developmentOnly\n    }\n    compileOnly {\n        extendsFrom annotationProcessor\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\n\next {\n    swagger_annotations_version = \"1.5.22\"\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-actuator'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.openapitools:jackson-databind-nullable:0.2.0'\n\n    compileOnly 'org.projectlombok:lombok'\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\n\n    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\n    annotationProcessor 'org.projectlombok:lombok'\n    annotationProcessor \"io.swagger:swagger-annotations:$swagger_annotations_version\"\n\n    testImplementation('org.springframework.boot:spring-boot-starter-test') {\n        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n    }\n}\n\ntest {\n    useJUnitPlatform()\n}\n\n\n/* Generate Server Code from OpenAPI definition */\ndef petstoreApiYml = \"$rootDir/src/main/resources/petstore-api.yml\".toString()\n\n/* server code configuration */\ntask buildPetStoreServerCode(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {\n    generatorName = \"spring\"\n    inputSpec = petstoreApiYml\n    outputDir = \"$buildDir/generated\".toString()\n\n    groupId = \"$project.group\"\n    id = \"$project.name-java-client\"\n    version = \"$project.version\"\n    apiPackage = \"com.petstore.api\"\n    modelPackage = \"com.petstore.api.model\"\n    enablePostProcessFile = true\n    skipOverwrite = false\n    configOptions = [\n            configPackage       : \"com.petstore.api.config\",\n            java8               : \"true\",\n            dateLibrary         : \"java8\",\n            serializationLibrary: \"jackson\",\n            library             : \"spring-boot\",\n            useBeanValidation   : \"true\",\n            interfaceOnly       : \"true\",\n            serializableModel   : \"true\",\n            useTags             : \"true\"\n    ]\n}\n\n// code will be generated during compilation\ncompileJava.dependsOn(buildPetStoreServerCode)\n\n\n// attach the generated folder as source for this project\nsourceSets {\n    main {\n        java {\n            srcDir \"$buildDir/generated/src/main/java\"\n        }\n    }\n}"
}, {
  "tag": "P",
  "text": "if you check the buildPetStoreServerCode task, we use spring as our generator this time, and few changes related to this generator, most of it remains the same. Check our Spring generator configuration",
  "translation": "如果您检查buildPetStoreServerCode任务，则这次我们使用spring作为生成器，并且与此生成器相关的更改很少，大部分更改保持不变。 检查我们的Spring生成器配置"
}, {
  "tag": "P",
  "text": "Now we can simply create a controller PetsApiController which implements PetsApi interface generated by the open API-generation",
  "translation": "现在我们可以简单地创建一个控制器PetsApiController，该控制器实现由开放API生成的PetsApi接口"
}, {
  "tag": "FIGURE",
  "type": "code",
  "raw": "https://gist.github.com/ramesh-dev/cd2bd3ef2e85c678f65053f24a3b7340/raw/4584a3dc115fd6a7675a35c0c167249bb7ec3d5f/PetsApiController.java",
  "code": "@RestController\npublic class PetsApiController implements PetsApi {\n\n    @Override\n    public ResponseEntity<Void> createPets() {\n        // create new pet :)\n        return ResponseEntity.status(HttpStatus.CREATED).build();\n    }\n\n    @Override\n    public ResponseEntity<List<Pet>> listPets(@Valid Integer limit) {\n\n        Pet pet1 = new Pet();\n        pet1.setId(1L);\n        pet1.setName(\"kitty\");\n        pet1.setTag(\"cat\");\n\n        Pet pet2 = new Pet();\n        pet2.setId(1L);\n        pet2.setName(\"doe\");\n        pet2.setTag(\"dog\");\n\n        return ResponseEntity.ok(List.of(pet1, pet2));\n    }\n\n    @Override\n    public ResponseEntity<Pet> showPetById(String petId) {\n\n        Pet pet = new Pet();\n        pet.setId(1L);\n        pet.setName(\"kitty\");\n        pet.setTag(\"cat\");\n\n        return ResponseEntity.ok(pet);\n    }\n}"
}, {
  "tag": "P",
  "text": "Notice, the PetsApi, Pet model, Method Definitions all come from the generated code, our lives get much easier now!",
  "translation": "注意，PetsApi，Pet模型，方法定义全部来自生成的代码，现在我们的生活变得更加轻松！"
}, {
  "tag": "P",
  "text": "The complete server code is available on Github,",
  "translation": "完整的服务器代码可在Github上找到，"
}, {
  "tag": "H2",
  "text": "ramesh-dev/petstore-demo-server",
  "translation": "ramesh-dev / petstore-demo-server"
}, {
  "tag": "H3",
  "text": "Sample demo server for petstore open api definition, check out the article, This code was generated by the OpenAPI…",
  "translation": "petstore open api定义的示例演示服务器，请查看文章，此代码由OpenAPI生成..."
}, {
  "tag": "H1",
  "text": "Making Changes to API:",
  "translation": "更改API："
}, {
  "tag": "P",
  "text": "Since the api definition is hosted in a separate repository, developers can easily make changes in different branches and create Pull Requests. So every change can be safely reviewed, checked for design quality and other stuff. Now we can set up build pipelines to generate libraries, upload artifacts, update documentation all in one command.",
  "translation": "由于api定义托管在单独的存储库中，因此开发人员可以轻松地在不同的分支中进行更改并创建Pull Requests。 因此，可以安全地检查每个更改，检查设计质量和其他内容。 现在，我们可以建立构建管道来生成库，上传工件，更新文档全部在一个命令中。"
}, {
  "tag": "H2",
  "text": "ramesh-dev/petstore-demo-api",
  "translation": "ramesh-dev / petstore-demo-api"
}, {
  "tag": "H3",
  "text": "You can't perform that action at this time. You signed in with another tab or window. You signed out in another tab or…",
  "translation": "您目前无法执行该操作。 您使用其他选项卡或窗口登录。 您已在另一个标签中退出，或…"
}, {
  "tag": "H1",
  "text": "Setting up:",
  "translation": "配置："
}, {
  "tag": "P",
  "text": "For this example, we will be using java & gradle , but the idea is the same for other languages or environments. First, create a Gradle Java project petstore-api from the IDE of your choice, I use IntelliJ, Gradle 5.",
  "translation": "对于此示例，我们将使用java＆gradle，但对于其他语言或环境，想法是相同的。 首先，使用您选择的IDE创建一个Gradle Java项目petstore-api，我使用IntelliJ Gradle 5。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*CT1C4x_FWBPnVNrdjZ8WSA.png?q=20",
  "type": "image",
  "file": "1*CT1C4x_FWBPnVNrdjZ8WSA.png"
}, {
  "tag": "P",
  "text": "A plain simple java project, you can also remove the java source folder from the project, since we are not going to write any code :). This project serves as a commonplace to hold the API contract (only definitions, no code) and libraries which can be used directly in the service where we write actual APIs as well as generate client libraries.",
  "translation": "一个普通的简单Java项目，您也可以从项目中删除Java源文件夹，因为我们不会编写任何代码:)。 这个项目是持有API合约（仅定义，没有代码）和库的常见方法，这些库可以直接在我们编写实际API以及生成客户端库的服务中使用。"
}, {
  "tag": "H1",
  "text": "APIs:",
  "translation": "蜜蜂："
}, {
  "tag": "P",
  "text": "For the API, we will be using the petstore sample provided in the OpenAPI site, it defines APIs to create & fetch pet's information.",
  "translation": "对于API，我们将使用OpenAPI网站中提供的petstore示例，该示例定义了API以创建和获取宠物的信息。"
}, {
  "tag": "FIGURE",
  "type": "code",
  "raw": "https://gist.github.com/ramesh-dev/f599182121dedf399b777e0e30f04572/raw/e9e9f84c300a9495ff0cb178868566b63880657b/petstore-sample-openapi.yaml",
  "code": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string"
}, {
  "tag": "P",
  "text": "Create a new file petstore-api.yml under resources the folder and copy-paste the content from above either via gist or from Github.",
  "translation": "在资源文件夹下创建一个新文件petstore-api.yml，然后通过gist或Github从上方复制粘贴内容。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*E72osIJvWfxG5j-hgNzR4A.png?q=20",
  "type": "image",
  "file": "1*E72osIJvWfxG5j-hgNzR4A.png"
}, {
  "tag": "H1",
  "text": "Adding the OpenAPI Generator Plugin:",
  "translation": "添加OpenAPI Generator插件："
}, {
  "tag": "P",
  "text": "That’s the easy part, the official open API-generator repo contains information on how to use it, for gradle setup read on Gradle Plugin, copy-paste the following content to your build.gradle file,",
  "translation": "这很容易，正式的开放API生成器存储库包含有关使用方法的信息，有关Gradle插件的Gradle设置阅读，将以下内容复制粘贴到build.gradle文件中，"
}, {
  "tag": "FIGURE",
  "type": "code",
  "raw": "https://gist.github.com/ramesh-dev/91dbfd66b25ee560697cd23a63b28f8c/raw/c2d9cf7a785dc32b0d95378a4e6f98ed1a822246/build.gradle",
  "code": "def petstoreApiYml = \"$rootDir/src/main/resources/petstore-api.yml\".toString()\n\n/* java client configuration */\ntask buildPetStoreJavaClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {\n    generatorName = \"java\"\n    inputSpec = petstoreApiYml\n    outputDir = \"$buildDir/java-client\".toString()\n\n    groupId = \"$project.group\"\n    id = \"$project.name-java-client\"\n    version = \"$project.version\"\n    apiPackage = \"com.petstore.api\"\n    invokerPackage = \"com.petstore.api.invoker\"\n    modelPackage = \"com.petstore.api.model\"\n    enablePostProcessFile = true\n    skipOverwrite = false\n    configOptions = [\n            java8               : \"true\",\n            dateLibrary         : \"java8\",\n            serializationLibrary: \"jackson\",\n            library             : \"resttemplate\",\n            useBeanValidation   : \"true\",\n            enableBuilderSupport: \"true\"\n    ]\n    systemProperties = [\n            modelDocs: \"true\"\n    ]\n}\n\ntask generateCode(type: Copy, dependsOn: ['buildPetStoreJavaClient']) {\n\n    def srcPath = \"$buildDir/java-client\"\n    def targetPath = \"$rootDir/docs\"\n\n    // copy docs\n    from(srcPath + \"/docs\")\n    into(targetPath)\n    include('*.md')\n}\n\n// code will be generated during compilation\ncompileJava.dependsOn(generateCode)\n\n\n// attach the generated folder as source for this project\nsourceSets {\n    main {\n        java {\n            srcDir \"$buildDir/java-client/src/main/java\"\n        }\n    }\n}\n"
}, {
  "tag": "P",
  "text": "Here is the break down of the above code,",
  "translation": "这是上面代码的分解，"
}, {
  "tag": "P",
  "text": "buildPetStoreJavaClient: This is a custom Gradle task which we extend from openApiGenerate task provided by the openapi-generator plugin, which is used to Generate code via Open API Tools Generator for Open API 2.0 or 3.x specification documents.",
  "translation": "buildPetStoreJavaClient：这是一个自定义的Gradle任务，我们从openapi-generator插件提供的openApiGenerate任务扩展而来，该任务用于通过Open API Tools Generator为Open API 2.0或3.x规范文档生成代码。"
}, {
  "tag": "UL",
  "texts": ["generatorName: represents which generator to use to build the code, we use java, there are several other generators available like Go, Koltin, Spring etc, take a look Generators List. So you can generate code for different languages, for clients or servers, etc.", "there are several other configurations like the package name, artifact definitions etc can be configured, for more check Configurations", "configOptions: this defines the configuration that needs to be passed to the generator, can vary for each generator, since in our case its java, we configure it to use java8 date library, Jackson for serialization, enable BeanValidation, etc. For more check Java Configurations"],
  "translations": ["generatorName：表示使用哪个生成器来生成代码，我们使用java，还有其他几种可用的生成器，例如Go，Koltin，Spring等，请查看生成器列表。 因此，您可以为不同的语言，客户端或服务器等生成代码。", "还有其他一些配置，例如包名称，工件定义等，可以进行配置，以进行更多检查", "configOptions：定义需要传递给生成器的配置，对于每个生成器，配置可能有所不同，因为在我们的示例中，我们将其配置为使用java8日期库，Jackson进行序列化，启用BeanValidation等。有关更多信息，请检查Java 构型"]
}, {
  "tag": "P",
  "text": "generateCode: I wrote a helper task which copies the generated documentation from the generated folder to the root docs folder so we can add it to git. Note: this task adds buildPetStoreJavaClient as it dependency",
  "translation": "generateCode：我编写了一个帮助程序任务，它将生成的文档从生成的文件夹复制到根docs文件夹，以便我们可以将其添加到git中。 注意：此任务将buildPetStoreJavaClient添加为依赖项"
}, {
  "tag": "P",
  "text": "and we added the generateCode as a dependency to compileJava task, so every time we compile the code gets generated,",
  "translation": "并且我们将generateCode添加为compileJava任务的依赖项，因此，每次编译代码时，都会生成该代码，"
}, {
  "tag": "PRE",
  "text": "compileJava.dependsOn(generateCode)",
  "translation": "compileJava.dependsOn（generateCode）"
}, {
  "tag": "P",
  "text": "Let's try, run compileJava task,",
  "translation": "让我们尝试运行compileJava任务，"
}, {
  "tag": "PRE",
  "text": "./gradlew clean compileJava",
  "translation": "./gradlew clean compileJava"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/28/1*4kx3byaJE2tgZzTNOXXcPw.png?q=20",
  "type": "image",
  "file": "1*4kx3byaJE2tgZzTNOXXcPw.png"
}, {
  "tag": "P",
  "text": "the code will be generated in build/java-client directory,",
  "translation": "该代码将在build / java-client目录中生成，"
}, {
  "tag": "P",
  "text": "You can also notice it generated the entire project with its own project structure, build script, docs, readme, etc. you can configure these options in the generate task.",
  "translation": "您还可以注意到它使用自己的项目结构，构建脚本，文档，自述文件等生成了整个项目。您可以在generate任务中配置这些选项。"
}, {
  "tag": "P",
  "text": "and finally, since the code is generated in the build directory, we need to add the code to current project sources in order to generate the jar, add the following code to your build.gradle file,",
  "translation": "最后，由于代码是在build目录中生成的，因此我们需要将代码添加到当前项目源中才能生成jar，将以下代码添加到build.gradle文件中，"
}, {
  "tag": "PRE",
  "text": "// attach the generated folder as source for this projectsourceSets {    main {        java {            srcDir \"$buildDir/java-client/src/main/java\"        }    }}",
  "translation": "//将生成的文件夹作为此项目的源附加到sourcesets {main {java {srcDir“ $ buildDir / java-client / src / main / java”}}}"
}, {
  "tag": "P",
  "text": "Also now that your generated code is current project Source if you compile now you will get errors because the dependencies used by those codes were not defined in the current project, add the following.NOTE: this is required purely for the sake of building the library.",
  "translation": "同样，现在生成的代码是当前项目的源代码，如果现在进行编译，由于在当前项目中未定义这些代码所使用的依赖项，您将获得错误，请添加以下内容。注意：仅出于构建库的目的，这是必需的 。"
}, {
  "tag": "PRE",
  "text": "// these dependencies are required for the generated code in order to buildext {    swagger_annotations_version = \"1.5.22\"    jackson_version = \"2.9.9\"    jackson_databind_version = \"2.9.9\"    spring_web_version = \"4.3.9.RELEASE\"    jodatime_version = \"2.9.9\"    junit_version = \"4.12\"    validation_version = \"2.0.1.Final\"}dependencies {    compile \"io.swagger:swagger-annotations:$swagger_annotations_version\"    compile \"com.google.code.findbugs:jsr305:3.0.2\"    compile \"org.springframework:spring-web:$spring_web_version\"    compile \"com.fasterxml.jackson.core:jackson-core:$jackson_version\"    compile \"com.fasterxml.jackson.core:jackson-annotations:$jackson_version\"    compile \"com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version\"    compile \"com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version\"    compile \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version\"    testCompile \"junit:junit:$junit_version\"    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'    compile \"javax.validation:validation-api:$validation_version\"}",
  "translation": "//生成的代码需要这些依赖关系才能构建ext {swagger_annotations_version =“ 1.5.22” jackson_version =“ 2.9.9” jackson_databind_version =“ 2.9.9” spring_web_version =“ 4.3.9.RELEASE” jodatime_version =“ 2.9。 9“ junit_version =” 4.12“ validation_version =” 2.0.1.Final“}依赖性{编译” io.swagger：swagger-annotations：$ swagger_annotations_version“编译” com.google.code.findbugs：jsr305：3.0.2“编译” org.springframework：spring-web：$ spring_web_version“编译” com.fasterxml.jackson.core：jackson-core：$ jackson_version“编译” com.fasterxml.jackson.core：jackson-annotations：$ jackson_version“编译” com.fasterxml“ .jackson.core：jackson-databind：$ jackson_databind_version“编译” com.fasterxml.jackson.jaxrs：jackson-jaxrs-json-provider：$ jackson_version“编译” com.fasterxml.jackson.datatype：jackson-datatype-jsr310：$ jackson_version“ testCompile” junit：junit：$ junit_version“编译组：'javax.ann otation”，名称：“ javax.annotation-api”，版本：“ 1.3.2”，编译“ javax.validation：validation-api：$ validation_version”}"
}, {
  "tag": "P",
  "text": "So the complete build.gradle file should look like this,",
  "translation": "因此完整的build.gradle文件应如下所示："
}, {
  "tag": "FIGURE",
  "type": "code",
  "raw": "https://gist.github.com/ramesh-dev/a06b5e7d41d4febf9fb44f7d7ac580b3/raw/7048f0d2fc2a6205e3b184fb0bab704e3fe84bf0/openapi_complete_build.gradle",
  "code": "plugins {\n    id 'java'\n    id \"org.openapi.generator\" version \"4.1.1\"\n}\n\ngroup 'com.petstore'\nversion '0.1'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndef petstoreApiYml = \"$rootDir/src/main/resources/petstore-api.yml\".toString()\n\n/* java client configuration */\ntask buildPetStoreJavaClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {\n    generatorName = \"java\"\n    inputSpec = petstoreApiYml\n    outputDir = \"$buildDir/java-client\".toString()\n\n    groupId = \"$project.group\"\n    id = \"$project.name-java-client\"\n    version = \"$project.version\"\n    apiPackage = \"com.petstore.api\"\n    invokerPackage = \"com.petstore.api.invoker\"\n    modelPackage = \"com.petstore.api.model\"\n    enablePostProcessFile = true\n    skipOverwrite = false\n    configOptions = [\n            java8               : \"true\",\n            dateLibrary         : \"java8\",\n            serializationLibrary: \"jackson\",\n            library             : \"resttemplate\",\n            useBeanValidation   : \"true\",\n            enableBuilderSupport: \"true\"\n    ]\n    systemProperties = [\n            modelDocs: \"true\"\n    ]\n}\n\ntask generateCode(type: Copy, dependsOn: ['buildPetStoreJavaClient']) {\n\n    def srcPath = \"$buildDir/java-client\"\n    def targetPath = \"$rootDir/docs\"\n\n    // copy docs\n    from(srcPath + \"/docs\")\n    into(targetPath)\n    include('*.md')\n}\n\n// code will be generated during compilation\ncompileJava.dependsOn(generateCode)\n\n\n// attach the generated folder as source for this project\nsourceSets {\n    main {\n        java {\n            srcDir \"$buildDir/java-client/src/main/java\"\n        }\n    }\n}\n\n\n// these dependencies are required for the generated code in order to build\next {\n    swagger_annotations_version = \"1.5.22\"\n    jackson_version = \"2.9.9\"\n    jackson_databind_version = \"2.9.9\"\n    spring_web_version = \"4.3.9.RELEASE\"\n    jodatime_version = \"2.9.9\"\n    junit_version = \"4.12\"\n    validation_version = \"2.0.1.Final\"\n}\n\ndependencies {\n    compile \"io.swagger:swagger-annotations:$swagger_annotations_version\"\n    compile \"com.google.code.findbugs:jsr305:3.0.2\"\n    compile \"org.springframework:spring-web:$spring_web_version\"\n    compile \"com.fasterxml.jackson.core:jackson-core:$jackson_version\"\n    compile \"com.fasterxml.jackson.core:jackson-annotations:$jackson_version\"\n    compile \"com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version\"\n    compile \"com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version\"\n    compile \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version\"\n    testCompile \"junit:junit:$junit_version\"\n    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'\n    compile \"javax.validation:validation-api:$validation_version\"\n}\n"
}, {
  "tag": "P",
  "text": "And now for the moment of truth, when you run build command, you get the fancy java client library under bulid/libs,",
  "translation": "现在，事实上，当您运行build命令时，您会在bulid / libs下获得漂亮的Java客户端库，"
}, {
  "tag": "PRE",
  "text": "./gradlew clean build",
  "translation": "./gradlew干净的构建"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*3dlIJR7N8-e2kTh-Lnh6dQ.png?q=20",
  "caption": "generated client library",
  "type": "image",
  "file": "1*3dlIJR7N8-e2kTh-Lnh6dQ.png"
}, {
  "tag": "P",
  "text": "You can upload the library to artifactory, maven central, GitHub etc for use by other developers or even for your own service (more on this later).",
  "translation": "您可以将库上载到工件，maven Central，GitHub等，供其他开发人员使用，甚至用于您自己的服务（稍后将对此进行更多介绍）。"
}, {
  "tag": "P",
  "text": "Similarly, you can generate libraries for other languages, so other developers can easily build code just by using the YAML API definition.",
  "translation": "同样，您可以生成其他语言的库，因此其他开发人员只需使用YAML API定义即可轻松构建代码。"
}, {
  "tag": "P",
  "text": "Complete source code for the api-contract with the setup is available on Github,",
  "translation": "Github上提供了带有安装程序的api合同的完整源代码，"
}, {
  "tag": "H2",
  "text": "ramesh-dev/petstore-demo-api",
  "translation": "ramesh-dev / petstore-demo-api"
}, {
  "tag": "H3",
  "text": "You can't perform that action at this time. You signed in with another tab or window. You signed out in another tab or…",
  "translation": "您目前无法执行该操作。 您使用其他选项卡或窗口登录。 您已在另一个标签中退出，或…"
}, {
  "tag": "H2",
  "text": "OpenAPI Specification",
  "translation": "OpenAPI规范"
}, {
  "tag": "H3",
  "text": "Version 3.0.2 The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”…",
  "translation": "版本3.0.2关键字“必须”，“必须”，“必须”，“应有”，“应有”，“应有”，“应有”…"
}, {
  "tag": "H1",
  "text": "End to End Restful API development using OpenAPI Specification",
  "translation": "使用OpenAPI规范进行端到端的Restful API开发"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/58/1*HVxOQi8bSHrnmndMykScog.jpeg?q=20",
  "caption": "Image downloaded from the internet",
  "type": "image",
  "file": "1*HVxOQi8bSHrnmndMykScog.jpeg"
}, {
  "tag": "P",
  "text": "With the increasing number of adoption towards service-oriented architecture and for better integrations with external systems, it became a necessity to write Restful APIs for our services. While building so we might often find several challenges such as,",
  "translation": "随着越来越多的人采用面向服务的体系结构并更好地与外部系统集成，有必要为我们的服务编写Restful API。 在进行构建时，我们可能经常会遇到一些挑战，例如，"
}, {
  "tag": "UL",
  "texts": ["Standard & Consistent API design", "Better documentation", "Client Libraries", "Playground (better developer experience)"],
  "translations": ["标准和一致的API设计", "更好的文档", "客户图书馆", "游乐场（更好的开发人员经验）"]
}, {
  "tag": "P",
  "text": "So while writing APIs, we have to make sure it sticks to a standard design principle, update documentation (hosted elsewhere) and finally write client libraries (harder if you have to support multiple languages). Doing all of this manually is a painful job.",
  "translation": "因此，在编写API时，我们必须确保它遵循标准的设计原则，更新文档（在其他地方托管），最后编写客户端库（如果必须支持多种语言则更加困难）。 手动执行所有这些操作是一件痛苦的事情。"
}, {
  "tag": "P",
  "text": "Likely we have OpenAPI Specification (formerly known as swagger), which offers us a standard, language-agnostic interface to write RESTful APIs which allows both humans and computers to understand the service capabilities.",
  "translation": "可能我们有OpenAPI规范（以前称为swagger），该规范为我们提供了一个标准的，与语言无关的接口来编写RESTful API，使人类和计算机都可以理解服务功能。"
}, {
  "tag": "P",
  "text": "You can read more about it, there are plenty of content out there, here is the official site,",
  "translation": "您可以阅读有关它的更多信息，这里有很多内容，这是官方网站，"
}, {
  "tag": "H2",
  "text": "OpenAPI Specification",
  "translation": "OpenAPI规范"
}, {
  "tag": "H3",
  "text": "Version 3.0.2 The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”…",
  "translation": "版本3.0.2关键字“必须”，“必须”，“必须”，“应有”，“应有”，“应有”，“应有”…"
}, {
  "tag": "P",
  "text": "In short, you can define the APIs in a JSON or YAML file, which can be easily converted to code or documentation.",
  "translation": "简而言之，您可以在JSON或YAML文件中定义API，可以轻松将其转换为代码或文档。"
}, {
  "tag": "P",
  "text": "In this article, we will be looking at how we can work with OpenAPI specification, generate code and use it in the server & client-side.",
  "translation": "在本文中，我们将研究如何使用OpenAPI规范，如何生成代码并在服务器和客户端使用它。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Ramesh Lingappa的文章《End to End Restful API development using OpenAPI Specification》，参考：https://medium.com/swlh/end-to-end-restful-api-development-using-openapi-specification-c73d45e98c8d)",
  "translation": "（本文翻译自Ramesh Lingappa的文章《使用OpenAPI规范进行端到端的REST API开发》，参考：https：//medium.com/swlh/end-to-end-restful-api-development-using-openapi-specification- c73d45e98c8d）"
}]