[{
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*f2IVAl0TbsfES9cFGYr40g.png?q=20",
  "type": "image",
  "file": "1*f2IVAl0TbsfES9cFGYr40g.png"
}, {
  "tag": "P",
  "text": "📝 Read this story later in Journal.",
  "translation": "later稍后在日记中阅读此故事。"
}, {
  "tag": "P",
  "text": "🗞 Wake up every Sunday morning to the week’s most noteworthy Tech stories, opinions, and news waiting in your inbox: Get the noteworthy newsletter >",
  "translation": "🗞每个星期天的早晨，您可以在收件箱中等待本周最值得关注的Tech故事，观点和新闻：获取值得关注的新闻通讯>"
}, {
  "tag": "P",
  "text": "Disclaimer: The opinions expressed here are strictly my own, based on my professional experience as an Educator and Web Developer. They do not represent the opinions or views of BrainStation.",
  "translation": "免责声明：基于我作为教育者和Web开发人员的专业经验，此处表达的观点完全是我自己的观点。 它们不代表BrainStation的意见或观点。"
}, {
  "tag": "H1",
  "text": "Conclusion",
  "translation": "结论"
}, {
  "tag": "P",
  "text": "While programming can be a difficult skill to learn, it is certainly one that most people can learn. The above list contains attitudes and mindsets that get in the way, but most people can overcome them and develop a competency in the area of programming — if not mastery.",
  "translation": "尽管编程可能是一种很难学习的技能，但肯定是大多数人可以学习的技能。 上面的列表中包含了妨碍您前进的态度和心态，但是大多数人都可以克服它们，并在编程领域发展能力（如果不是精通的话）。"
}, {
  "tag": "P",
  "text": "If you are interested in learning to program, I encourage you to begin the journey. Keep the above list in mind, and start exploring the many resources available online that can get you moving forward quickly. You won’t regret it.",
  "translation": "如果您有兴趣学习编程，我鼓励您开始旅程。 请牢记上面的清单，并开始探索许多在线可用资源，这些资源可以使您快速前进。 您不会后悔的。"
}, {
  "tag": "P",
  "text": "The following list will help you know if you will suck at programming — and what you can do about it if you want to change.",
  "translation": "以下列表将帮助您了解您是否会精通编程，以及如果您想进行更改，可以如何做。"
}, {
  "tag": "H1",
  "text": "1 | Lack of curiosity",
  "translation": "1 | 缺乏好奇心"
}, {
  "tag": "P",
  "text": "If you lack curiosity about computers and how technology works, you will never be successful as a programmer.",
  "translation": "如果您对计算机以及技术的运行方式缺乏好奇心，那么您将永远无法成为一名程序员。"
}, {
  "tag": "P",
  "text": "A fundamental requirement for learning is an active interest in the thing you are learning. If you do not possess a mind that is curious about technology, you will not have the energy it takes to persist in learning the broad and deep knowledge required to be a successful programmer.",
  "translation": "学习的基本要求是对所学事物的积极兴趣。 如果您没有对技术感到好奇的头脑，那么您将没有精力去坚持学习成为一名成功的程序员所需要的广泛而深入的知识。"
}, {
  "tag": "P",
  "text": "In contrast, the world of technology is like a huge ocean of interesting domains, inter-connected ideas, and possibilities that can excite the imagination. It takes an inherent internal motivation to want to dive in and discover all that you can.",
  "translation": "相反，技术世界就像是一个巨大的海洋，充满了有趣的领域，相互联系的思想以及激发想象力的可能性。 想要潜入并发现所有可能的一切，需要一种内在的内在动力。"
}, {
  "tag": "P",
  "text": "Find Your Curiosity: Ask yourself if programming truly interests you. If your honest answer is that it doesn’t, go find something that you are interested in. Save yourself the time and energy. But if your answer is “Yes”, then push yourself find something new that you haven’t noticed before, recognize the vast ocean and dive a little deeper.",
  "translation": "找到您的好奇心：问问自己编程是否真正让您感兴趣。 如果您的诚实答案不是，请去寻找您感兴趣的东西。节省时间和精力。 但是，如果您的答案是“是”，那么就让自己找到从未见过的新事物，认清广阔的海洋，然后再潜入更深的地方。"
}, {
  "tag": "H1",
  "text": "2 | Lack of autonomy and resourcefulness",
  "translation": "2 | 缺乏自治和机智"
}, {
  "tag": "P",
  "text": "If you don’t develop the ability to solve problems for yourself, you will never be successful as a programmer.",
  "translation": "如果您不具备为自己解决问题的能力，那么您将永远无法成为一名程序员。"
}, {
  "tag": "P",
  "text": "Without a doubt, to be a successful developer, you have to be confident in your OWN ability to learn. This is actually a fundamental life skill — if you are are over the age of 18, nobody is obligated to teach you anything. That’s reality. It’s up to you to find the information and help that you need to learn what is important to you.",
  "translation": "毫无疑问，要成为成功的开发人员，您必须对自己的OWN学习能力充满信心。 这实际上是一项基本的生活技能-如果您超过18岁，则没有人有义务教您任何内容。 那是现实。 由您来查找信息和帮助，以了解对您而言重要的信息。"
}, {
  "tag": "P",
  "text": "In the world of development, all the information you need is found in that magical place formerly known as the Information Super Highway. This massive library has one huge doorway: Google. Learning that you can simply type whatever you want into Google and get to the information you need is the first hurdle to cross when you want to learn the skills needed to be in technology.",
  "translation": "在发展的世界中，您需要的所有信息都在那个神奇的地方找到，该地方以前被称为信息超级高速公路。 这个庞大的图书馆有一个巨大的门户：Google。 当您想学习技术方面的技能时，首先要克服的障碍就是，您可以轻松地将任何内容输入Google并获取所需的信息。"
}, {
  "tag": "P",
  "text": "In addition to being a good googler, all programming languages have documentation and specifications that are very explicit about how the language works. It’s like using a dictionary — when you see a word you don’t recognize, you look it up. The quickest, most reliable way to build your skill as a programmer is to simply read the documentation. It’s literally all there.",
  "translation": "除了成为优秀的googler之外，所有编程语言都具有明确说明该语言工作原理的文档和规范。 就像使用字典一样，当您看到一个不认识的单词时，便会查找它。 建立程序员技能的最快，最可靠的方法就是简单地阅读文档。 实际上就在那里。"
}, {
  "tag": "P",
  "text": "Use the Resources: Recognize that all the answers you need really are out there. When you have a question, force yourself to google it before asking someone else for the answer and check the documentation. Save the time of others for when you have tried and truly failed to find the answer you need.",
  "translation": "使用资源：认识到您真正需要的所有答案都在那里。 如果您有问题，请在询问其他人答案之前，先强迫自己在Google上进行搜索并查看文档。 当您尝试并确实未能找到所需的答案时，可以节省其他人的时间。"
}, {
  "tag": "H1",
  "text": "3 | Lack of persistence in the face of a problem",
  "translation": "3 | 面对问题缺乏毅力"
}, {
  "tag": "P",
  "text": "If you give up easily in the face of problems, you will never be successful as a programmer.",
  "translation": "如果您在遇到问题时轻易放弃，您将永远不会成为一名程序员。"
}, {
  "tag": "P",
  "text": "The essence of programming is solving problems. That’s the whole reason computers were invented! Whenever you begin working on a program you will encounter a whole “stack” of problems. And once you resolve a problem, there is almost always another problem right behind it. You are making progress, but there are always new problems to face.",
  "translation": "编程的本质是解决问题。 这就是发明计算机的全部原因！ 每当您开始编写程序时，都会遇到整个问题。 解决问题后，几乎总会遇到另一个问题。 您正在取得进步，但是总是要面对新的问题。"
}, {
  "tag": "P",
  "text": "Facing that stack of problems can be daunting and discouraging. If you feel like things should “just work”, then you won’t have the energy to persist as the problems continue and little by little knock down your emotional resolve. It’s literally your job to figure out why things aren’t working.",
  "translation": "面对一堆问题可能令人生畏和沮丧。 如果您觉得事情应该“正常运转”，那么随着问题继续存在，您将没有持续的精力，并且一点一点地破坏了您的情感决心。 从字面上看，这是您的工作，找出为什么事情不起作用。"
}, {
  "tag": "P",
  "text": "From my in-class experience, there are usually one or two students per class who seem to have knack for encountering more problems than other students — often quite random and obscure problems. I remind the student that the more problems they face upfront, the possibility of learning more deeply and thoroughly increases. If they can gain understanding through these problems, they will quickly find that they are more confident because they have faced and resolved more problems than the average student.",
  "translation": "根据我在课堂上的经验，通常每班有一两个学生似乎比其他学生有更多的问题遇到麻烦的诀窍，这些问题通常是相当随机且难以理解的问题。 我提醒学生，他们面对的问题越多，学习得越深入和透彻的可能性就越大。 如果他们能够通过这些问题获得理解，他们会很快发现自己比以前的普通学生更有信心，因为他们面对并解决了更多的问题。"
}, {
  "tag": "P",
  "text": "Patient Acceptance: You need to recognize that problems come with the territory and are not problems, but in fact challenges. Every challenge you face and overcome gives you deeper understanding and a better ability to face new challenges, and quickly resolve old ones.",
  "translation": "患者接受度：您需要认识到问题与领土相关，不是问题，而是挑战。 您面临和克服的每一个挑战都使您有更深刻的理解，并具有更好的能力来应对新挑战并迅速解决旧挑战。"
}, {
  "tag": "H1",
  "text": "4 | No feeling of success in overcoming a problem",
  "translation": "4 | 克服问题没有成功的感觉"
}, {
  "tag": "P",
  "text": "If you don’t feel a sense of excitement and accomplishment after solving a problem, you will never be successful as a programmer.",
  "translation": "如果您在解决问题后没有感到兴奋和成就感，那么您将永远无法成为一名程序员。"
}, {
  "tag": "P",
  "text": "Related to the previous issue of giving up too easily is a lack of “good feelings” once you have successfully resolved a problem. When fixing bugs and issues becomes a treadmill that never seems to end, you lose touch with the excitement that comes in overcoming a problem.",
  "translation": "成功解决问题后，与先前的问题太容易放弃有关的是缺乏“良好感觉”。 当修复bug和问题变成永无止境的跑步机时，您会失去克服问题所带来的兴奋。"
}, {
  "tag": "P",
  "text": "There is actually a dopamine hit that you need when you overcome a problem. This is similar to the experience of completing a level in a video game, or solving a challenge like a crossword or sudoku. We all know that there is a good feeling that comes from persisting through a challenge and then finally winning at the end. But if you have lost the ability to feel those feelings, or never truly cared in the first place, you will not be able experience the joy that comes from programming. If you see programming as a grind where you just want to get a result as easily as you can, you will never truly be a successful programmer.",
  "translation": "解决问题时，实际上需要多巴胺。 这类似于完成视频游戏中的关卡或解决诸如填字游戏或数独游戏之类的挑战的经验。 我们都知道，有一种良好的感觉来自于坚持不懈的挑战并最终赢得胜利。 但是，如果您丧失了感受这些感觉的能力，或者一开始就从未真正关心过，那么您将无法体验编程带来的快乐。 如果您将编程视为一种磨砺，而您只是想尽可能轻松地获得结果，那么您将永远无法真正成为一名成功的程序员。"
}, {
  "tag": "P",
  "text": "Celebrate Your Wins: Whenever you solve a problem that you struggled with, no matter how small, always take pride in your accomplishment, take a break and congratulate yourself for a job well done. Let the feeling of success sink in and energize you for the next problem you face.",
  "translation": "庆祝您的胜利：每当您解决自己遇到的难题时，无论规模多么小，都应该为自己的成就感到自豪，稍事休息，并为自己所做的出色工作表示祝贺。 让成功感沉浸在其中，并为您面临的下一个问题激发您的精力。"
}, {
  "tag": "H1",
  "text": "5 | Impatient about learning and understanding",
  "translation": "5 | 对学习和理解不耐烦"
}, {
  "tag": "P",
  "text": "If you are impatient about learning and expect to master everything quickly and effortlessly, you will never truly be successful at programming.",
  "translation": "如果您对学习没有耐心并且期望快速而轻松地掌握所有内容，那么您将永远无法真正成功地编程。"
}, {
  "tag": "P",
  "text": "As humans we are limited creatures. Even though our world moves faster and faster, and computers are a big cause of that, we can only move as fast as we are able. Our brains work at a certain speed, and depending on our past, our beliefs, our emotional states, our health…we will all learn and integrate information at different speeds.",
  "translation": "作为人类，我们是有限的生物。 即使我们的世界运转得越来越快，并且计算机是造成这种情况的主要原因，但我们只能尽我们所能地加快步伐。 我们的大脑以一定的速度运转，并取决于我们的过去，信念，情绪状态，健康状况……我们将以不同的速度学习和整合信息。"
}, {
  "tag": "P",
  "text": "The world of technology is like a vast ocean. You will never get to the end of it, you will never get to a point where you are a master with nothing else to learn. If you let yourself get overwhelmed, you will always feel a pressure to “catch up” and feel that you never know enough. If you can’t accept what you know and then learn a little bit more, you will feel like you are getting nowhere, and give up.",
  "translation": "技术世界就像一片广阔的海洋。 您将永远不会走到尽头，也永远不会到达一个您无所不能学习的主人的地步。 如果让自己不知所措，您将总是感到要“追赶”的压力，并感到自己永远不够了解。 如果您不接受所知道的知识，然后学到更多知识，您会觉得自己无所适从，放弃了。"
}, {
  "tag": "P",
  "text": "Instead, you need to enjoy the journey of learning for itself. Every little bit of knowledge you gain, or new skill you gain needs to make you excited. Like solving problems, you need to let yourself feel the pride of recognizing that you have taken a step forward, even if it is a small one.",
  "translation": "相反，您需要享受自我学习的旅程。 您获得的每一点知识或新技能都需要使您兴奋。 像解决问题一样，您需要让自己感到自豪，即使您迈出了很小的一步，也意识到自己已经迈出了一步。"
}, {
  "tag": "P",
  "text": "Acknowledge Your Progress: There is a lot to learn, and the journey of programming never ends. But the knowledge is cumulative, so take pride it what you do know, and trust that every effort you take in your learning will create a strong foundation of knowledge for wherever your career takes you.",
  "translation": "确认您的进步：有很多东西要学习，编程的旅程永远不会结束。 但是知识是累积性的，因此以您所了解的知识为荣，并相信您在学习中所做的一切努力都会为您的职业带给您坚实的知识基础。"
}, {
  "tag": "H1",
  "text": "6 | Getting bored/tired from thinking",
  "translation": "6 | 变得无聊/厌倦了思考"
}, {
  "tag": "P",
  "text": "If you are lazy in your thinking and see concentrated, focused thinking as a chore, you will never truly be successful at programming.",
  "translation": "如果您懒于思考并且将集中注意力集中在琐事上，那么您将永远不会真正地成功编程。"
}, {
  "tag": "P",
  "text": "Programming is a thinking activity. As humans we are really good at thinking, but the reality is that even though we naturally spend all day doing it, we are lazy in our thinking. The ability to maintain concentrated, focused effort on a single problem over a period time is difficult if you aren’t used to it.",
  "translation": "编程是一种思考活动。 作为人类，我们确实善于思考，但是现实是，即使我们自然地整天都在思考，但我们的思维却很懒惰。 如果您不习惯，很难在一段时间内集中精力专注于单个问题。"
}, {
  "tag": "P",
  "text": "Symptoms of this include staring blankly at the screen, feeling a cloud descend on your thoughts, procrastinating on a problem, flipping between browser tabs, and desperately scanning StackOverflow for “an answer”. These are signs that you have hit a mental limitation and need to find a way through.",
  "translation": "其症状包括茫然地盯着屏幕，感觉到云层在您的思想中落下，拖延问题，在浏览器选项卡之间切换以及拼命扫描StackOverflow以寻找“答案”。 这些迹象表明您已经遇到了精神上的限制，需要找到解决方法。"
}, {
  "tag": "P",
  "text": "While programming, you will get tired and thinking literally burns physical energy just like exercising our bodies. When you aren’t used to exerting the mental energy needed to it can feel difficult to stay focused. But it is just like going to the gym, the more that you do it, the stronger you will get.",
  "translation": "在编程时，您会感到疲倦，而思考实际上会消耗身体的能量，就像锻炼我们的身体一样。 当您不习惯发挥所需的精神能量时，很难集中精力。 但这就像去健身房一样，您做的越多，就会越坚强。"
}, {
  "tag": "P",
  "text": "Your Mind is a Muscle: Trust that your brain is like a muscle — as you use it, it gets better and more efficient in it’s thinking. As you put pieces together and develop mental concepts, it becomes much easier to discover solutions.",
  "translation": "您的心灵就像一块肌肉：相信您的大脑就像一块肌肉，使用它的时候，思维会变得更好，更有效。 当您将各个部分放在一起并发展出思维概念时，发现解决方案变得容易得多。"
}, {
  "tag": "H1",
  "text": "7 | Inability to think for yourself",
  "translation": "7 | 无法为自己思考"
}, {
  "tag": "P",
  "text": "If you expect others to think for you, and are unwilling to look at the details of your own situation, you will never be a truly successful programmer.",
  "translation": "如果您希望别人为您考虑，而又不愿考虑自己情况的细节，那么您将永远不是真正的成功程序员。"
}, {
  "tag": "P",
  "text": "When you are learning something new, it is easy to feel like you lack the knowledge and experience to have your own opinions. Taking initiative or doing/saying the wrong thing seems risky.",
  "translation": "当您学习新事物时，很容易感觉到您缺乏掌握自己观点的知识和经验。 主动或做/说错事似乎有风险。"
}, {
  "tag": "P",
  "text": "There is an inherent fear we all have in being wrong. When that fear of being wrong inhibits your exploration and curiosity, you stifle the ability to develop true knowledge, knowledge that is gained from experience and “failure”. When you need to rely on the “guru’s” opinion, a popular blogger, a best practice, or the “textbook” answer, then you have not truly integrated a working knowledge of programming.",
  "translation": "我们所有人都有一种内在的恐惧，那就是错误。 当对错误的恐惧限制了您的探索和好奇心时，您就会窒息发展真正知识的能力，即从经验和“失败”中获得的知识。 当您需要依靠“专家”的意见，流行的博客作者，最佳实践或“教科书”的答案时，您并没有真正整合编程方面的实用知识。"
}, {
  "tag": "P",
  "text": "You need to develop you own opinions about what works and what doesn’t. You need to understand why you think your solution works, and what the benefits are. You need to developed a nuanced perspective that goes beyond what is obvious. You need to be able to “argue” your side, and then if you change, you can own the new perspective you have gained.",
  "translation": "您需要就什么可行和什么无效提出自己的看法。 您需要了解为什么您认为您的解决方案有效，以及有什么好处。 您需要开发一个细微的视角，超越明显的视角。 您需要能够“支持”您的立场，然后如果您进行更改，则可以拥有自己所获得的新观点。"
}, {
  "tag": "P",
  "text": "Think for yourself: Through your experience and critical thinking skills, develop your own perspectives. Make reasonable guesses, take a position, and be willing to change as new information comes to light.",
  "translation": "自己思考：通过您的经验和批判性思维技能，发展自己的观点。 做出合理的猜测，采取立场，并愿意随着新信息的出现而发生变化。"
}, {
  "tag": "H1",
  "text": "8 | Rigid, narrow and/or disorganized thinking",
  "translation": "8 | 僵硬，狭narrow和/或混乱的思维"
}, {
  "tag": "P",
  "text": "If you are rigid in your thinking, and you have difficulty keeping your code organized — and by extension your thoughts organized and focused, you will never be successful at programming.",
  "translation": "如果您思维僵化，并且很难使代码井井有条，并且通过扩展思路使您的思想井井有条，那么您将永远不会成功编程。"
}, {
  "tag": "P",
  "text": "There are two extremes that I sometimes see in students. The first is a rigid and narrow approach to thinking. This attitude refuses help, and despite feedback, doesn’t change. Things are seen from one perspective only, and suggestions are ignored.",
  "translation": "我有时在学生中看到两个极端。 首先是僵化而狭narrow的思维方式。 这种态度拒绝帮助，尽管有反馈，但这种态度不会改变。 仅从一个角度看事情，而忽略建议。"
}, {
  "tag": "P",
  "text": "A second extreme I see is disorganized thinking. Students seem to make things more complicated than necessary, their code is messy and hard to follow. They overthink problems and write 100 lines of code, when 10 would have been sufficient.",
  "translation": "我看到的第二个极端是思维混乱。 学生似乎使事情变得不必要的复杂，他们的代码混乱而且难以遵循。 他们认为问题太多了，只写了十行就写了一百行代码。"
}, {
  "tag": "P",
  "text": "When these two mindsets are combined the result is an uptight approach to programming, like a brute force approach that leads to layers and layers of fixes and “hacks”. What is required is the ability to go back over the solution, reevaluate it, give up on the initial approach, and reorganize.",
  "translation": "当将这两种思维方式结合在一起时，结果便是一种笨拙的编程方法，例如蛮力方法导致层层修复和“骇客”。 所需要的是能够回顾解决方案，重新评估解决方案，放弃最初的方法并进行重组的能力。"
}, {
  "tag": "P",
  "text": "Not being able to see other possibilities or receive feedback inhibits the ability to grow and improve. Being disorganized slows you down and prevents you from seeing patterns that would otherwise be obvious. And the overall quality of your work is diminished.",
  "translation": "无法看到其他可能性或无法收到反馈会抑制其成长和提高的能力。 杂乱无章的速度会使您放慢脚步，并阻止您看到原本显而易见的模式。 并且您的工作的整体质量下降。"
}, {
  "tag": "P",
  "text": "Self Reflection: You need to take a step back, and look at the bigger picture of how you are approaching things. How can you do this better? Is there anything you can do to make your life easier? What are you missing that could help you?",
  "translation": "自我反思：您需要退后一步，并从更大的角度看待您如何对待事物。 您如何更好地做到这一点？ 有什么可以做的使您的生活更轻松？ 您缺少什么可以帮助您的？"
}, {
  "tag": "H1",
  "text": "9 | Needing the “right” answer instead of recognizing a spectrum of “good” and “bad” answers",
  "translation": "9 | 需要“正确”答案，而不是认识到一系列“好”和“坏”答案"
}, {
  "tag": "P",
  "text": "If you see the end goal of programming as finding the right solution, rather than a spectrum of solutions, you will never truly be successful as a programmer.",
  "translation": "如果您将编程的最终目标看作是找到合适的解决方案，而不是找到各种解决方案，那么您将永远无法真正成为一名程序员。"
}, {
  "tag": "P",
  "text": "When starting to learn the skills or programming, students often want to know whether what they have done is “right”. The answer is always “it depends.”",
  "translation": "在开始学习技能或编程时，学生经常想知道他们所做的是否“正确”。 答案始终是“取决于情况”。"
}, {
  "tag": "P",
  "text": "Computer Science is a science of evaluating tradeoffs. Given different sets of circumstances, which would be the better path? It all depends on the circumstances and goals. When you see programming as a test with either a right answer or wrong answer, you are losing sight of the bigger picture, and giving up your creativity. Any answer can be “right” if you can justify it given the circumstances.",
  "translation": "计算机科学是评估权衡的科学。 在不同情况下，哪条路更好？ 这完全取决于环境和目标。 当您将编程视为正确答案或错误答案的测试时，您将失去整体视野，而放弃自己的创造力。 如果您可以根据情况证明其正确性，那么任何答案都可能是“正确”的。"
}, {
  "tag": "P",
  "text": "The reality is that programming is more like writing poems or short stories (or potentially novels if the programs are large). There is an aesthetic and beauty that can be seen in your code, and sometimes it is only recognizable by you and other programmers. The reasons you decided on your solution, and the way you conceived of your answer is more important than the “right way” or the “wrong way”. Having the mind of an artist allows you to play with options and possibilities, rather than thinking there is only one way. That is the beauty of programming, there are many ways to solve a problem, and the consideration of different possibilities leads to a feeling about which way is best for the situation.",
  "translation": "现实情况是，编程更像是写诗或短篇小说（如果程序很大，则可能是小说）。 在您的代码中可以看到一种美感和美感，有时只有您和其他程序员才能识别出它。 您决定解决方案的原因以及答案的构想比“正确的方法”或“错误的方法”更为重要。 拥有艺术家的思想使您可以选择和尝试，而不是仅仅想办法。 那就是编程的美，有很多方法可以解决问题，而对各种可能性的考虑会导致人们感觉哪种方法最适合这种情况。"
}, {
  "tag": "P",
  "text": "Get Creative: Recognize that there are numerous ways to solve a problem, and through experience and exposure, you will develop a nuanced understanding overtime about which solutions feel better than others. Looking at the big picture, imagining different possibilities and trusting your gut will lead to better solutions that are more satisfying.",
  "translation": "发挥创意：认识到有很多方法可以解决问题，并且通过经验和暴露，您将逐渐加深对哪些解决方案比其他解决方案感觉更好的理解。 放眼大局，想象不同的可能性并相信自己的直觉会带来更令人满意的更好解决方案。"
}, {
  "tag": "H1",
  "text": "10 | Not paying careful attention to details",
  "translation": "10 | 不注意细节"
}, {
  "tag": "P",
  "text": "If you gloss over details, and overlook little things, you will never be a truly successful programmer.",
  "translation": "如果您掩饰细节，却忽略了一些小事情，那么您将永远不是真正的成功程序员。"
}, {
  "tag": "P",
  "text": "Computers are precise machines. When it comes to programming a computer, you need to provide the necessary commands precisely in the way a computer expects. If you don’t, nothing will work. There isn’t a middle ground where things mostly work — it either does or it doesn’t.",
  "translation": "计算机是精密的机器。 在对计算机进行编程时，您需要按照计算机期望的方式准确地提供必要的命令。 如果您不这样做，将无济于事。 在大多数情况下，没有中间的事情可以起作用，要么起作用，要么不起作用。"
}, {
  "tag": "P",
  "text": "That means that when you are programming you have to have an eye for details. Every space, bracket, or semi-colon counts. When out of place, nothing will work. When the computer spits back an error message, you have to be able to look at that message and understand exactly what it is telling you. And the reality is that if you miss details like that, you could spend hours tracking down a problem that was literally the result of a typo.",
  "translation": "这意味着在编程时，您必须注意细节。 每个空格，方括号或分号都重要。 不合适时，将无任何作用。 当计算机发回错误消息时，您必须能够查看该消息并准确了解它在告诉您什么。 现实情况是，如果您错过了这样的细节，您可能会花费数小时来查找实际上是拼写错误导致的问题。"
}, {
  "tag": "P",
  "text": "As they say, the devil is in the details. And that is definitely true for programming.",
  "translation": "正如他们所说，细节决定成败。 对于编程绝对是正确的。"
}, {
  "tag": "P",
  "text": "Pay Attention to the Details: The details matter and you have to accept that. Once you do, you can begin to always be scanning your code for anything that is out of place. You can organize your code and use tools that help you identify issues quickly.",
  "translation": "注意细节：细节很重要，您必须接受。 完成后，您可以开始始终在代码中扫描任何不适当的内容。 您可以组织代码并使用可帮助您快速发现问题的工具。"
}, {
  "tag": "H1",
  "text": "Bonus: Being Business-Minded",
  "translation": "奖励：具有商业头脑"
}, {
  "tag": "P",
  "text": "This is a side observation that I have noticed — students who are particularly business-minded, are often focused on the outcome rather than process. They want to get a “working app” that will move them forward on their business idea, they want to “get to market first”, and they see the learning curve as a barrier to their goal of getting their business going.",
  "translation": "我注意到这是一个旁观者，尤其是具有商业头脑的学生，通常专注于结果而不是过程。 他们希望获得一个“可运行的应用程序”，以使他们的经营理念向前发展，他们希望“首先进入市场”，并且他们将学习曲线视为实现其业务发展目标的障碍。"
}, {
  "tag": "P",
  "text": "In reflecting on students that were difficult to truly help grow as programmers, I found an impatience with the process inhibiting the learning needed to truly understand technology. They tend to see technology as a means to an end, rather than a legitimate domain of knowledge to be explored and enjoyed.",
  "translation": "在反思那些难以真正帮助他们成长为程序员的学生时，我发现这种过程不耐烦，阻碍了真正理解技术所需的学习。 他们倾向于将技术视为达到目的的手段，而不是要探索和享受的合法知识领域。"
}, {
  "tag": "P",
  "text": "As a natural extension of this, I have found certain students that were more business inclined, and struggled with their learning, often quickly had freelance clients signed up for work that they didn’t actually have the skills do themselves! They would scramble to find resources/templates to get a project working for a client, or, outsource the work to someone else. They truly sucked at programming, but were amazing at getting people to pay them to program!",
  "translation": "作为一种自然的延伸，我发现某些学生更倾向于业务，并且学习困难，常常很快让自由职业者签约他们实际上没有技能自己做的工作！ 他们会争先恐后地寻找资源/模板来使项目为客户服务，或者将工作外包给其他人。 他们确实很喜欢编程，但是在让人们付钱给他们上编程感到非常惊奇！"
}, {
  "tag": "P",
  "text": "So what I would add, is that students who desire to start businesses, are excellent at sales, networking, and business development may struggle more than others to learn the skill of programming. Their natural desire to create financial opportunities and connect people to solutions makes them impatient with the tedious details involved in programming.",
  "translation": "因此，我要补充的是，那些渴望创业的学生，擅长销售，网络和业务发展，他们可能比其他人更难以学习编程技能。 他们天生渴望创造财务机会并将人们与解决方案联系起来，这使他们对编程中涉及的繁琐细节不耐烦。"
}, {
  "tag": "H1",
  "text": "10 Signs You Will Suck at Programming",
  "translation": "您将在编程中吸吮的10个迹象"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/0*cF-7zKh4jqldcDf2?q=20",
  "caption": "More Stickers Doesn’t Make You More Better. — Photo by Tim Gouw on Unsplash",
  "type": "image",
  "file": "0*cF-7zKh4jqldcDf2"
}, {
  "tag": "P",
  "text": "I often see questions on Reddit or Quora along the lines of “How do I know if I’ll succeed as a programmer?” (In fact this post expands on an answer I gave on Quora a while back.) When someone is considering a career change, or is interested in software development and curious about what it takes, inevitably the question of programming comes up.",
  "translation": "我经常在Reddit或Quora上看到类似“我如何知道自己是否会成为一名程序员的成功？”这样的问题（实际上，这篇文章是基于我对Quora的回答而扩展的。） 职业变化，或者对软件开发感兴趣并且对需要的软件感到好奇，不可避免地会出现编程问题。"
}, {
  "tag": "P",
  "text": "In fact, I think this is a major barrier to entry in people’s minds when they don’t have any formal training in computing. It’s natural to think that if you aren’t good at programming, then your desire is a non-starter. It’s kind of like if you want to be an actor and wonder if you’ll be good at acting.",
  "translation": "实际上，我认为这是人们在没有经过任何计算机正式培训的情况下进入其头脑的主要障碍。 很自然地认为，如果您不擅长编程，那么您的愿望就不会成为初学者。 有点像您是否想当演员，想知道自己是否会擅长演戏。"
}, {
  "tag": "P",
  "text": "As an Educator that teaches Full-Stack Web Development, I have taught many “first time programmers”. And the good news is that I have rarely found a student that couldn’t learn to program. I see it as a basic human skill, just like reading, writing, and arithmetic. Anyone can do it, it is part of our human capacities, but does need to be learned.",
  "translation": "作为教授全栈Web开发的教育者，我曾教过许多“初学者”。 好消息是，我很少找到无法学习编程的学生。 我将其视为基本的人类技能，就像阅读，写作和算术一样。 任何人都可以做到，这是我们人类能力的一部分，但确实需要学习。"
}, {
  "tag": "P",
  "text": "Over the past two years of teaching, I have witnessed various students struggle in the process, and some common themes that come up in their struggles. If you look at this list and see them in yourself, rest assured, you will truly suck at programming and should probably find something else to do with your time. But, if you are still committed to your goal of becoming a developer, you can easily face these issues and change.",
  "translation": "在过去的两年教学中，我目睹了各种学生在此过程中的挣扎，以及他们挣扎中出现的一些共同主题。 如果您查看此列表并亲自查看它们，请放心，您将真正精通编程，并且可能会发现与您的时间有关的其他事情。 但是，如果您仍然致力于成为开发人员的目标，则可以轻松面对这些问题并进行改变。"
}, {
  "tag": "P",
  "text": "Programming is a basic human skill, just like reading, writing and arithmetic. Anyone can learn to program with time and effort.",
  "translation": "编程是一项基本的人类技能，就像阅读，写作和算术一样。 任何人都可以花费时间和精力来学习编程。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Jonathan Bluks的文章《10 Signs You Will Suck at Programming》，参考：https://blog.usejournal.com/10-signs-you-will-suck-at-programming-5497a6a52c5c)",
  "translation": "（本文翻译自乔纳森·布鲁克斯（Jonathan Bluks）的文章《编程时必不可少的10个标志》，参考：https：//blog.usejournal.com/10-signs-you-will-suck-at-programming-5497a6a52c5c）"
}]