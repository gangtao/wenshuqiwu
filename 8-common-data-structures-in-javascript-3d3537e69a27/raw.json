[{
  "tag": "H1",
  "text": "8 Common Data Structures in Javascript",
  "translation": "Javascript中的8种常见数据结构"
}, {
  "tag": "H2",
  "text": "Get a better picture of how data structures work",
  "translation": "更好地了解数据结构如何工作"
}, {
  "tag": "P",
  "text": "Does this sound familiar: “I started frontend development by completing part-time courses”",
  "translation": "这听起来是否熟悉：“我通过完成兼职课程开始了前端开发”"
}, {
  "tag": "P",
  "text": "You might be looking to improve your fundamental knowledge of computer science, especially on data structure and algorithms. Today we’ll go through some common data structures and implement them in JavaScript.",
  "translation": "您可能正在寻求提高计算机科学的基础知识，尤其是在数据结构和算法方面。 今天，我们将介绍一些常见的数据结构，并以JavaScript实施它们。"
}, {
  "tag": "P",
  "text": "Hopefully this piece will complement your skills!",
  "translation": "希望这部分内容可以补充您的技能！"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*Slu14tK1Ge-trxTiBDkbng.png?q=20",
  "type": "image",
  "file": "1*Slu14tK1Ge-trxTiBDkbng.png"
}, {
  "tag": "H2",
  "text": "1. Stack",
  "translation": "1.堆叠"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*qIrnEjtsini8lrwIO0ntPA.png?q=20",
  "type": "image",
  "file": "1*qIrnEjtsini8lrwIO0ntPA.png"
}, {
  "tag": "P",
  "text": "Stack follows the principle of LIFO (Last In First Out). If you stack books, the top book will be taken before the bottom one. Or when you browse on internet, the back button leads you to the most recently browsed page.",
  "translation": "堆栈遵循LIFO（后进先出）的原理。 如果您堆叠书籍，则最上层的书籍将排在最底层的书籍之前。 或者，当您在Internet上浏览时，后退按钮会将您带到最近浏览的页面。"
}, {
  "tag": "P",
  "text": "Stack has these common methods:",
  "translation": "Stack具有以下常见方法："
}, {
  "tag": "UL",
  "texts": ["push: input a new element", "pop : remove the top element, return the removed element", "peek : return the top element", "length : return the number of element(s) in Stack"],
  "translations": ["推送：输入一个新元素", "pop：删除顶部元素，返回删除的元素", "窥视：返回顶部元素", "length：返回堆栈中的元素数）"]
}, {
  "tag": "P",
  "text": "Array in Javascript has the attributes of Stack, but we construct a Stack from scratch by using function Stack()",
  "translation": "Javascript中的数组具有Stack的属性，但是我们使用Stack（）函数从头开始构建Stack"
}, {
  "tag": "PRE",
  "text": "function Stack() {this.count = 0;  this.storage = {};  this.push = function (value) {    this.storage[this.count] = value;    this.count++;  }  this.pop = function () {    if (this.count === 0) {      return undefined;    }    this.count--;    var result = this.storage[this.count];    delete this.storage[this.count];    return result;  }  this.peek = function () {    return this.storage[this.count - 1];  }  this.size = function () {    return this.count;  }}",
  "translation": "函数Stack（）{this.count = 0; this.storage = {}; this.push =函数（值）{this.storage [this.count] =值； this.count ++; } this.pop = function（）{if（this.count === 0）{返回未定义； } this.count--; var结果= this.storage [this.count]; 删除this.storage [this.count]; 返回结果； } this.peek = function（）{return this.storage [this.count-1]; } this.size = function（）{return this.count; }}"
}, {
  "tag": "H2",
  "text": "2. Queue",
  "translation": "2.排队"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*6eCq8aT9EKBWJLzAQPPL0Q.png?q=20",
  "type": "image",
  "file": "1*6eCq8aT9EKBWJLzAQPPL0Q.png"
}, {
  "tag": "P",
  "text": "Queue is similar to Stack. The only difference is that Queue uses the FIFO principle (First In First Out). In other words, when you queue for bus, the first in the queue will always board first.",
  "translation": "队列类似于堆栈。 唯一的区别是Queue使用FIFO原理（先进先出）。 换句话说，当您排队等候总线时，队列中的第一个将始终排在第一位。"
}, {
  "tag": "P",
  "text": "Queue has following methods:",
  "translation": "队列具有以下方法："
}, {
  "tag": "UL",
  "texts": ["enqueue: enter queue, add an element at the end", "dequeue: leave queue, remove the front element and return it", "front: get the first element", "isEmpty: determine whether the queue is empty", "size: get the number of element(s) in queue"],
  "translations": ["入队：输入队列，在最后添加一个元素", "出队：离开队列，移除前元素并返回", "前：获取第一个元素", "isEmpty：确定队列是否为空", "size：获取队列中的元素数）"]
}, {
  "tag": "P",
  "text": "Array in JavaScript has some attributes of Queue, so we can use array to construct an example for Queue:",
  "translation": "JavaScript中的数组具有Queue的某些属性，因此我们可以使用数组来构造Queue的示例："
}, {
  "tag": "PRE",
  "text": "function Queue() {  var collection = [];  this.print = function () {    console.log(collection);  }  this.enqueue = function (element) {    collection.push(element);  }  this.dequeue = function () {    return collection.shift();  }  this.front = function () {    return collection[0];  }  this.isEmpty = function () {    return collection.length === 0;  }  this.size = function () {    return collection.length;  }}",
  "translation": "函数Queue（）{var collection = []; this.print = function（）{console.log（collection）; } this.enqueue = function（element）{collection.push（element）; } this.dequeue = function（）{return collection.shift（）; } this.front = function（）{return collection [0]; } this.isEmpty = function（）{return collection.length === 0; } this.size = function（）{return collection.length; }}"
}, {
  "tag": "H2",
  "text": "Priority Queue",
  "translation": "优先队列"
}, {
  "tag": "P",
  "text": "Queue has another advanced version. Allocate each element with priority and it will be sorted according to the priority level:",
  "translation": "队列还有另一个高级版本。 为每个元素分配优先级，并将根据优先级对它们进行排序："
}, {
  "tag": "PRE",
  "text": "function PriorityQueue() {  ...  this.enqueue = function (element) {    if (this.isEmpty()) {      collection.push(element);    } else {      var added = false;      for (var i = 0; i < collection.length; i++) {        if (element[1] < collection[i][1]) {          collection.splice(i, 0, element);          added = true;          break;        }      }      if (!added) {        collection.push(element);      }    }  }}",
  "translation": "function PriorityQueue（）{... this.enqueue = function（element）{if（this.isEmpty（））{collection.push（element）; } else {var add = false; for（var i = 0; i <collection.length; i ++）{if（element [1] <collection [i] [1]）{collection.splice（i，0，element）; 增加=真; 打破; }}如果（！添加）{collection.push（element）; }}}}"
}, {
  "tag": "P",
  "text": "Testing it out:",
  "translation": "测试一下："
}, {
  "tag": "PRE",
  "text": "var pQ = new PriorityQueue();pQ.enqueue([ gannicus , 3]);pQ.enqueue([ spartacus , 1]);pQ.enqueue([ crixus , 2]);pQ.enqueue([ oenomaus , 4]);pQ.print();",
  "translation": "var pQ = new PriorityQueue（）; pQ.enqueue（[gannicus，3]）; pQ.enqueue（[spartacus，1]）; pQ.enqueue（[crixus，2]）; pQ.enqueue（[oenomaus，4] ）; pQ.print（）;"
}, {
  "tag": "P",
  "text": "Result:",
  "translation": "结果："
}, {
  "tag": "PRE",
  "text": "[  [  spartacus , 1 ],  [  crixus , 2 ],  [  gannicus , 3 ],  [  oenomaus , 4 ]]",
  "translation": "[[sspartacus，1]，[crixus，2]，[gannicus，3]，[oenomaus，4]]"
}, {
  "tag": "H2",
  "text": "3. Linked List",
  "translation": "3.链表"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*bPKHDqhRAzUoILC1IQN2Sw.png?q=20",
  "type": "image",
  "file": "1*bPKHDqhRAzUoILC1IQN2Sw.png"
}, {
  "tag": "P",
  "text": "Literally, a linked list is a chained data structure, with each node consisting of two pieces of information: the data of the node and the pointer to the next node. Linked list and conventional array are both linear data structures with serialised storage. Of course, they also have differences:",
  "translation": "从字面上看，链表是一个链式数据结构，每个节点由两部分信息组成：该节点的数据和指向下一个节点的指针。 链表和常规数组都是带有序列化存储的线性数据结构。 当然，它们也有差异："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*Cr_Y17z9PX3Qv-8M80tUAw.png?q=20",
  "type": "image",
  "file": "1*Cr_Y17z9PX3Qv-8M80tUAw.png"
}, {
  "tag": "P",
  "text": "A unilateral linked list normally has following methods:",
  "translation": "单边链表通常具有以下方法："
}, {
  "tag": "UL",
  "texts": ["size: Return the number of node(s)", "head: Return the element of the head", "add: Add another node in the tail", "remove: Remove certain node", "indexOf: Return the index of a node", "elementAt: Return the node of an index", "addAt: Insert a node at a specific index", "removeAt: Delete a node at a specific index"],
  "translations": ["size：返回节点数", "head：返回head的元素", "添加：在尾部添加另一个节点", "删除：删除某些节点", "indexOf：返回节点的索引", "elementAt：返回索引的节点", "addAt：在特定索引处插入节点", "removeAt：删除特定索引处的节点"]
}, {
  "tag": "PRE",
  "text": "/** Node in the linked list **/function Node(element) {      // Data in the node    this.element = element;      // Pointer to the next node     this.next = null;}    function LinkedList() {          var length = 0;          var head = null;          this.size = function () {                return length;          }          this.head = function () {                return head;          }          this.add = function (element) {                var node = new Node(element);                if (head == null) {                      head = node;                } else {                      var currentNode = head;                      while (currentNode.next) {                            currentNode = currentNode.next;                      }                      currentNode.next = node;                }                length++;          }          this.remove = function (element) {                var currentNode = head;                var previousNode;                if (currentNode.element === element) {                      head = currentNode.next;                } else {                      while (currentNode.element !== element) {                            previousNode = currentNode;                            currentNode = currentNode.next;                      }                      previousNode.next = currentNode.next;                }                length--;          }          this.isEmpty = function () {                return length === 0;          }          this.indexOf = function (element) {                var currentNode = head;                var index = -1;                while (currentNode) {                      index++;                      if (currentNode.element === element) {                            return index;                      }                      currentNode = currentNode.next;                }                return -1;          }          this.elementAt = function (index) {                var currentNode = head;                var count = 0;                while (count < index) {                      count++;                      currentNode = currentNode.next;                }                return currentNode.element;          }          this.addAt = function (index, element) {                var node = new Node(element);                var currentNode = head;                var previousNode;                var currentIndex = 0;                if (index > length) {                      return false;                }                if (index === 0) {                      node.next = currentNode;                      head = node;                } else {                      while (currentIndex < index) {                            currentIndex++;                            previousNode = currentNode;                            currentNode = currentNode.next;                      }                      node.next = currentNode;                      previousNode.next = node;                }                length++;          }          this.removeAt = function (index) {                var currentNode = head;                var previousNode;                var currentIndex = 0;                if (index < 0 || index >= length) {                      return null;                }                if (index === 0) {                      head = currentIndex.next;                } else {                      while (currentIndex < index) {                            currentIndex++;                            previousNode = currentNode;                            currentNode = currentNode.next;                      }                      previousNode.next = currentNode.next;                }                length--;                return currentNode.element;          }    }"
}, {
  "tag": "H2",
  "text": "4. Set",
  "translation": "4.设置"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*iRlwSeYGSInNqsi8GUouZw.png?q=20",
  "type": "image",
  "file": "1*iRlwSeYGSInNqsi8GUouZw.png"
}, {
  "tag": "P",
  "text": "A set is a basic concept in mathematics: a collection of well defined and distinct objects. ES6 introduced the concept of set, which has certain level of similarity with array. However, a set does not allow repeating elements and is not indexed.",
  "translation": "集合是数学的基本概念：定义明确且不同的对象的集合。 ES6引入了集合的概念，它与数组有一定程度的相似性。 但是，集合不允许重复元素，也不会被索引。"
}, {
  "tag": "P",
  "text": "A typical set has methods as follows:",
  "translation": "一个典型的集合具有以下方法："
}, {
  "tag": "UL",
  "texts": ["values: Return all elements in a set", "size: Return the number of elements", "has: Determine whether an element exists", "add: Insert elements into set", "remove: Delete elements from set", "union: Return the intersection of two sets", "difference: Return the difference of two sets", "subset: Determine whether a certain set is a subset of another set"],
  "translations": ["值：返回集合中的所有元素", "size：返回元素数", "具有：确定元素是否存在", "添加：将元素插入集合", "删除：从集合中删除元素", "并集：返回两组的交集", "差异：返回两组的差异", "子集：确定某个集合是否是另一个集合的子集"]
}, {
  "tag": "P",
  "text": "To differentiate set in ES6, we declare as MySet in following example:",
  "translation": "为了区分ES6中的集合，在以下示例中我们声明为MySet："
}, {
  "tag": "PRE",
  "text": "function MySet() {      var collection = [];      this.has = function (element) {            return (collection.indexOf(element) !== -1);      }      this.values = function () {            return collection;      }      this.size = function () {            return collection.length;      }      this.add = function (element) {            if (!this.has(element)) {                  collection.push(element);                  return true;            }            return false;      }      this.remove = function (element) {            if (this.has(element)) {                  index = collection.indexOf(element);                  collection.splice(index, 1);                  return true;            }            return false;      }      this.union = function (otherSet) {            var unionSet = new MySet();            var firstSet = this.values();            var secondSet = otherSet.values();            firstSet.forEach(function (e) {                  unionSet.add(e);            });            secondSet.forEach(function (e) {                  unionSet.add(e);            });            return unionSet;  }          this.intersection = function (otherSet) {                var intersectionSet = new MySet();                var firstSet = this.values();                firstSet.forEach(function (e) {                      if (otherSet.has(e)) {                            intersectionSet.add(e);                      }                });                return intersectionSet;          }          this.difference = function (otherSet) {                var differenceSet = new MySet();                var firstSet = this.values();                firstSet.forEach(function (e) {                      if (!otherSet.has(e)) {                            differenceSet.add(e);                      }                });                return differenceSet;          }          this.subset = function (otherSet) {                var firstSet = this.values();                return firstSet.every(function (value) {                      return otherSet.has(value);                });          }    }",
  "translation": "函数MySet（）{var collection = []; this.has = function（element）{return（collection.indexOf（element）！== -1）; } this.values = function（）{return collection; } this.size = function（）{return collection.length; } this.add = function（element）{if（！this.has（element））{collection.push（element）;返回true；返回false； } this.remove = function（element）{if（this.has（element））{index = collection.indexOf（element）; collection.splice（index，1）;返回true；返回false； } this.union = function（otherSet）{var unionSet = new MySet（）; var firstSet = this.values（）; var secondSet = otherSet.values（）; firstSet.forEach（function（e）{unionSet.add（e）;}）; secondSet.forEach（function（e）{unionSet.add（e）;}）;返回unionSet; } this.intersection = function（otherSet）{var交集= new MySet（）; var firstSet = this.values（）; firstSet.forEach（function（e）{if（otherSet.has（e））{sectionSet.add（e）;}}）;返回交集} this.difference = function（otherSet）{var differentSet = new MySet（）; var firstSet = this.values（）; firstSet.forEach（function（e）{if（！otherSet.has（e））{DifferenceSet.add（e）;}}）;返回differenceSet; } this.subset = function（otherSet）{var firstSet = this.values（）; return firstSet.every（function（value）{return otherSet.has（value）;}）; }}"
}, {
  "tag": "H2",
  "text": "5. Hast table",
  "translation": "5.哈希表"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*rCTODsa0YDGG-JyJZGIlRg.png?q=20",
  "type": "image",
  "file": "1*rCTODsa0YDGG-JyJZGIlRg.png"
}, {
  "tag": "P",
  "text": "A hash table is a key-value data structure. Due to the lightning speed of querying a value through key, it is commonly used in Map, Dictionary or Object data structures. As shown in the graph above, the hash table uses a hash function to convert keys into a list of numbers, and these numbers serve as the values of corresponding keys. To get value using key is dashingly fast, time complexity can achieve O(1). The same keys must return the same values — this is the basis of the hash function.",
  "translation": "哈希表是键值数据结构。 由于通过键查询值的闪电般的速度，它通常用于Map，Dictionary或Object数据结构中。 如上图所示，哈希表使用哈希函数将键转换为数字列表，这些数字用作相应键的值。 要快速使用键获取价值，时间复杂度可以达到O（1）。 相同的键必须返回相同的值-这是哈希函数的基础。"
}, {
  "tag": "P",
  "text": "The hash table has the following methods:",
  "translation": "哈希表具有以下方法："
}, {
  "tag": "UL",
  "texts": ["add: Add a key-value pair", "remove: Delete a key-value pair", "lookup: Find a corresponding value using a key"],
  "translations": ["添加：添加键值对", "删除：删除键值对", "查找：使用键查找对应的值"]
}, {
  "tag": "P",
  "text": "An example of a simplified Hash Table in Javascript:",
  "translation": "Java简化哈希表的示例："
}, {
  "tag": "PRE",
  "text": "function hash(string, max) {  var hash = 0;  for (var i = 0; i < string.length; i++) {    hash += string.charCodeAt(i);  }  return hash % max;}function HashTable() {  let storage = [];  const storageLimit = 4;  this.add = function (key, value) {    var index = hash(key, storageLimit);    if (storage[index] === undefined) {      storage[index] = [        [key, value]      ];    } else {      var inserted = false;      for (var i = 0; i < storage[index].length; i++) {        if (storage[index][i][0] === key) {          storage[index][i][1] = value;          inserted = true;        }      }      if (inserted === false) {        storage[index].push([key, value]);      }    }  }  this.remove = function (key) {    var index = hash(key, storageLimit);    if (storage[index].length === 1 && storage[index][0][0] === key) {      delete storage[index];    } else {      for (var i = 0; i < storage[index]; i++) {        if (storage[index][i][0] === key) {          delete storage[index][i];        }      }    }  }  this.lookup = function (key) {    var index = hash(key, storageLimit);    if (storage[index] === undefined) {      return undefined;    } else {      for (var i = 0; i < storage[index].length; i++) {        if (storage[index][i][0] === key) {          return storage[index][i][1];        }      }    }  }}",
  "translation": "函数hash（string，max）{var hash = 0;对于（var i = 0; i <string.length; i ++）{hash + = string.charCodeAt（i）; } return hash％max;} ​​function HashTable（）{let storage = []; const storageLimit = 4; this.add = function（key，value）{var index = hash（key，storageLimit）;如果（storage [index] === undefined）{storage [index] = [[key，value]]; } else {var insert = false; for（var i = 0; i <storage [index] .length; i ++）{if（（storage [index] [i] [0] ===键）{storage [index] [i] [1] =值；插入= true; }} if（inserted === false）{storage [index] .push（[key，value]）; }}} this.remove = function（key）{var index = hash（key，storageLimit）; if（storage [index] .length === 1 && storage [index] [0] [0] ===键）{删除storage [index]; } else {for（var i = 0; i <storage [index]; i ++）{如果（storage [index] [i] [0] ===键）{删除storage [index] [i]； }}}} this.lookup = function（key）{var index = hash（key，storageLimit）; if（storage [index] === undefined）{返回未定义； } else {for（var i = 0; i <storage [index] .length; i ++）{if（（storage [index] [i] [0] ===键）{返回storage [index] [i] [1 ]; }}}}}"
}, {
  "tag": "H2",
  "text": "6. Tree",
  "translation": "6.树"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*S2hTiKJrxOlt6nbwUb95ng.png?q=20",
  "type": "image",
  "file": "1*S2hTiKJrxOlt6nbwUb95ng.png"
}, {
  "tag": "P",
  "text": "Tree data structure is a multi-layer structure. It is also a non-linear data structure, compared to Array, Stack, and Queue. This structure is highly efficient during insert and search operations. Let’s take a look at some concepts of tree data structure:",
  "translation": "树数据结构是多层结构。 与Array，Stack和Queue相比，它也是一种非线性数据结构。 在插入和搜索操作期间，此结构非常高效。 让我们看一下树数据结构的一些概念："
}, {
  "tag": "UL",
  "texts": ["root: Root node of a tree, no parent node for root", "parent node: Direct node of the upper layer, only has one", "child node: Direct node(s) of the lower layer, can have multiple", "siblings: Share the same parent node", "leaf: Node with no child", "Edge: Branch or link between nodes", "Path: The edges from a starting node to the target node", "Height of Node: Number of edges of the longest path of a specific node to leaf node", "Height of Tree: Number of edges of the longest path of the root node to the leaf node", "Depth of Node: Number of edges from root node to specific node", "Degree of Node: Number of child nodes"],
  "translations": ["root：树的根节点，无父节点", "父节点：上层的直接节点，只有一个", "子节点：较低层的直接节点，可以有多个", "兄弟姐妹：共享同一父节点", "叶：没有子节点", "边缘：节点之间的分支或链接", "路径：从起始节点到目标节点的边缘", "节点高度：特定节点到叶节点的最长路径的边数", "树的高度：根节点到叶节点的最长路径的边数", "节点深度：从根节点到特定节点的边数", "节点度：子节点数"]
}, {
  "tag": "P",
  "text": "Here’s an example of a binary search tree here. Each node has a maximum of two nodes with the left node being smaller than the current node and the right node being bigger than the current node:",
  "translation": "这是二叉搜索树的示例。 每个节点最多有两个节点，左节点小于当前节点，右节点大于当前节点："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*F_LCQ8dc15hbsrTWdACmXg.png?q=20",
  "type": "image",
  "file": "1*F_LCQ8dc15hbsrTWdACmXg.png"
}, {
  "tag": "P",
  "text": "Common methods in Binary Search Tree:",
  "translation": "二进制搜索树中的常用方法："
}, {
  "tag": "UL",
  "texts": ["add: Insert a node into the tree", "findMin: Get the minimum node", "findMax: Get the maximum node", "find: Search a specific node", "isPresent: Determine the existence of a certain node", "remove: Delete a node from the tree"],
  "translations": ["添加：在树中插入一个节点", "findMin：获取最小节点", "findMax：获取最大节点", "查找：搜索特定节点", "isPresent：确定某个节点的存在", "删除：从树中删除节点"]
}, {
  "tag": "P",
  "text": "Example in JavaScript:",
  "translation": "JavaScript中的示例："
}, {
  "tag": "PRE",
  "text": "class Node {  constructor(data, left = null, right = null) {    this.data = data;    this.left = left;    this.right = right;  }}class BST {  constructor() {    this.root = null;  }  add(data) {    const node = this.root;    if (node === null) {      this.root = new Node(data);      return;    } else {      const searchTree = function (node) {        if (data < node.data) {          if (node.left === null) {            node.left = new Node(data);            return;          } else if (node.left !== null) {            return searchTree(node.left);          }        } else if (data > node.data) {          if (node.right === null) {            node.right = new Node(data);            return;          } else if (node.right !== null) {            return searchTree(node.right);          }        } else {          return null;        }      };      return searchTree(node);    }  }  findMin() {    let current = this.root;    while (current.left !== null) {      current = current.left;    }    return current.data;  }  findMax() {    let current = this.root;    while (current.right !== null) {      current = current.right;    }    return current.data;  }  find(data) {    let current = this.root;    while (current.data !== data) {      if (data < current.data) {        current = current.left      } else {        current = current.right;      }      if (current === null) {        return null;      }    }    return current;  }  isPresent(data) {    let current = this.root;    while (current) {      if (data === current.data) {        return true;      }      if (data < current.data) {        current = current.left;      } else {        current = current.right;      }    }    return false;  }  remove(data) {    const removeNode = function (node, data) {      if (node == null) {        return null;      }      if (data == node.data) {        // no child node        if (node.left == null && node.right == null) {          return null;        }        // no left node        if (node.left == null) {          return node.right;        }        // no right node        if (node.right == null) {          return node.left;        }        // has 2 child nodes        var tempNode = node.right;        while (tempNode.left !== null) {          tempNode = tempNode.left;        }        node.data = tempNode.data;        node.right = removeNode(node.right, tempNode.data);        return node;      } else if (data < node.data) {        node.left = removeNode(node.left, data);        return node;      } else {        node.right = removeNode(node.right, data);        return node;      }    }    this.root = removeNode(this.root, data);  }}",
  "translation": "类Node {构造函数（数据，左=空，右=空）{this.data =数据； this.left = left; this.right =正确； }}类BST {builder（）{this.root = null; } add（data）{const node = this.root; if（node === null）{this.root = new Node（data）;返回; } else {const searchTree = function（node）{if（data <node.data）{if（node.left === null）{node.left = new Node（data）;返回; }否则，如果（node.left！== null）{返回searchTree（node.left）; }} else if（数据> node.data）{if（node.right === null）{node.right =新的Node（data）;返回; }否则，如果（node.right！== null）{返回searchTree（node.right）; }} else {返回null; };返回searchTree（node）; }} findMin（）{让current = this.root; while（current.left！== null）{当前= current.left; }返回current.data; } findMax（）{让current = this.root; while（current.right！== null）{current = current.right; }返回current.data; } find（data）{let current = this.root; while（current.data！== data）{if（data <current.data）{current = current.left} else {current = current.right; } if（current === null）{返回null;返回电流； } isPresent（data）{let current = this.root; while（current）{if（data === current.data）{返回true; } if（data <current.data）{current = current.left; } else {current = current.right;返回false； } remove（data）{const removeNode = function（node，data）{if（node == null）{返回null; } if（data == node.data）{//没有子节点if（node.left == null && node.right == null）{返回null; } //没有左节点if（node.left == null）{return node.right; } //没有右节点if（node.right == null）{return node.left; } //有2个子节点var tempNode = node.right; while（tempNode.left！== null）{tempNode = tempNode.left; } node.data = tempNode.data; node.right = removeNode（node.right，tempNode.data）;返回节点； } else if（数据<node.data）{node.left = removeNode（node.left，data）;返回节点； } else {node.right = removeNode（node.right，data）;返回节点； }} this.root = removeNode（this.root，data）; }}"
}, {
  "tag": "P",
  "text": "Testing it out:",
  "translation": "测试一下："
}, {
  "tag": "PRE",
  "text": "const bst = new BST();bst.add(4);bst.add(2);bst.add(6);bst.add(1);bst.add(3);bst.add(5);bst.add(7);bst.remove(4);console.log(bst.findMin());console.log(bst.findMax());bst.remove(7);console.log(bst.findMax());console.log(bst.isPresent(4));",
  "translation": "const bst = new BST（）; bst.add（4）; bst.add（2）; bst.add（6）; bst.add（1）; bst.add（3）; bst.add（5）; bst.add（7）; bst.remove（4）; console.log（bst.findMin（））; console.log（bst.findMax（））; bst.remove（7）; console.log（bst.findMax （））; console.log（bst.isPresent（4））;"
}, {
  "tag": "P",
  "text": "Result:",
  "translation": "结果："
}, {
  "tag": "PRE",
  "text": "176false",
  "translation": "176假"
}, {
  "tag": "H2",
  "text": "7. Trie (pronounced “try”)",
  "translation": "7.特里（发音为“ try”）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*q3r9ipZsIhQpvcgeBnkQOw.png?q=20",
  "type": "image",
  "file": "1*q3r9ipZsIhQpvcgeBnkQOw.png"
}, {
  "tag": "P",
  "text": "Trie, or “Prefix Tree”, is also a type of search tree. Trie stores the data step-by-step — each node in the tree represents a step. Trie is used in storing vocabularyso it can be quickly searched, especially for an auto-complete function.",
  "translation": "Trie或“前缀树”也是一种搜索树。 Trie分步存储数据-树中的每个节点代表一个步骤。 Trie用于存储词汇，因此可以快速搜索，尤其是自动完成功能。"
}, {
  "tag": "P",
  "text": "Each node in Trie has an alphabet — following the branch can form a complete word. It also comprises a boolean indicator to show whether is this the last alphabet.",
  "translation": "Trie中的每个节点都有一个字母-在分支之后可以形成一个完整的单词。 它还包含一个布尔指示符，以显示这是否是最后一个字母。"
}, {
  "tag": "P",
  "text": "Trie has following methods:",
  "translation": "Trie具有以下方法："
}, {
  "tag": "UL",
  "texts": ["add: Insert a word into the dictionary tree", "isWord: Determine whether the tree consists of certain word", "print: Return all words in the tree"],
  "translations": ["添加：在字典树中插入一个单词", "isWord：确定树是否由某些单词组成", "打印：返回树中的所有单词"]
}, {
  "tag": "PRE",
  "text": "/** Node in Trie **/function Node() {      this.keys = new Map();      this.end = false;      this.setEnd = function () {            this.end = true;      };      this.isEnd = function () {            return this.end;      }}function Trie() {          this.root = new Node();          this.add = function (input, node = this.root) {                if (input.length === 0) {                     node.setEnd();                      return;                } else if (!node.keys.has(input[0])) {                      node.keys.set(input[0], new Node());                      return this.add(input.substr(1), node.keys.get(input[0]));                } else {                      return this.add(input.substr(1), node.keys.get(input[0]));                }          }          this.isWord = function (word) {                let node = this.root;                while (word.length > 1) {                      if (!node.keys.has(word[0])) {                            return false;                      } else {                            node = node.keys.get(word[0]);                           word = word.substr(1);                      }                }                return (node.keys.has(word) && node.keys.get(word).isEnd()) ? true : false;          }              this.print = function () {                    let words = new Array();                    let search = function (node = this.root, string) {                          if (node.keys.size != 0) {                                for (let letter of node.keys.keys()) {                                      search(node.keys.get(letter), string.concat(letter));                                }                                if (node.isEnd()) {                                      words.push(string);                                }                          } else {                                string.length > 0 ? words.push(string) : undefined;                                return;                          }                    };                    search(this.root, new String());                    return words.length > 0 ? words : null;      }}",
  "translation": "/ ** Trie中的节点** / function Node（）{this.keys = new Map（）; this.end = false; this.setEnd = function（）{this.end = true; }; this.isEnd = function（）{返回this.end; }}函数Trie（）{this.root = new Node（）; this.add = function（input，node = this.root）{if（input.length === 0）{node.setEnd（）;返回; } else if（！node.keys.has（input [0]））{node.keys.set（input [0]，new Node（））;返回this.add（input.substr（1），node.keys.get（input [0]））; } else {返回this.add（input.substr（1），node.keys.get（input [0]））; }} this.isWord =函数（单词）{let node = this.root; while（word.length> 1）{if（！node.keys.has（word [0]））{返回false; } else {node = node.keys.get（word [0]）;字= word.substr（1）;返回（node.keys.has（word）&& node.keys.get（word）.isEnd（））吗？真假; } this.print = function（）{let words = new Array（）; let search = function（node = this.root，string）{if（node.keys.size！= 0）{for（（node.keys.keys（）的字母）{搜索（node.keys.get（letter） ，string.concat（letter））; } if（node.isEnd（））{words.push（string）; }}其他{string.length> 0吗？ words.push（string）：未定义;返回; };搜索（this.root，new String（））;返回words.length> 0？字词：null； }}"
}, {
  "tag": "H2",
  "text": "8. Graph",
  "translation": "8.图"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*U7clK_WA52dR-pBTezcMLQ.png?q=20",
  "type": "image",
  "file": "1*U7clK_WA52dR-pBTezcMLQ.png"
}, {
  "tag": "P",
  "text": "Graph, sometimes known as network, refers to sets of nodes with linkages (or edges). It could be further divided into two groups (ie. directed graphs and undirected graphs), according to whether the linkages have direction. Graph is widely used in our lives — to calculate the best route in navigation apps, or to recommended friends in social media, to take two examples.",
  "translation": "图（有时称为网络）是指具有链接（或边）的节点集。 根据链接是否具有方向，它可以进一步分为两组（即有向图和无向图）。 Graph在我们的生活中得到了广泛使用，例如，在导航应用中计算最佳路线，或者在社交媒体中向推荐的朋友举两个例子。"
}, {
  "tag": "P",
  "text": "Graph has two types of presentation:",
  "translation": "图有两种表示形式："
}, {
  "tag": "P",
  "text": "Adjacency List",
  "translation": "邻接表"
}, {
  "tag": "P",
  "text": "In this method, we list all the possible nodes on the left and show the connected nodes on the right.",
  "translation": "在此方法中，我们在左侧列出所有可能的节点，并在右侧显示已连接的节点。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*U7K5TZP4WWTA7Gf0mZ30ew.png?q=20",
  "type": "image",
  "file": "1*U7K5TZP4WWTA7Gf0mZ30ew.png"
}, {
  "tag": "P",
  "text": "Adjacency Matrix",
  "translation": "邻接矩阵"
}, {
  "tag": "P",
  "text": "Adjacency matrix shows nodes in row and column, intersections of the row and column interpret the relationship between nodes, 0 means not linked, 1 means linked, >1 means different weightage.",
  "translation": "邻接矩阵显示行和列中的节点，行和列的交点解释节点之间的关系，0表示未链接，1表示链接，> 1表示不同的权重。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*mzU34MmP1nP00yhXfMwTCg.png?q=20",
  "type": "image",
  "file": "1*mzU34MmP1nP00yhXfMwTCg.png"
}, {
  "tag": "P",
  "text": "To query for nodes in graph, one must search through the entire tree network with either the Breath-First-Search (BFS) method or the Depth-First-Search (DFS) method.",
  "translation": "要查询图中的节点，必须使用“呼吸优先”（BFS）方法或“深度优先”（DFS）方法在整个树形网络中进行搜索。"
}, {
  "tag": "P",
  "text": "Let’s see an example of BFS in Javascript:",
  "translation": "让我们看一个用Javascript编写BFS的示例："
}, {
  "tag": "PRE",
  "text": "function bfs(graph, root) {  var nodesLen = {};  for (var i = 0; i < graph.length; i++) {    nodesLen[i] = Infinity;  }  nodesLen[root] = 0;  var queue = [root];  var current;  while (queue.length != 0) {    current = queue.shift();    var curConnected = graph[current];    var neighborIdx = [];    var idx = curConnected.indexOf(1);    while (idx != -1) {      neighborIdx.push(idx);      idx = curConnected.indexOf(1, idx + 1);    }    for (var j = 0; j < neighborIdx.length; j++) {      if (nodesLen[neighborIdx[j]] == Infinity) {        nodesLen[neighborIdx[j]] = nodesLen[current] + 1;        queue.push(neighborIdx[j]);      }    }  }  return nodesLen;}",
  "translation": "函数bfs（graph，root）{var nodesLen = {}; for（var i = 0; i <graph.length; i ++）{nodesLen [i] = Infinity; } nodesLen [root] = 0; var queue = [root]; 无功电流 while（queue.length！= 0）{当前= queue.shift（）; var curConnected = graph [current]; var neighborIdx = []; var idx = curConnected.indexOf（1）; while（idx！= -1）{neighborIdx.push（idx）; idx = curConnected.indexOf（1，idx + 1）; } for（var j = 0; j <neighborIdx.length; j ++）{if（nodesLen [neighborIdx [j]] == Infinity）{ queue.push（neighborIdx [j]）; }}} return nodesLen;}"
}, {
  "tag": "P",
  "text": "Testing it out:",
  "translation": "测试一下："
}, {
  "tag": "PRE",
  "text": "var graph = [  [0, 1, 1, 1, 0],  [0, 0, 1, 0, 0],  [1, 1, 0, 0, 0],  [0, 0, 0, 1, 0],  [0, 1, 0, 0, 0]];console.log(bfs(graph, 1));",
  "translation": "var graph = [[0，1，1，1，0]，[0，0，1，0，0]，[1，1，0，0，0]，[0，0，0，1，0 ]，[0，1，0，0，0]]; console.log（bfs（graph，1））;"
}, {
  "tag": "P",
  "text": "Result:",
  "translation": "结果："
}, {
  "tag": "PRE",
  "text": "{  0: 2,  1: 0,  2: 1,  3: 3,  4: Infinity}",
  "translation": "{0：2，1：0，2：1，1，3：3，4：Infinity}"
}, {
  "tag": "P",
  "text": "That’s it — we have covered all the common data structures and given examples in JavaScript. This should give you a better picture of how data structures work in computers. Happy coding!",
  "translation": "就是这样–我们涵盖了所有常见的数据结构，并提供了JavaScript中的示例。 这应该使您更好地了解计算机中数据结构的工作方式。 编码愉快！"
}]