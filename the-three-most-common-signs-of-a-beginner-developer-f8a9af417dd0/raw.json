[{
  "tag": "P",
  "text": "Perhaps you’ve found yourself making these mistakes as a beginner or even experienced developer—I know I have on more than one occasion. Maybe you’ve made them in the past and are familiar with these pitfalls and how to outgrow them.",
  "translation": "也许您是初学者甚至是经验丰富的开发人员都犯了这些错误-我知道我不止一次。 也许您曾经做过它们，并且熟悉这些陷阱以及如何避免这些陷阱。"
}, {
  "tag": "P",
  "text": "Whatever your experience level is, I hope that by reading these three examples you’ve been either introduced to or refreshed on the kinds of coding patterns that can lead to common mistakes or inefficiencies. Learning a style of programming that works best for you is a great way to write fast, smart code. But it can also lead to becoming too entrenched in certain patterns or solutions that can prevent you from thinking outside of those patterns and learning or implementing better, more efficient solutions.",
  "translation": "无论您的经验水平如何，我希望通过阅读这三个示例，您已经被介绍或刷新了可能导致常见错误或效率低下的各种编码模式。 学习最适合您的编程风格是编写快速，智能代码的好方法。 但这也可能导致您对某些模式或解决方案过于固守，从而使您无法思考这些模式或解决方案之外的问题，从而无法学习或实施更好，更有效的解决方案。"
}, {
  "tag": "H1",
  "text": "The Most Common Signs of a Beginner Developer",
  "translation": "初学者最常见的迹象"
}, {
  "tag": "H2",
  "text": "Examining complacency in programming so you can avoid it",
  "translation": "检查编程中的自满情绪，以便您可以避免"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*Q4mZesbLEvbApO888vOtxA.jpeg?q=20",
  "caption": "Photo by Valeriy Khan on Unsplash",
  "type": "image",
  "file": "1*Q4mZesbLEvbApO888vOtxA.jpeg"
}, {
  "tag": "P",
  "text": "Learning a new craft can be a confusing process. Particularly as a developer, you may be familiar with a common issue that plagues beginners: Finding patterns that work and sticking with them at the expense of learning new and perhaps better ways to go about solving the problem.",
  "translation": "学习新手艺可能是一个令人困惑的过程。 特别是作为开发人员，您可能熟悉困扰初学者的一个常见问题：找到有效的模式并坚持使用这些模式，却以学习解决问题的新方法和更好的方法为代价。"
}, {
  "tag": "P",
  "text": "In my experience I’ve found that the most common pitfalls that beginner developers face often stem from having certain patterns and processes carved out early on in their academic or professional career and then sticking to them without learning any alternatives.",
  "translation": "从我的经验中，我发现，初学者开发人员面临的最常见陷阱通常是在他们的学术或职业生涯的早期就确定了某些模式和过程，然后坚持学习而没有其他选择。"
}, {
  "tag": "P",
  "text": "So I’ve narrowed down what I’ve found to be the three most common pitfalls that occur from this “complacency” in patterns/processes and provided some practical examples that illustrate them. Hopefully reading these will allow you to reflect on your own programming habits and to be able to critically think of other aspects of your coding that may be an old pattern that you simply did not outgrow. While I am writing this article using JavaScript in my examples, the following can apply to any language or framework.",
  "translation": "因此，我缩小了在模式/过程中由于这种“可替代性”而引起的三个最常见的陷阱，并提供了一些实际的例子来说明它们。 希望阅读这些内容可以使您反思自己的编程习惯，并能够批判性地考虑编码的其他方面，这些方面可能是您根本不习惯的老模式。 在示例中使用JavaScript编写本文时，以下内容适用于任何语言或框架。"
}, {
  "tag": "H1",
  "text": "1. Being Married to a Single Method",
  "translation": "1.嫁给单一方法"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*RUWe5mFn-9V9sbDBq9zBvw.png?q=20",
  "type": "image",
  "file": "1*RUWe5mFn-9V9sbDBq9zBvw.png"
}, {
  "tag": "P",
  "text": "A lot of times beginner programmers will gain familiarity with one type of method and then stretch its capabilities in order to make it work for problems that could be much more simply (or, in fact, correctly) solved with a different method.",
  "translation": "很多时候，初学者会熟悉一种方法，然后扩展其功能，以使其能够解决用另一种方法可以更简单（或实际上正确地）解决的问题。"
}, {
  "tag": "P",
  "text": "For example, say a beginner programmer has gained familiarity using the JavaScript .forEach array method, be it through their learning or practical experience. They may be inclined to use the .forEach method in solutions where perhaps a .map or .filter method would be more appropriate.",
  "translation": "例如，假设一个初学者通过学习或实践经验，使用JavaScript .forEach数组方法获得了熟悉。 他们可能倾向于在.map或.filter方法更合适的解决方案中使用.forEach方法。"
}, {
  "tag": "P",
  "text": "Say you have an array of numbers and want to create a new array containing those numbers multiplied by two. Someone who is too comfortable using the .forEach method may be inclined to do something like create new empty array and push each member of the original array multiplied by two into the empty one.",
  "translation": "假设您有一个数字数组，并想创建一个包含这些数字乘以2的新数组。 某些不太喜欢使用.forEach方法的人可能会倾向于执行类似创建新的空数组并将原始数组乘以2的每个成员推入空数组的操作。"
}, {
  "tag": "P",
  "text": "However, in this case using a .map method would not only do the job in fewer lines of code, but would also be more computationally efficient. While the first example would work, the latter shows a deeper understanding of the language.",
  "translation": "但是，在这种情况下，使用.map方法不仅可以用更少的代码行完成这项工作，而且还可以提高计算效率。 尽管第一个示例可以工作，但后者显示了对该语言的更深刻理解。"
}, {
  "tag": "H1",
  "text": "2. Assigning Too Many Variables",
  "translation": "2.分配太多变量"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*BeUrqwPp43XTUkqcnhmzRQ.png?q=20",
  "type": "image",
  "file": "1*BeUrqwPp43XTUkqcnhmzRQ.png"
}, {
  "tag": "P",
  "text": "Going off of the example above, creating a new variable (an empty array into which new elements will be pushed) is not always the best or most memory-efficient way to go about things. This is another very common pitfall that I’ve observed in beginner programmers, particularly those who learn algorithm solutions early on in their academic careers. Many algorithm solutions targeted at beginners often incorporate initialized variables that are then manipulated by the algorithm in order to return the desired result.",
  "translation": "与上面的示例不同，创建新变量（将新元素放入其中的空数组）并不总是处理事情的最佳或最节省内存的方法。 这是我在初学者程序员中观察到的另一个非常常见的陷阱，特别是那些在职业生涯早期学习算法解决方案的程序员。 许多针对初学者的算法解决方案通常包含初始化变量，然后由算法对其进行操作以返回所需的结果。"
}, {
  "tag": "P",
  "text": "For example, oftentimes a beginner programmer will gain familiarity with writing algorithm functions that require them to initialize an empty array, an empty string, or an empty object at the beginning of the function. Gaining practice in solving these kinds of problems, while no doubt helpful, can create a misleading pattern of solving all sorts of problems by initializing a variable at the start.",
  "translation": "例如，新手程序员通常会熟悉编写算法函数的过程，这些函数要求函数在函数的开头初始化一个空数组，一个空字符串或一个空对象。 解决这类问题的实践虽然无疑会有所帮助，但可以通过在开始时初始化变量来创建一种解决所有问题的误导性模式。"
}, {
  "tag": "P",
  "text": "However, in professional environments where memory efficiency is prioritized, assigning variables as a go-to solution to problems may not be the best way to go about things. Instead, ask yourself if your desired outcome absolutely needs an initialized variable. Oftentimes you can manipulate existing objects or build off of the return values of existing methods/functions that would be much more memory efficient.",
  "translation": "但是，在优先考虑内存效率的专业环境中，将变量分配为问题的理想解决方案可能不是解决问题的最佳方法。 相反，请问自己是否想要的结果绝对需要初始化变量。 通常，您可以操纵现有对象或利用现有方法/函数的返回值构建内存，这将大大提高内存效率。"
}, {
  "tag": "H1",
  "text": "3. Doing Too Much in a Function",
  "translation": "3.在功能上做太多"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*ByrUjAxl_W_RwKqGGUqn1g.png?q=20",
  "type": "image",
  "file": "1*ByrUjAxl_W_RwKqGGUqn1g.png"
}, {
  "tag": "P",
  "text": "A common coding pattern that I’ve seen in many beginner developers is a sort of “train-of-thought, write-as-you-go” approach that often leads to overloaded functions and classes. This is because the developer is writing code as they work through the problem and not revisiting it in order to refactor and break it up. This leads to functions that have many different processes and methods going on inside of them.",
  "translation": "我在许多新手开发人员中都看到过一种常见的编码模式，是一种“思维方式，即写即用”的方法，通常会导致函数和类重载。 这是因为开发人员在解决问题时正在编写代码，而不是重新访问代码以进行重构和分解。 这导致内部具有许多不同过程和方法的功能。"
}, {
  "tag": "P",
  "text": "This is unfavorable practice in all languages, particularly functional languages like JavaScript in which the “big idea” of the language is to write concise, single-purpose functions that can then be moved around reapplied to serve different purposes.",
  "translation": "在所有语言中，这都是不利的做法，尤其是JavaScript之类的功能语言，其中的“大思想”是编写简洁的，单一用途的函数，然后可以将其四处移动以重新应用于不同目的。"
}, {
  "tag": "P",
  "text": "Take a look at your code and always ask yourself: “What is this function doing?” If the answer to that question contains “and,” “then,” “also,” or any such adverbs, perhaps your function is simply trying to do too much and can be broken up into multiple functions. Doing so not only creates code that is much easier to work with for you and other developers observing your code, but will also lead to fewer mistakes and bugs in the future as data and objects aren’t getting lost in the noise of a large, overloaded function.",
  "translation": "查看您的代码，并始终问自己：“此函数在做什么？”如果该问题的答案包含“和”，“然后”，“也”或任何此类副词，则可能您的函数只是在试图 做得太多，可以分解为多种功能。 这样做不仅会为您和其他开发人员观察您的代码创建易于使用的代码，而且由于数据和对象不会因为大笔费用而丢失，将来还会减少错误和错误。 重载功能。"
}]