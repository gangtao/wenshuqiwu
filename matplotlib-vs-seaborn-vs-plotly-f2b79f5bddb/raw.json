[{
  "tag": "H2",
  "text": "Plotly Experiments — Scatterplots",
  "translation": "密谋实验—散点图"
}, {
  "tag": "H3",
  "text": "A deep dive into scatterplots using Plotly",
  "translation": "使用Plotly深入研究散点图"
}, {
  "tag": "H2",
  "text": "The Next Level of Data Visualization in Python",
  "translation": "Python中数据可视化的新层次"
}, {
  "tag": "H3",
  "text": "How to make great-looking, fully-interactive plots with a single line of Python",
  "translation": "如何使用单行Python制作美观，完全交互的图"
}, {
  "tag": "H2",
  "text": "Example gallery - seaborn 0.9.0 documentation",
  "translation": "图库示例-Seaborn 0.9.0文档"
}, {
  "tag": "H3",
  "text": "Edit description",
  "translation": "编辑描述"
}, {
  "tag": "H2",
  "text": "Plotly Python Graphing Library",
  "translation": "Plotly Python图形库"
}, {
  "tag": "H3",
  "text": "Plotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots…",
  "translation": "Plotly的Python图形库可生成交互式的，具有出版物质量的图形。 如何制作线图的示例…"
}, {
  "tag": "P",
  "text": "References:",
  "translation": "参考文献："
}, {
  "tag": "H2",
  "text": "Plotly Python Graphing Library",
  "translation": "Plotly Python图形库"
}, {
  "tag": "H3",
  "text": "Plotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots…",
  "translation": "Plotly的Python图形库可生成交互式的，具有出版物质量的图形。 如何制作线图的示例…"
}, {
  "tag": "H2",
  "text": "Example gallery - seaborn 0.9.0 documentation",
  "translation": "图库示例-Seaborn 0.9.0文档"
}, {
  "tag": "H3",
  "text": "Edit description",
  "translation": "编辑描述"
}, {
  "tag": "H2",
  "text": "The Next Level of Data Visualization in Python",
  "translation": "Python中数据可视化的新层次"
}, {
  "tag": "H3",
  "text": "How to make great-looking, fully-interactive plots with a single line of Python",
  "translation": "如何使用单行Python制作美观，完全交互的图"
}, {
  "tag": "H2",
  "text": "Plotly Experiments — Scatterplots",
  "translation": "密谋实验—散点图"
}, {
  "tag": "H3",
  "text": "A deep dive into scatterplots using Plotly",
  "translation": "使用Plotly深入研究散点图"
}, {
  "tag": "H1",
  "text": "Matplotlib vs. Seaborn vs. Plotly",
  "translation": "Matplotlib vs.Seaborn vs.Plotly"
}, {
  "tag": "H2",
  "text": "How can you amplify your data visualizations?",
  "translation": "您如何扩大数据可视化？"
}, {
  "tag": "P",
  "text": "Clear, effective data visualization is key to optimizing your ability to convey findings. With various packages in use such as Matplotlib, Seaborn, and Plotly, knowing the capabilities of each and the syntax behind them can become bewildering. I’m going to walk you through creating some common graphs in Python using each of these packages using a csv file of the 2017 Spotify top tracks.",
  "translation": "清晰有效的数据可视化是优化传达结果的能力的关键。 使用Matplotlib，Seaborn和Plotly等各种软件包时，了解它们的功能以及其背后的语法可能会令人迷惑。 我将指导您使用2017 Spotify热门曲目的csv文件使用上述每个程序包在Python中创建一些常见的图形。"
}, {
  "tag": "P",
  "text": "First, i’ll import the pandas package to read my csv into an easily readable dataframe.",
  "translation": "首先，我将导入pandas软件包以将我的csv读取到易于阅读的数据框中。"
}, {
  "tag": "PRE",
  "text": "import pandas as pddf = pd.DataFrame(pd.read_csv('featuresdf.csv'))",
  "translation": "将熊猫作为pddf = pd.DataFrame（pd.read_csv（'featuresdf.csv'））导入"
}, {
  "tag": "H1",
  "text": "Histogram",
  "translation": "直方图"
}, {
  "tag": "P",
  "text": "I’ll need to import the matplotlib package:",
  "translation": "我需要导入matplotlib软件包："
}, {
  "tag": "PRE",
  "text": "import matplotlib.pyplot as plt%matplotlib inline",
  "translation": "导入matplotlib.pyplot作为plt％matplotlib内联"
}, {
  "tag": "P",
  "text": "To plot a histogram of the danceability and energy scores overlaid, I can use the following code:",
  "translation": "要绘制覆盖可跳舞性和能量得分的直方图，我可以使用以下代码："
}, {
  "tag": "PRE",
  "text": "#set figuref, ax = plt.subplots(1,1)#graph histogramplt.hist(df['danceability'], bins=10, alpha=0.5, color='purple', label='Danceability')plt.hist(df['energy'], bins=10, alpha = 0.5, color='blue', label='Energy')#set legendplt.legend(loc='upper right')#set title & axis titlesax.set_title('Danceability Histogram', fontsize=20)ax.set_xlabel('Danceability')ax.set_ylabel('Frequency')#set x & y rangesplt.xlim(0,1)plt.ylim(0, 30)plt.show()",
  "translation": "#set figf，ax = plt.subplots（1,1）#graph histogramplt.hist（df ['danceability']，bins = 10，alpha = 0.5，color ='purple'，label ='Danceability'）plt.hist （df ['energy']，bins = 10，alpha = 0.5，color ='blue'，label ='Energy'）＃set legendplt.legend（loc ='upper right'）＃set标题和轴标题ax.set_title（ 'Danceability Histogram'，fontsize = 20）ax.set_xlabel（'Danceability'）ax.set_ylabel（'Frequency'）＃set x＆y rangesplt.xlim（0,1）plt.ylim（0，30）plt.show（ ）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*uywJZUAvPILlHgtKutkO-A.png?q=20",
  "type": "image",
  "file": "1*uywJZUAvPILlHgtKutkO-A.png"
}, {
  "tag": "P",
  "text": "Notice the sparse nature of this graph. However, once I run the following code, you can see how my graph improves:",
  "translation": "注意该图的稀疏性质。 但是，运行以下代码后，您可以看到图形的改进方式："
}, {
  "tag": "PRE",
  "text": "import seaborn as snssns.set(style='darkgrid')",
  "translation": "将seaborn导入为snssns.set（style ='darkgrid'）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*ifbBm40tmXLGY5qqAf4dZQ.png?q=20",
  "type": "image",
  "file": "1*ifbBm40tmXLGY5qqAf4dZQ.png"
}, {
  "tag": "P",
  "text": "Seaborn allows us to add a nice backdrop to our plots and improves the font. You can set style = darkgrid, whitegrid, dark, white, and ticks. We can also plot the same graph using what seaborn calls the distplot:",
  "translation": "Seaborn允许我们在场景中添加漂亮的背景并改进字体。 您可以设置样式= darkgrid，whitegrid，dark，white和ticks。 我们也可以使用seaborn称为distplot绘制同一图形："
}, {
  "tag": "PRE",
  "text": "f, ax = plt.subplots(1,1)sns.distplot(df['danceability'], bins=10, label='Danceability', color='purple')sns.distplot(df['energy'], bins=10, label='Energy', color='blue')ax.set_title('Danceability & Energy Histogram', fontsize=20)ax.set(xlabel='Rating', ylabel='Frequency')ax.set_xlim([0, 1])ax.legend()",
  "translation": "f，ax = plt.subplots（1,1）sns.distplot（df ['danceability']，bins = 10，label ='Danceability'，color ='purple'）sns.distplot（df ['energy']， bins = 10，label ='Energy'，color ='blue'）ax.set_title（'Danceability＆Energy Histogram'，fontsize = 20）ax.set（xlabel ='Rating'，ylabel ='Frequency'）ax.set_xlim （[0，1]）ax.legend（）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*fXyT2zXwQybctxMEjNIdEw.png?q=20",
  "type": "image",
  "file": "1*fXyT2zXwQybctxMEjNIdEw.png"
}, {
  "tag": "P",
  "text": "Almost exactly the same, right? Seaborn is built on matplotlib, so you can use them concurrently. Seaborn simply has its own library of graphs, and has pleasant formatting built in. However, it does not have all of the same capabilities of matplotlib. For instance, if you want to create the same histogram, but with the two variables stacked next to each other as opposed to overlaid, you would need to fall back to matplotlib:",
  "translation": "几乎完全一样，对不对？ Seaborn基于matplotlib构建，因此您可以同时使用它们。 Seaborn仅具有自己的图形库，并且内置了令人愉快的格式。但是，它不具有matplotlib的所有相同功能。 例如，如果要创建相同的直方图，但两个变量彼此相邻堆叠而不是覆盖，则需要回退到matplotlib："
}, {
  "tag": "PRE",
  "text": "#set figuref, ax = plt.subplots(1,1)#next to each otherplt.hist([df['danceability'], df['energy']], bins=10, alpha=0.5, color=['red', 'blue'], label = ['Danceability', 'Energy'])#set legendplt.legend(loc='upper right')#set title & axis titlesax.set_title('Danceability & Energy Histogram', fontsize=20)ax.set_xlabel('Rating')ax.set_ylabel('Frequency')#set x & y rangesplt.xlim(0,1)plt.ylim(0, 30)plt.show()",
  "translation": "#set figf，ax = plt.subplots（1,1）＃彼此相邻plt.hist（[df ['danceability']，df ['energy']]，bins = 10，alpha = 0.5，color = [' 红色'，'蓝色']，标签= ['Danceability'，'Energy']）＃set legendplt.legend（loc ='upper right'）＃set标题和轴标题ax.set_title（'Danceability＆Energy Histogram'，fontsize = 20）ax.set_xlabel（'Rating'）ax.set_ylabel（'Frequency'）＃set x＆y rangesplt.xlim（0,1）plt.ylim（0，30）plt.show（）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*iRbLxrPSF4IsCGtLrmjgBg.png?q=20",
  "type": "image",
  "file": "1*iRbLxrPSF4IsCGtLrmjgBg.png"
}, {
  "tag": "P",
  "text": "Seaborn’s built in features for its graphs can be helpful, but they can be limiting if you want to further customize your graph.",
  "translation": "Seaborn的图形内置功能可能会有所帮助，但如果您想进一步自定义图形，则可能会受到限制。"
}, {
  "tag": "P",
  "text": "Matplotlib and Seaborn may be the most commonly used data visualization packages, but there is a simpler method that produces superior graphs than either of these: Plotly. To get started in a jupyter notebook, run the code below:",
  "translation": "Matplotlib和Seaborn可能是最常用的数据可视化程序包，但是有一种更简单的方法可以生成优于以下任何一种图形的图形：Plotly。 要开始使用Jupyter笔记本，请运行以下代码："
}, {
  "tag": "PRE",
  "text": "pip install chart-studioconda install -c plotly chart-studio# Standard plotly importsfrom chart_studio.plotly import plot, iplot as pyimport plotly.graph_objects as gofrom plotly.offline import iplot, init_notebook_mode# Using plotly + cufflinks in offline modeimport cufflinkscufflinks.go_offline(connected=True)init_notebook_mode(connected=True)",
  "translation": "pip install chart-studioconda install -c plotly chart-studio＃从chart_studio导入标准plotly.plotly从plot_studio导入iplot，以pyimport plotly导入iplot.graph_objects作为gofrom plotly.offline导入iplot，init_notebook_mode＃在脱机模式下使用plotly +袖扣导入cufflinkscufflinks.go_offline（已连接 = True）init_notebook_mode（connected = True）"
}, {
  "tag": "P",
  "text": "To plot the same overlaid histogram as above using default Plotly settings:",
  "translation": "要使用默认的Plotly设置绘制与上述相同的重叠直方图："
}, {
  "tag": "PRE",
  "text": "fig = df[['danceability', 'energy']].iplot(kind='hist', color=['purple', 'blue'], xTitle='Danceability',                  yTitle='Frequency', title='Danceability Histogram')",
  "translation": "fig = df [['danceability'，'energy']]。iplot（kind ='hist'，color = ['purple'，'blue']，xTitle ='Danceability'，yTitle ='Frequency'，title =' 舞蹈直方图'）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*GP9GmGzcdsD1ABvOCXbNPg.png?q=20",
  "type": "image",
  "file": "1*GP9GmGzcdsD1ABvOCXbNPg.png"
}, {
  "tag": "P",
  "text": "Plotly graphs are automatically outfitted with hover tool capabilities — hovering your mouse over any of the bars of data will display the numerical values.",
  "translation": "图表会自动具有悬停工具功能-将鼠标悬停在任何数据条上都会显示数值。"
}, {
  "tag": "P",
  "text": "To plot the bars side by side or otherwise further customize the graph, the code is lengthier, but fairly intuitive. You can specify your desired theme from a growing list of available default themes, including one modeled after seaborn (used below).",
  "translation": "要并排绘制条形图或以其他方式自定义图形，代码会更长一些，但相当直观。 您可以从越来越多的可用默认主题列表中指定所需的主题，包括一个以seaborn为原型的模型（如下所述）。"
}, {
  "tag": "PRE",
  "text": "#install themes & view availableimport plotly.io as piopio.templates",
  "translation": "#install主题并以piopio.templates的形式查看availableimport plotly.io"
}, {
  "tag": "P",
  "text": "You can also specify your colors using the default color codes below:",
  "translation": "您还可以使用以下默认颜色代码指定颜色："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*shwNXxQCpDaQ4hifqcmpxw.png?q=20",
  "type": "image",
  "file": "1*shwNXxQCpDaQ4hifqcmpxw.png"
}, {
  "tag": "P",
  "text": "And finally, plot your graph:",
  "translation": "最后，绘制图形："
}, {
  "tag": "PRE",
  "text": "#plottrace1 = go.Histogram(    x=df['danceability'],    name='danceability', #name used in legend and hover labels    xbins=dict( #bins used for histogram        start=0,        end=10,        size=0.1    ),    marker=dict(        color='#1f77b4',    ),    opacity=0.75)trace2 = go.Histogram(    x=df['energy'],    name='energy', #name used in legend and hover labels    xbins=dict( #bins used for histogram        start=0,        end=10,        size=0.1    ),    marker=dict(        color='#9467bd'    ),    opacity=0.75)data = [trace1, trace2]layout = go.Layout(template='seaborn', #set theme    title='Danceability & Energy Histogram',    xaxis=dict(        title='Danceability & Energy'    ),    yaxis=dict(        title='Frequency'    ),    bargap=0.2,    bargroupgap=0.1)fig = go.Figure(data=data, layout=layout)iplot(fig, filename='styled histogram')",
  "translation": "＃plottrace1 = go.Histogram（x = df ['danceability']，name ='danceability'，＃在图例和悬停标签中使用的名称xbins = dict（#bins用于直方图开始= 0，结束= 10，大小= 0.1 ），marker = dict（color ='＃1f77b4'，），不透明度= 0.75）trace2 = go.Histogram（x = df ['energy']，name ='energy'，＃用于图例和悬停标签中的名称xbins = dict（#bins用于直方图start = 0，end = 10，size = 0.1），marker = dict（color ='＃9467bd'），不透明度= 0.75）data = [trace1，trace2] layout = go.Layout（template ='seaborn'，#set theme title ='Danceability＆Energy Histogram'，xaxis = dict（title ='Danceability＆Energy'），yaxis = dict（title ='Frequency'），bargap = 0.2，bargroupgap = 0.1）图 = go.Figure（data = data，layout = layout）iplot（fig，filename ='styled histogram'）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*yvLoPQuzqL-UczmUQbKJKA.png?q=20",
  "type": "image",
  "file": "1*yvLoPQuzqL-UczmUQbKJKA.png"
}, {
  "tag": "H1",
  "text": "Scatterplot",
  "translation": "散点图"
}, {
  "tag": "P",
  "text": "To plot the loudness score vs. valence in matplotlib:",
  "translation": "要在matplotlib中绘制响度得分与价的关系，请执行以下操作："
}, {
  "tag": "PRE",
  "text": "#set figuref, ax = plt.subplots(1,1)#plotplt.scatter(df['loudness'], df['valence'], s=df['energy']*100)#set title & labelsplt.title('Scatterplot: Loudness vs. Valence', fontsize=20)plt.xlabel('Loudness')plt.ylabel('Positivity')#set x rangeax.set_xlim([0, -10])plt.show()",
  "translation": "#set figf，ax = plt.subplots（1,1）＃plotplt.scatter（df ['loudness']，df ['valence']，s = df ['energy'] * 100）＃设置标题和标签plt。 title（'Scatterplot：Loudness vs. Valence'，fontsize = 20）plt.xlabel（'Loudness'）plt.ylabel（'Positivity'）＃set x rangeax.set_xlim（[0，-10]）plt.show（）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*p8sqjbLMvbsLc4vjItE9Pw.png?q=20",
  "type": "image",
  "file": "1*p8sqjbLMvbsLc4vjItE9Pw.png"
}, {
  "tag": "P",
  "text": "In seaborn:",
  "translation": "在seaborn中："
}, {
  "tag": "PRE",
  "text": "fig = sns.scatterplot(x=df['loudness'], y=df['valence'], size = df['energy'],sizes = (40,200))fig.figure.suptitle(\"Scatterplot: Loudness vs. Valence\", fontsize = 25)fig.set(xlabel='Loudness', ylabel='Positivity')fig.set_xlim([0,-10])",
  "translation": "fig = sns.scatterplot（x = df ['loudness']，y = df ['valence']，size = df ['energy']，sizes =（40,200））fig.figure.suptitle（“ Scatterplot：Loudness vs 价”，字体大小= 25）fig.set（xlabel ='Loudness'，ylabel ='Positivity'）fig.set_xlim（[0，-10]）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*4pJ0egYZbNsgldt_syPgnQ.png?q=20",
  "type": "image",
  "file": "1*4pJ0egYZbNsgldt_syPgnQ.png"
}, {
  "tag": "P",
  "text": "If you want to add a regression line to the graph, seaborn makes this infinitely easier with its regplot graph:",
  "translation": "如果要向图形添加回归线，则Seaborn的regplot图形将使此操作变得无限简单："
}, {
  "tag": "PRE",
  "text": "fig = sns.regplot(df['loudness'], y=df['valence'], data=df)fig.figure.suptitle(\"Scatterplot: Loudness vs. Valence\", fontsize = 25)fig.set(xlabel='Loudness', ylabel='Positivity')fig.set_xlim([0,-10])",
  "translation": "无花果= sns.regplot（df ['loudness']，y = df ['valence']，data = df）fig.figure.suptitle（“ Scatterplot：Loudness vs. Valence”，fontsize = 25）fig.set（xlabel ='Loudness'，ylabel ='Positivity'）fig.set_xlim（[0，-10]）"
}, {
  "tag": "P",
  "text": "To add the correlation coefficient to this, import the pearson.r package from scipy and follow the steps below:",
  "translation": "要为此添加相关系数，请从scipy导入pearson.r程序包，然后执行以下步骤："
}, {
  "tag": "PRE",
  "text": "import numpy as npfrom scipy.stats import pearsonr#calculate correlation coefficientcorr = pearsonr(df['loudness'], df['valence'])corr = [np.round(c, 2) for c in corr]#add the coefficient to your graphtext = 'r=%s, p=%s' % (corr[0], corr[1])ax = sns.regplot(x=\"loudness\", y=\"valence\", data=df)ax.text(-7.5, 0.9, text, fontsize=12)",
  "translation": "从scipy.stats中将numpy导入为np。 到您的graphtext ='r =％s，p =％s'％（corr [0]，corr [1]）ax = sns.regplot（x =“ loudness”，y =“ valence”，data = df）ax .text（-7.5，0.9，text，fontsize = 12）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*QrI4jFN7cPYG2HcjWlswig.png?q=20",
  "type": "image",
  "file": "1*QrI4jFN7cPYG2HcjWlswig.png"
}, {
  "tag": "P",
  "text": "Lastly, with Plotly, we can again create a scatterplot using the default settings:",
  "translation": "最后，借助Plotly，我们可以使用默认设置再次创建散点图："
}, {
  "tag": "PRE",
  "text": "fig = go.Figure(data=go.Scatter(x=df[‘loudness’], y=df[‘valence’],mode=’markers’))fig.update_layout(title=’Loudness vs. Valence (Positivity)’)fig.layout.template = ‘seaborn’fig.show()",
  "translation": "无花果= go.Figure（data = go.Scatter（x = df ['loudness']，y = df ['valence']，mode ='markers'））fig.update_layout（title ='Loudness vs. Valence（Positivity） ）'）fig.layout.template ='seaborn'fig.show（）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*DBie-H_RgNUSOADqbc-_7w.png?q=20",
  "type": "image",
  "file": "1*DBie-H_RgNUSOADqbc-_7w.png"
}, {
  "tag": "P",
  "text": "By adding another trace called ‘lineOfBestFit’ and calculating the regression using numpy, we can plot the regression line:",
  "translation": "通过添加另一个称为“ lineOfBestFit”的跟踪并使用numpy计算回归，我们可以绘制回归线："
}, {
  "tag": "PRE",
  "text": "dataPoints = go.Scattergl(    x=df.loudness,    y=df.valence,    mode='markers',    marker=dict(        opacity=1,        line=dict(            color='white'        )    ),    name='Data points')data=[dataPoints]layout.update(    yaxis=dict(        title='Energy'),    xaxis=dict(        title='Danceability'    ))figure.update(    data=data,    layout=layout)m,b = np.polyfit(df.loudness, df.valence, 1)bestfit_y = (df.loudness * m + b)lineOfBestFit=go.Scattergl(    x=df.loudness,    y=bestfit_y,    name='Line of best fit',    line=dict(        color='blue',    ))data=[dataPoints, lineOfBestFit]figure = go.Figure(data=data, layout=layout)figure.update_xaxes(autorange=\"reversed\")figure.layout.template = 'plotly_dark'iplot(figure)",
  "translation": "dataPoints = go.Scattergl（x = df.loudness，y = df.valence，mode ='markers'，marker = dict（opacity = 1，line = dict（color ='white'）），name ='数据点' ）data = [dataPoints] layout.update（yaxis = dict（title ='Energy'），xaxis = dict（title ='Danceability'））figure.update（data = data，layout = layout）m，b = np。 polyfit（df.loudness，df.valence，1）bestfit_y =（df.loudness * m + b）lineOfBestFit = go.Scattergl（x = df.loudness，y = bestfit_y，name ='最合适的线'，line = dict（color ='blue'，））data = [dataPoints，lineOfBestFit]图= go.Figure（data = data，layout = layout）figure.update_xaxes（autorange =“ reversed”）figure.layout.template ='plotly_dark' iplot（图）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*Wt8F6z205UT1nsnycnGdpg.png?q=20",
  "type": "image",
  "file": "1*Wt8F6z205UT1nsnycnGdpg.png"
}, {
  "tag": "P",
  "text": "These are you just two of the multitude of graphs available through seaborn and plotly libraries. Both seaborn and plotly create visually appealing graphs, but plotly allows for endless customization and interactivity with fairly intuitive syntax, making it a popular tool among data scientists."
}]