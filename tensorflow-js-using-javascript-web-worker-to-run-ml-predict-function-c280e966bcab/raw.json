[{
  "tag": "H1",
  "text": "TensorFlow.JS — Using JavaScript Web Worker to Run ML Predict Function",
  "translation": "TensorFlow.JS-使用JavaScript Web Worker运行ML Predict函数"
}, {
  "tag": "H2",
  "text": "This post is about Machine Learning on client-side. I will explain how to run ML model in JavaScript Web Worker. The model was trained in TensorFlow/Keras (using Python) to detect sentiment for a hotel review.",
  "translation": "这篇文章是关于客户端的机器学习的。 我将解释如何在JavaScript Web Worker中运行ML模型。 该模型在TensorFlow / Keras（使用Python）中进行了训练，以检测酒店点评的情绪。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*guASlqTk5o1W2s3a6OTyYA.jpeg?q=20",
  "caption": "Source: Pixabay",
  "type": "image",
  "file": "1*guASlqTk5o1W2s3a6OTyYA.jpeg"
}, {
  "tag": "P",
  "text": "I’m JavaScript developer and I feel great when the Machine Learning model runs on client-side (in the browser). I will cover several topics in this post, I believe you will find them useful, if you will decide to run ML model in the browser:",
  "translation": "我是JavaScript开发人员，当机器学习模型在客户端（在浏览器中）运行时，我感觉很好。 我将在这篇文章中介绍几个主题，如果您决定在浏览器中运行ML模型，我相信您会发现它们很有用："
}, {
  "tag": "UL",
  "texts": ["How ML model was trained in Python", "How ML model was converted to be compatible with TensorFlow.js", "JavaScript Web Worker to run TensorFlow.js predict function"],
  "translations": ["如何在Python中训练ML模型", "ML模型如何转换为与TensorFlow.js兼容", "JavaScript Web Worker运行TensorFlow.js预测功能"]
}, {
  "tag": "P",
  "text": "I’m using ML model to predict sentiment for a hotel review. I found this excellent dataset on Kaggle — 515K Hotel Reviews Data in Europe. It provides 515K records for hotel reviews taken from Booking.com. Using this dataset I trained Keras model, converted it to be compatible with TensorFlow.js and then included into the client-side JS app. You can check how it works yourself, the app is deployed on Heroku — https://sentiment-tfjs-node.herokuapp.com/:",
  "translation": "我正在使用ML模型来预测酒店评论的人气。 我在Kaggle上找到了这个出色的数据集—欧洲的515K酒店评论数据。 它提供了515K记录，这些记录来自Booking.com。 使用此数据集，我训练了Keras模型，将其转换为与TensorFlow.js兼容，然后将其包含在客户端JS应用程序中。 您可以自行检查其运行方式，该应用程序已部署在Heroku上-https://sentiment-tfjs-node.herokuapp.com/："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*Nnxzh6pR9NsPky57v6_mFQ.png?q=20",
  "caption": "JS app with TensorFlow.js",
  "type": "image",
  "file": "1*Nnxzh6pR9NsPky57v6_mFQ.png"
}, {
  "tag": "P",
  "text": "Try typing Bed was comfy, you will get very low negativity score:",
  "translation": "尝试输入Bed很舒适，您的负面得分会非常低："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*wh-zcuCmqoKQ8OwvwVpsZg.png?q=20",
  "caption": "JS app with TensorFlow.js",
  "type": "image",
  "file": "1*wh-zcuCmqoKQ8OwvwVpsZg.png"
}, {
  "tag": "P",
  "text": "Then add — Very noisy outside, negativity score will increase to neutral sentiment:",
  "translation": "然后添加-外面非常嘈杂，否定性得分将提高至中性："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*tyJy6ZzYkH_fcA4SIyKWRg.png?q=20",
  "caption": "JS app with TensorFlow.js",
  "type": "image",
  "file": "1*tyJy6ZzYkH_fcA4SIyKWRg.png"
}, {
  "tag": "P",
  "text": "How ML model was trained in Python",
  "translation": "如何在Python中训练ML模型"
}, {
  "tag": "P",
  "text": "Text sentiment classification is implemented using approach explained in Zaid Alyafeai post — Sentiment Classification from Keras to the Browser. I will not go deep into an explanation of how to build text sentiment classification, you can read it in Zaid post.",
  "translation": "文本情感分类是使用Zaid Alyafeai文章“从Keras到浏览器的情感分类”中介绍的方法实现的。 我不会深入解释如何建立文本情感分类，您可以在Zaid文章中阅读它。"
}, {
  "tag": "P",
  "text": "To be able to train the model, I processed Hotel review dataset and extracted out of all attributes hotel review text and sentiment (0 — positive, 1 — negative). I was using a subset of data to train the model, to reduce training time. First 100k reviews were used by me:",
  "translation": "为了能够训练模型，我处理了酒店评论数据集并从所有属性中提取了酒店评论文本和情感（0表示肯定，1表示否定）。 我使用了一部分数据来训练模型，以减少训练时间。 我使用了前10万条评论："
}, {
  "tag": "PRE",
  "text": "df = pd.read_csv('hotel-reviews.csv', nrows=100000)df['REVIEW_TEXT'] = df['REVIEW_TEXT'].astype(str)print('Number of rows ', df.shape[0])",
  "translation": "df = pd.read_csv（'hotel-reviews.csv'，nrows = 100000）df ['REVIEW_TEXT'] = df ['REVIEW_TEXT']。astype（str）print（'行数'，df.shape [0] ）"
}, {
  "tag": "P",
  "text": "The model was trained in 5 epochs, using batch size = 128 (larger batch size allows faster training). The validation set was assigned with 20% of training data:",
  "translation": "使用批处理大小= 128（更大的批处理大小可以更快地进行训练）在5个时期内训练模型。 为验证集分配了20％的训练数据："
}, {
  "tag": "PRE",
  "text": "model.fit(np.array(X_train_tokens), np.array(Y_train),          validation_split=0.2, epochs=5, batch_size=128)",
  "translation": "model.fit（np.array（X_train_tokens），np.array（Y_train），validation_split = 0.2，epochs = 5，batch_size = 128）"
}, {
  "tag": "P",
  "text": "Model training was successful with high validation accuracy of 94%:",
  "translation": "模型训练成功，验证准确性高达94％："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*CNHmtSdrFbZ_ue42OwaPzg.png?q=20",
  "caption": "Model training results",
  "type": "image",
  "file": "1*CNHmtSdrFbZ_ue42OwaPzg.png"
}, {
  "tag": "P",
  "text": "When the model is trained — there are two more things to do. Create a dictionary file, it will be used to encode user sentences to be processed by client-side predict function. Save model with the optimizer, to be able to convert it to TensorFlow.js friendly representation.",
  "translation": "训练模型后，还有两件事要做。 创建一个字典文件，它将用于对要由客户端预测功能处理的用户句子进行编码。 使用优化器保存模型，以便能够将其转换为TensorFlow.js友好的表示形式。"
}, {
  "tag": "P",
  "text": "Make sure when saving model, the training process was done once (you was not running training multiple times, before saving it — or shutdown Python notebook and do new training from scratch) — otherwise something gets overloaded with the model in the saved file and model could not be reused by TensorFlow.js.",
  "translation": "确保在保存模型时，训练过程执行一次（在保存之前，您没有运行过多次训练-或关闭Python笔记本并从头开始进行新的训练）-否则，保存的文件和模型中的模型会过载 TensorFlow.js无法重用。"
}, {
  "tag": "P",
  "text": "How ML model was converted to be compatible with TensorFlow.js",
  "translation": "ML模型如何转换为与TensorFlow.js兼容"
}, {
  "tag": "P",
  "text": "Once the model is saved, convert it to TensorFlow.js format — as result two new files will be created (model bin file and JSON file with metadata):",
  "translation": "保存模型后，将其转换为TensorFlow.js格式-结果将创建两个新文件（模型bin文件和带有元数据的JSON文件）："
}, {
  "tag": "PRE",
  "text": "tensorflowjs_converter --input_format keras hotel-reviews-model.h5 tensorflowjs/",
  "translation": "tensorflowjs_converter --input_format keras酒店评论模型.h5 tensorflowjs /"
}, {
  "tag": "P",
  "text": "Read more here — Importing a Keras model into TensorFlow.js to get info on how to convert existing Keras model to TensorFlow.js and then load it into TensorFlow.js.",
  "translation": "在此处阅读更多信息—将Keras模型导入TensorFlow.js，以获取有关如何将现有Keras模型转换为TensorFlow.js，然后将其加载到TensorFlow.js中的信息。"
}, {
  "tag": "P",
  "text": "JavaScript Web Worker to run TensorFlow.js predict function",
  "translation": "JavaScript Web Worker运行TensorFlow.js预测功能"
}, {
  "tag": "P",
  "text": "Why do we need to use Web Worker for TensorFlow.js predict function call? Predict function call is not asynchronous, this means it blocks main JavaScript thread and user screen will be frozen until prediction completes. Sentiment analysis prediction takes several seconds and UI freezing would annoy users. Web Worker allows delegating a long-running task to separate JavaScript thread, without blocking the main thread.",
  "translation": "为什么我们需要使用Web Worker进行TensorFlow.js预测函数调用？ 预测函数调用不是异步的，这意味着它将阻止主JavaScript线程，并且用户屏幕将被冻结，直到预测完成。 情感分析预测需要几秒钟，UI冻结会惹恼用户。 Web Worker允许委派长时间运行的任务来分隔JavaScript线程，而不会阻塞主线程。"
}, {
  "tag": "P",
  "text": "JavaScript application is based on Oracle JET toolkit (collection of open source libraries — knockout.js, require.js, etc.). To run the sample app on your computer, execute these commands:",
  "translation": "JavaScript应用程序基于Oracle JET工具箱（开放源代码库的集合-敲门js，require.js等）。 要在您的计算机上运行示例应用程序，请执行以下命令："
}, {
  "tag": "OL",
  "texts": ["npm install -g @oracle/ojet-cli", "From app root folder run: ojet restore", "From app root folder run: ojet serve"],
  "translations": ["npm install -g @ oracle / ojet-cli", "从应用程序根文件夹运行：ojet restore", "从应用程序根文件夹运行：ojet服务"]
}, {
  "tag": "P",
  "text": "There is a function in appController.js, which is being called each time when the user stops typing text — call to predict sentiment is invoked. This function creates Web Worker (if such doesn’t exist) and sends user input to Web Worker (input is sent encoded and ready to be used for Tensor creation):",
  "translation": "appController.js中有一个函数，每次用户停止键入文本时都会调用该函数—调用以预测情感。 此函数创建Web Worker（如果不存在），并将用户输入发送给Web Worker（发送的输入已编码并可以用于创建Tensor）："
}, {
  "tag": "PRE",
  "text": "if (!worker) {  worker = new Worker(\"js/worker.js\");}worker.postMessage(seq);worker.onmessage = function (event) {  console.log('prediction: ' + event.data);  self.negativityScore(event.data);  self.sentiment(convertToSentiment(event.data));};",
  "translation": "if（！worker）{worker = new Worker（“ js / worker.js”）;} worker.postMessage（seq）; worker.onmessage =函数（事件）{console.log（'prediction：'+ event.data） ; self.negativityScore（event.data）; self.sentiment（convertToSentiment（event.data））;};"
}, {
  "tag": "P",
  "text": "The event listener is registered to handle return message (prediction) — it is pushed to UI through the knockout observable variable.",
  "translation": "已注册事件侦听器以处理返回消息（预测），并通过可剔除的可观察变量将其推送到UI。"
}, {
  "tag": "P",
  "text": "Web Worker is implemented in worker.js file. This file runs in its own context and you should reference TensorFlow.js library here implicitly. Make sure to set CPU backend, TensorFlow.js in Web Worker works only with CPU backend:",
  "translation": "Web Worker是在worker.js文件中实现的。 该文件在其自己的上下文中运行，您应该在此处隐式引用TensorFlow.js库。 确保设置CPU后端，Web Worker中的TensorFlow.js仅适用于CPU后端："
}, {
  "tag": "PRE",
  "text": "importScripts('https://cdn.jsdelivr.net/npm/setimmediate@1.0.5/setImmediate.min.js');importScripts('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.2.7/dist/tf.min.js');tf.setBackend('cpu');",
  "translation": "importScripts（'https://cdn.jsdelivr.net/npm/setimmediate@1.0.5/setImmediate.min.js'）; importScripts（'https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.2 .7 / dist / tf.min.js'）; tf.setBackend（'cpu'）;"
}, {
  "tag": "P",
  "text": "This is the main code (message listener in Web Worker) — where TensorFlow.js predict function is called (with user input converted to tensor) and the result is being returned back to the main thread through message:",
  "translation": "这是主要代码（Web Worker中的消息监听器）—调用了TensorFlow.js预测函数（用户输入转换为张量），结果通过消息返回到主线程："
}, {
  "tag": "PRE",
  "text": "onmessage = async function (event) {  console.log('executing worker');  seq = event.data;  if (!model) {    model = await createModel();  }  input = tf.tensor(seq);  input = input.expandDims(0);  predictOut = model.predict(input);  score = predictOut.dataSync()[0];  postMessage(score);  predictOut.dispose();};async function createModel() {  const model = await tf.loadLayersModel('ml/model.json')  return model}",
  "translation": "onmessage =异步功能（事件）{console.log（'executing worker'）; seq = event.data; 如果（！model）{模型=等待createModel（）; }输入= tf.tensor（seq）; 输入= input.expandDims（0）; 预测输出= model.predict（输入）; 分数= ForecastOut.dataSync（）[0]; postMessage（分数）; 预测函数（）;};异步函数createModel（）{const model = await tf.loadLayersModel（'ml / model.json'）返回模型}"
}, {
  "tag": "P",
  "text": "Resources:",
  "translation": "资源："
}, {
  "tag": "UL",
  "texts": ["Source code — GitHub", "Sample app live — https://sentiment-tfjs-node.herokuapp.com/"],
  "translations": ["源代码— GitHub", "实时应用程序示例-https://sentiment-tfjs-node.herokuapp.com/"]
}]