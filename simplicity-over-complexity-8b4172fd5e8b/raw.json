[{
  "tag": "H1",
  "text": "External Sources",
  "translation": "外部资源"
}, {
  "tag": "UL",
  "texts": ["Minimum viable product", "Pareto principle", "Occam’s razor", "Simplicity or Complexity?"],
  "translations": ["最低可行产品", "帕累托原理", "奥卡姆剃刀", "简单还是复杂？"]
}, {
  "tag": "H1",
  "text": "And Still, Simplicity Is Better",
  "translation": "而且，简单性更好"
}, {
  "tag": "P",
  "text": "And still, we need to know what the ideal is. We need to know what we are striving for so that we will know when we bend away from it so that we might know why we’ve bent away from it.",
  "translation": "而且，我们仍然需要知道理想是什么。 我们需要知道我们正在争取什么，以便我们知道何时弯曲它，以便我们知道为什么弯曲它。"
}, {
  "tag": "P",
  "text": "There is no magic solution; there is no three-step guide. Whether a good balance was struck between simplicity and complexity only becomes evident later on. Once made, the decision is often unchangeable or expensive to change.",
  "translation": "没有神奇的解决方案。 没有三步指南。 在简单性和复杂性之间是否达到了良好的平衡，只有在以后才能看到。 一旦做出决定，通常就无法更改或更改成本很高。"
}, {
  "tag": "P",
  "text": "But if we plan to continue working on some project for at least a bit longer, we should think of our future selves, who will have to live with this decision.",
  "translation": "但是，如果我们计划继续进行某个项目至少更长的时间，那么我们应该考虑我们自己的未来，他们将不得不接受这个决定。"
}, {
  "tag": "P",
  "text": "Is this feature really good in the long run?",
  "translation": "从长远来看，此功能真的很好吗？"
}, {
  "tag": "H1",
  "text": "Is Every Exception Evil?",
  "translation": "每个异常都是邪恶的吗？"
}, {
  "tag": "P",
  "text": "On the other hand, when we write our code, we want it to be used by real-life people in real-life problems. Now, show me one problem in nature that has a clean, easy solution with no exceptions! There are none. Life is complicated and so is code.",
  "translation": "另一方面，在编写代码时，我们希望现实生活中的人将其用于现实生活中的问题。 现在，向我展示自然界中的一个问题，它有一个干净，简单的解决方案，无一例外！ 没有了。 生活很复杂，代码也很复杂。"
}, {
  "tag": "P",
  "text": "It is only in theoretical settings that we can “ignore the air-resistance in this physics formula.”",
  "translation": "只有在理论上，我们才能“忽略此物理公式中的空气阻力”。"
}, {
  "tag": "H1",
  "text": "What Is a Good Reason to Increase Complexity?",
  "translation": "增加复杂性的充分理由是什么？"
}, {
  "tag": "P",
  "text": "On paper, all of the above seems logical. But it is also very vague. There is nothing even resembling an actual definition of either complexity or simplicity, nothing we can use as a rule of thumb to judge which feature is worth a month of effort, which six months, which just a day. And this is where the fog commences and the bickering becomes intense.",
  "translation": "在纸上，以上所有似乎都是合乎逻辑的。 但这也很模糊。 甚至没有什么类似于复杂性或简单性的实际定义，没有任何经验可以用来判断哪个功能值得一个月的努力，哪个六个月值得一天的努力。 这是开始起雾和争吵的地方。"
}, {
  "tag": "P",
  "text": "The real reason developers and managers don’t care for this guideline is that we don’t agree on the meaning of “simple.”",
  "translation": "开发人员和管理人员不喜欢该准则的真正原因是我们不同意“简单”的含义。"
}, {
  "tag": "P",
  "text": "If I’m at a meeting and our biggest customer convinces me they will leave our company if we don’t deliver X by the end of the quarter, then to me this will seem like an “our-company-is-on-the-line” insanely good reason to increase complexity.",
  "translation": "如果我正在开会，并且最大的客户说服我，如果我们在本季度末不交付X，他们将离开我们的公司，那么在我看来，这就像“我们的公司在 在线”是增加复杂性的疯狂理由。"
}, {
  "tag": "P",
  "text": "If, however, I am a new developer on the project, and I can see the software all scarred from botched passed projects, I might also be convinced that if we do not act now and start paying for our past misjudgments, then this project is doomed either way.",
  "translation": "但是，如果我是该项目的新开发人员，并且我可以看到该软件因拙劣的通过项目而备受打击，那么我也可以确信，如果我们现在不采取行动并开始为过去的错误判断付出代价，那么这个项目就是 无论哪种方式注定的失败。"
}, {
  "tag": "P",
  "text": "So what do we do?",
  "translation": "那么我们该怎么办？"
}, {
  "tag": "P",
  "text": "We plan ahead.",
  "translation": "我们提前计划。"
}, {
  "tag": "P",
  "text": "This situation might be unsolvable. The most efficient way to resolve it is to avoid it. We don’t want to be in the position where the complexity has grown so much that we are having difficulties maintaining this project.",
  "translation": "这种情况可能无法解决。 解决它的最有效方法是避免它。 我们不希望自己的位置变得如此复杂，以至于我们在维护该项目时遇到困难。"
}, {
  "tag": "P",
  "text": "As long as a project is simple, it is easy to add more people to it and, crucially, it is easy to remember all the scenarios we are covering."
}, {
  "tag": "P",
  "text": "The more complex a project is, the longer it takes for new people to help meaningfully. The project becomes more and more dependant on its original authors, the only ones who still know what complexity was added where and why. But the project also becomes more and more buggy because of forgotten features and flows. And as it becomes more buggy, it also uses flexibility. A significant number of bugs sooner or later become features. Users don’t know which functionalities were intended and which were not. They start relying on the broken functionality, and every change from here on is a broken promise.",
  "translation": "项目越复杂，新人们有意义地帮助所需的时间就越长。 该项目越来越依赖其原始作者，这是唯一仍然知道在何处以及为什么增加了复杂性的人。 但是由于忘记了功能和流程，该项目也变得越来越麻烦。 而且，随着越来越多的越野车出现，它还使用了灵活性。 迟早会有很多错误成为功能。 用户不知道要使用的功能，不知道要使用的功能。 他们开始依赖于已损坏的功能，从此以后的每项更改都是不可靠的承诺。"
}, {
  "tag": "P",
  "text": "Interestingly, teams sometimes use tests to alleviate this problem. Even if something was unintentional, as long as a test is asserting it, it will alarm us if we accidentally change the logic. But I would argue that this is a futile defense. Very few tests are properly read, understood, or maintained. Such tests are just like sending perpetual drunken border officers to the border. We see them, but we do not take them seriously.",
  "translation": "有趣的是，团队有时使用测试来缓解此问题。 即使是无意的事情，只要测试有效，只要我们不小心改变了逻辑，它就会警告我们。 但是我认为这是徒劳的。 正确阅读，理解或维护的测试很少。 这些测试就像派遣醉酒的边防人员到边境一样。 我们看到了它们，但我们并不认真对待它们。"
}, {
  "tag": "H1",
  "text": "How Complexity Influences a Project",
  "translation": "复杂性如何影响项目"
}, {
  "tag": "P",
  "text": "At the beginning of a project, there is no code, no specs. The future (the things we will have to create) is daunting, but the past (the things we did create) is simple. We’ve created nothing so far, and that was very simple; anybody could have done it 🙃.",
  "translation": "在项目开始时，没有代码，没有规范。 未来（我们将要创造的东西）令人生畏，但过去（我们确实创造的东西）很简单。 到目前为止，我们还没有创建任何东西，这很简单； 任何人都可以做到🙃。"
}, {
  "tag": "P",
  "text": "Now we need to create something. We can’t create everything at once; what should we start with?",
  "translation": "现在我们需要创建一些东西。 我们无法一次创建所有内容； 我们应该从什么开始呢？"
}, {
  "tag": "P",
  "text": "If we trust the booming startup scene, the pragmatic way is to start with an MVP. MVP stands for minimum viable product, a product with just enough features that it is useful, that it successfully completes its main task. The goal at this stage is to keep the costs of developing the project low until we have proof that we are developing the right features.",
  "translation": "如果我们相信蓬勃发展的启动场景，那么务实的方法是从MVP开始。 MVP代表最低限度可行的产品，该产品具有足够有用的功能，可以成功完成其主要任务。 此阶段的目标是保持开发项目的成本低廉，直到我们有证据证明我们正在开发正确的功能。"
}, {
  "tag": "P",
  "text": "The MVP principle is just different phrasing for “simple is better than complex.” The simplest solution that solves your problem should be used. Do not increase complexity (i.e., costs) until you have good reasons to.",
  "translation": "MVP原理只是“简单胜于复杂”的表述。应该使用能够解决问题的最简单解决方案。 在没有充分理由之前，不要增加复杂性（即成本）。"
}, {
  "tag": "P",
  "text": "A similar concept is present in the Pareto Principle, which is also called the 80/20 rule or the law of the vital few. The Pareto Principle states that for many events, roughly 80% of the effects come from 20% of the causes, i.e., 80% of bug reports are caused by 20% of bugs; 80% of the time, 20% of the features are used.",
  "translation": "帕累托原理中也存在类似的概念，也称为80/20法则或少数几个人的法则。 《帕累托原理》指出，在许多事件中，大约80％的影响来自20％的原因，即80％的错误报告是由20％的错误引起的； 80％的时间使用了20％的功能。"
}, {
  "tag": "P",
  "text": "The Pareto Principle originated in statistics, in economics, but has been applied to a wide range of topics. It supports our Simplicity over Complexity concept very well. Why bother supporting every conceivable workflow for our software if 80% of our customers use just 20% of the possible workflows?",
  "translation": "帕累托原理起源于统计学，经济学，但已应用于广泛的主题。 它很好地支持了我们的“简单性而不是复杂性”概念。 如果80％的客户仅使用20％的可能工作流程，为什么还要麻烦地为我们的软件支持所有可能的工作流程？"
}, {
  "tag": "P",
  "text": "Thus, to determine which features to develop first, we must be picky. Everything we build, we will also have to support for some time. Everything we add to our software will have a cost of maintenance and will influence how and at what cost we can build other, completely unrelated, new things.",
  "translation": "因此，要确定首先开发哪些功能，我们必须保持谨慎。 我们构建的所有内容都将需要一段时间的支持。 我们添加到软件中的所有内容都会产生维护成本，并且会影响我们构建其他完全无关的新事物的方式和成本。"
}, {
  "tag": "H1",
  "text": "So What Does “Simple Is Better Than Complex” Even Mean?",
  "translation": "那么“简单胜于复杂”到底意味着什么？"
}, {
  "tag": "P",
  "text": "This guideline wants you to gravitate towards simpler solutions. You are meant to ask yourself often: Could you simplify your code and still achieve the same result? Could you simplify the design and still achieve the same goal?",
  "translation": "本指南希望您倾向于使用更简单的解决方案。 您应该经常问自己：您是否可以简化代码并仍然达到相同的结果？ 您可以简化设计并仍然达到相同的目标吗？"
}, {
  "tag": "P",
  "text": "It can be small things like: Are you overusing powerful language structures? Do you benefit from using a try- except statement, or does a simple if statement fit into your flow better?",
  "translation": "可能是一些小事情，例如：您是否过度使用了强大的语言结构？ 您将从try-except语句中受益，还是简单的if语句更适合您的流程？"
}, {
  "tag": "P",
  "text": "Or it can be larger things like: Should you really support 20 different scenarios, or can you achieve a comparable user experience by providing just the most common three?",
  "translation": "或者可能是更大的事情：您是否应该真正支持20种不同的方案，还是仅提供最常见的三种方案就可以实现可比的用户体验？"
}, {
  "tag": "P",
  "text": "This guideline coaxes you to be vigilant about complexity and to demand good reasons for increasing it.",
  "translation": "该指南促使您对复杂性保持警惕，并要求增加它的充分理由。"
}, {
  "tag": "H1",
  "text": "Simplicity Over Complexity!",
  "translation": "简单而不是复杂！"
}, {
  "tag": "H2",
  "text": "Or is it the other way around?",
  "translation": "或者是周围的其他方式？"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*axRvj6wF1-L28insQaqjuA.jpeg?q=20",
  "type": "image",
  "file": "1*axRvj6wF1-L28insQaqjuA.jpeg"
}, {
  "tag": "P",
  "text": "Today, I came to two realizations, both of them surprising and both of them essential. During an innocuous debate about code review, I suddenly discovered that only a few basic ideas underlie all of my coding-related decisions. One of them is: Simple is better than complex. And about three seconds later, I realized that this is neither a well-known mantra nor one that can be quickly explained. It’s a conviction that you grow into. But without having to wait for a few years, how do I explain it to my teammate?",
  "translation": "今天，我得出了两个认识，它们都令人惊讶，而且都至关重要。 在关于代码审查的无害辩论中，我突然发现，只有很少的基本思想是我所有与编码有关的决定的基础。 其中之一是：简单胜于复杂。 大约三秒钟后，我意识到这既不是众所周知的口头禅，也不是可以快速解释的口头禅。 坚定了自己的信念。 但是不必等待几年，我如何向队友解释呢？"
}, {
  "tag": "P",
  "text": "To me, “simplicity over complexity” is a pragmatic answer to questions of many flavors, a simple Occam’s razor. It gives me two benefits:",
  "translation": "对我而言，“简单而不是复杂”是对多种口味的实用答案，这是一把简单的Occam剃刀。 它给了我两个好处："
}, {
  "tag": "UL",
  "texts": ["It lets me separate a problem into the part that I need to solve now and the part I can postpone.", "It gives me confidence in my decision because it is backed up by so many other theorems, principles, rules, and guidelines."],
  "translations": ["它使我可以将问题分为现在需要解决的部分和可以推迟的部分。", "它使我对自己的决定充满信心，因为它得到了许多其他定理，原则，规则和准则的支持。"]
}, {
  "tag": "PRE",
  "text": "(本文翻译自Ines Panker的文章《Simplicity Over Complexity!》，参考：https://medium.com/better-programming/simplicity-over-complexity-8b4172fd5e8b)",
  "translation": "（本文翻译自Ines Panker的文章，《简单性胜于复杂性！》，参考：https：//medium.com/better-programming/simplicity-over-complexity-8b4172fd5e8b）"
}]