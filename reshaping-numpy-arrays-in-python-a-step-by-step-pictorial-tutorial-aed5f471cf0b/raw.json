[{
  "tag": "H2",
  "text": "Cheatsheet and tutorial for numpy reshape and stack",
  "translation": "numpy重塑和堆栈的备忘单和教程"
}, {
  "tag": "H1",
  "text": "Reshaping numpy arrays in Python — a step-by-step pictorial tutorial",
  "translation": "在Python中重塑numpy数组—分步教程"
}, {
  "tag": "H2",
  "text": "This tutorial and cheatsheet provide visualizations to help you understand how numpy reshapes multidimensional arrays.",
  "translation": "本教程和备忘单提供可视化帮助您了解numpy如何重塑多维数组。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*lFZzE9PgKTRR8jlFI4EUtw.png?q=20",
  "caption": "Cheatsheet for Python numpy reshape, stack, and flatten (created by Hause Lin and available here)",
  "type": "image",
  "file": "1*lFZzE9PgKTRR8jlFI4EUtw.png"
}, {
  "tag": "P",
  "text": "How does the numpy reshape() method reshape arrays? Have you been confused or have you struggled understanding how it works? This tutorial will walk you through reshaping in numpy. If you want a pdf copy of the cheatsheet above, you can download it here.",
  "translation": "numpy reshape（）方法如何重整数组？ 您是否感到困惑或难以理解其工作原理？ 本教程将引导您逐步重塑numpy。 如果您需要上述备忘单的pdf副本，则可以在此处下载。"
}, {
  "tag": "H1",
  "text": "Create a Python numpy array",
  "translation": "创建一个Python numpy数组"
}, {
  "tag": "P",
  "text": "Use np.arange() to generate a numpy array containing a sequence of numbers from 1 to 12. See documentation here.",
  "translation": "使用np.arange（）生成一个numpy数组，其中包含从1到12的数字序列。请参见此处的文档。"
}, {
  "tag": "PRE",
  "text": "import numpy as npa1 = np.arange(1, 13)  # numbers 1 to 12print(a1.shape)> (12,)print(a1)> [ 1  2  3  4  5  6  7  8  9 10 11 12]",
  "translation": "import numpy as npa1 = np.arange（1，13）＃数字1到12print（a1.shape）>（12，）print（a1）> [1 2 3 4 5 6 7 8 9 10 11 12]"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*16lfH-A_kiDmyxe1Sm2dQA.png?q=20",
  "type": "image",
  "file": "1*16lfH-A_kiDmyxe1Sm2dQA.png"
}, {
  "tag": "H1",
  "text": "Reshape with reshape() method",
  "translation": "使用reshape（）方法重塑"
}, {
  "tag": "P",
  "text": "Use reshape() method to reshape our a1 array to a 3 by 4 dimensional array. Let’s use 3_4 to refer to it dimensions: 3 is the 0th dimension (axis) and 4 is the 1st dimension (axis) (note that Python indexing begins at 0). See documentation here.",
  "translation": "使用reshape（）方法将a1数组整形为3 x 4维数组。 让我们使用3_4来表示它的尺寸：3是第0个尺寸（轴），4是第1个尺寸（轴）（请注意，Python索引从0开始）。 请参阅此处的文档。"
}, {
  "tag": "PRE",
  "text": "a1_2d = a1.reshape(3, 4)  # 3_4print(a1_2d.shape)> (3, 4)print(a1_2d)> [[ 1  2  3  4]   [ 5  6  7  8]   [ 9 10 11 12]]"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*b0Eh1M1w4d9gKIhN8Fdjcg.png?q=20",
  "type": "image",
  "file": "1*b0Eh1M1w4d9gKIhN8Fdjcg.png"
}, {
  "tag": "P",
  "text": "If you want numpy to automatically determine what size/length a particular dimension should be, specify the dimension as -1 for that dimension.",
  "translation": "如果希望numpy自动确定特定尺寸应为多少尺寸/长度，请将该尺寸指定为-1。"
}, {
  "tag": "PRE",
  "text": "a1.reshape(3, 4)a1.reshape(-1, 4)  # same as above: a1.reshape(3, 4)a1.reshape(3, 4)a1.reshape(3, -1)  # same as above: a1.reshape(3, 4)a1.reshape(2, 6)a1.reshape(2, -1)  # same as above: a1.reshape(2, 6)",
  "translation": "a1.reshape（3，4）a1.reshape（-1，4）＃与上面相同：a1.reshape（3，4）a1.reshape（3，4）a1.reshape（3，-1）＃与 上面：a1.reshape（3，4）a1.reshape（2，6）a1.reshape（2，-1）＃与上面相同：a1.reshape（2，6）"
}, {
  "tag": "H1",
  "text": "Reshape along different dimensions",
  "translation": "沿不同尺寸重塑"
}, {
  "tag": "P",
  "text": "By default, reshape() reshapes the array along the 0th dimension (row). This behavior can be changed via the order parameter (default value is 'C'). See documentation for more information.",
  "translation": "默认情况下，reshape（）沿第0维（行）对数组进行整形。 可以通过命令参数更改此行为（默认值为“ C”）。 请参阅文档以获取更多信息。"
}, {
  "tag": "PRE",
  "text": "a1.reshape(3, 4) # reshapes or ‘fills in’ row by rowa1.reshape(3, 4, order='C') # same results as above",
  "translation": "a1.reshape（3，4）＃按行调整形状或“填充” rowa1.reshape（3，4，order ='C'）＃与上述结果相同"
}, {
  "tag": "P",
  "text": "We can reshape along the 1st dimension (column) by changing order to 'F'. For those familiar with MATLAB, MATLAB uses this order.",
  "translation": "通过将顺序更改为“ F”，我们可以沿第一维（列）重塑形状。 对于熟悉MATLAB的人，MATLAB使用此顺序。"
}, {
  "tag": "PRE",
  "text": "a1.reshape(3, 4, order='F')  # reshapes column by column> [[ 1  4  7 10]   [ 2  5  8 11]   [ 3  6  9 12]]",
  "translation": "a1.reshape（3，4，order ='F'）＃逐列整形> [[1 4 7 10] [2 5 8 11] [3 6 9 12]]"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*l71wfwjDZ9WpUHAfdcVrYA.png?q=20",
  "type": "image",
  "file": "1*l71wfwjDZ9WpUHAfdcVrYA.png"
}, {
  "tag": "P",
  "text": "Test: What’s the dimension/shape of array a1?",
  "translation": "测试：阵列a1的尺寸/形状是什么？"
}, {
  "tag": "P",
  "text": "a1 is a 1D array — it has only 1 dimension, even though you might think it’s dimension should be 1_12 (1 row by 12 columns). To convert to a 1_12 array, use reshape().",
  "translation": "a1是一维数组-仅具有1个维度，即使您可能认为其维度应为1_12（1行12列）。 要转换为1_12数组，请使用reshape（）。"
}, {
  "tag": "PRE",
  "text": "print(a1)  # what's the shape?> [ 1  2  3  4  5  6  7  8  9 10 11 12]print(a1.shape)> (12,)a1_1_by_12 = a1.reshape(1, -1)  # reshape to 1_12print(a1_1_by_12)  # note the double square brackets!> [[ 1  2  3  4  5  6  7  8  9 10 11 12]]print(a1_1_by_12.shape)  # 1_12 array> (1, 12)",
  "translation": "print（a1）＃是什么形状？> [1 2 3 4 5 6 7 8 9 10 11 12] print（a1.shape）>（12，）a1_1_by_12 = a1.reshape（1，-1）＃重塑为1_12print （a1_1_by_12）＃注意双方括号！> [[1 2 3 4 5 6 7 8 9 10 11 12]] print（a1_1_by_12.shape）＃1_12数组>（1，12）"
}, {
  "tag": "H1",
  "text": "Flatten/ravel to 1D arrays with ravel()",
  "translation": "使用ravel（）展平/拖曳到一维数组"
}, {
  "tag": "P",
  "text": "The ravel() method lets you convert multi-dimensional arrays to 1D arrays (see docs here). Our 2D array (3_4) will be flattened or raveled such that they become a 1D array with 12 elements.",
  "translation": "使用ravel（）方法可以将多维数组转换为一维数组（请参见此处的文档）。 我们的2D数组（3_4）将被展平或拉平，使其成为具有12个元素的1D数组。"
}, {
  "tag": "P",
  "text": "If you don’t specify any parameters, ravel()will flatten/ravel our 2D array along the rows (0th dimension/axis). That is, row 0 [1, 2, 3, 4] + row 1 [5, 6, 7, 8] + row 2 [9, 10, 11, 12].",
  "translation": "如果您未指定任何参数，则ravel（）将沿行（第0维/轴）展平/散列我们的2D数组。 即，第0行[1、2、3、4] +第1行[5、6、7、8] +第2行[9、10、11、12]。"
}, {
  "tag": "P",
  "text": "If you want to flatten/ravel along the columns (1st dimension), use the order parameter.",
  "translation": "如果要沿列（第1维）展平/滚动，请使用order参数。"
}, {
  "tag": "PRE",
  "text": "print(a1_2d)  # 3_4> [[ 1  2  3  4]   [ 5  6  7  8]   [ 9 10 11 12]]print(a1_2d.ravel())  # ravel by row (default order='C')> [ 1  2  3  4  5  6  7  8  9 10 11 12]print(a1_2d.ravel(order='F'))  # ravel by column> [ 1  5  9  2  6 10  3  7 11  4  8 12]",
  "translation": "print（a1_2d）＃3_4> [[1 2 3 4] [5 6 7 8] [9 10 11 12]] print（a1_2d.ravel（））＃按行排列（默认顺序为'C'）> [1 2 3 4 5 6 7 8 9 10 11 12] print（a1_2d.ravel（order ='F'））＃逐列扫描> [1 5 9 2 6 10 3 7 11 4 8 12]"
}, {
  "tag": "H1",
  "text": "Concatenate/stack arrays with np.stack() and np.hstack()",
  "translation": "使用np.stack（）和np.hstack（）连接/堆栈数组"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*i5yqTKWOY7Iyl6AD-62u8Q.png?q=20",
  "type": "image",
  "file": "1*i5yqTKWOY7Iyl6AD-62u8Q.png"
}, {
  "tag": "P",
  "text": "Create two 1D arrays",
  "translation": "创建两个一维数组"
}, {
  "tag": "PRE",
  "text": "a1 = np.arange(1, 13)print(a1)> [ 1  2  3  4  5  6  7  8  9 10 11 12]a2 = np.arange(13, 25)print(a2)> [13 14 15 16 17 18 19 20 21 22 23 24]",
  "translation": "a1 = np.arange（1，13）print（a1）> [1 2 3 4 5 6 7 8 9 10 11 12] a2 = np.arange（13，25）print（a2）> [13 14 15 16 17 18 19 20 21 22 23 24]"
}, {
  "tag": "P",
  "text": "Use np.stack()to concatenate/stack arrays. By default, np.stack() stacks arrays along the 0th dimension (rows) (parameter axis=0). See docs for more info.",
  "translation": "使用np.stack（）连接/堆栈数组。 默认情况下，np.stack（）沿第0维（行）（参数轴= 0）堆叠数组。 有关更多信息，请参阅文档。"
}, {
  "tag": "PRE",
  "text": "stack0 = np.stack((a1, a1, a2, a2))  # default stack along 0th axisprint(stack0.shape)> (4, 12)print(stack0)> [[ 1  2  3  4  5  6  7  8  9 10 11 12]   [ 1  2  3  4  5  6  7  8  9 10 11 12]   [13 14 15 16 17 18 19 20 21 22 23 24]   [13 14 15 16 17 18 19 20 21 22 23 24]]",
  "translation": "stack0 = np.stack（（a1，a1，a2，a2））＃沿第0轴的默认堆栈print（stack0.shape）>（4，12）print（stack0）> [[1 2 3 4 5 6 7 8 9 10 11 12] [1 2 3 4 5 6 7 8 9 10 11 12] [13 14 15 16 17 18 19 20 21 22 23 24] [13 14 15 16 17 18 19 20 21 22 23 24]]"
}, {
  "tag": "P",
  "text": "Stack along the 1st dimension (axis=1)",
  "translation": "沿第一维堆叠（轴= 1）"
}, {
  "tag": "PRE",
  "text": "stack1 = np.stack((a1, a1, a2, a2), axis=1)print(stack1.shape)> (12, 4)print(stack1)> [[ 1  1 13 13]   [ 2  2 14 14]   [ 3  3 15 15]   [ 4  4 16 16]   [ 5  5 17 17]   [ 6  6 18 18]   [ 7  7 19 19]   [ 8  8 20 20]   [ 9  9 21 21]   [10 10 22 22]   [11 11 23 23]   [12 12 24 24]]",
  "translation": "stack1 = np.stack（（a1，a1，a2，a2），轴= 1）print（stack1.shape）>（12，4）print（stack1）> [[1 1 13 13] [2 2 14 14] [3 3 15 15] [4 4 16 16] [5 5 17 17] [6 6 18 18] [7 7 19 19] [8 8 20 20] [9 9 21 21] [10 10 22 22] [11 11 23 23] [12 12 24 24]"
}, {
  "tag": "P",
  "text": "Concatenate as a long 1D array with np.hstack() (stack horizontally)",
  "translation": "用np.hstack（）连接为长的一维数组（水平堆栈）"
}, {
  "tag": "PRE",
  "text": "stack_long = np.hstack((a1, a2))print(stack_long.shape)> (24,)print(stack_long)> [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]",
  "translation": "stack_long = np.hstack（（a1，a2））print（stack_long.shape）>（24，）print（stack_long）> [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]"
}, {
  "tag": "H1",
  "text": "Create multi-dimensional array (3D)",
  "translation": "创建多维数组（3D）"
}, {
  "tag": "P",
  "text": "Multi-dimensional arrays are very common and are known as tensors. They’re used a lot in deep learning and neural networks. If you’re into deep learning, you’ll be reshaping tensors or multi-dimensional arrays regularly.",
  "translation": "多维数组非常常见，称为张量。 它们在深度学习和神经网络中使用很多。 如果您要进行深度学习，则将定期重整张量或多维数组。"
}, {
  "tag": "P",
  "text": "Let’s begin by first create two different 3 by 4 arrays. We’ll combine them to form a 3D array later.",
  "translation": "首先，我们创建两个不同的3 x 4数组。 稍后，我们将它们组合成一个3D阵列。"
}, {
  "tag": "PRE",
  "text": "a1 = np.arange(1, 13).reshape(3, -1)  # 3_4a2 = np.arange(13, 25).reshape(3, -1)  # 3_4print(a1)> [[ 1  2  3  4]   [ 5  6  7  8]   [ 9 10 11 12]]print(a2)> [[13 14 15 16]   [17 18 19 20]   [21 22 23 24]]",
  "translation": "a1 = np.arange（1，13）.reshape（3，-1）＃3_4a2 = np.arange（13，25）.reshape（3，-1）＃3_4print（a1）> [[1 2 3 4] [5 6 7 8] [9 10 11 12]] print（a2）> [[13 14 15 16] [17 18 19 20] [21 22 23 24]]"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*EVIjyfn0WRb8hchQVoL9nA.png?q=20",
  "type": "image",
  "file": "1*EVIjyfn0WRb8hchQVoL9nA.png"
}, {
  "tag": "H1",
  "text": "Create a 3D array by stacking the arrays along different axes/dimensions",
  "translation": "通过沿不同的轴/维度堆叠数组来创建3D数组"
}, {
  "tag": "PRE",
  "text": "a3_0 = np.stack((a1, a2))  # default axis=0 (dimension 0)a3_1 = np.stack((a1, a2), axis=1)  # along dimension 1a3_2 = np.stack((a1, a2), axis=2)  # along dimension 2print(a3_0.shape)> (2, 3, 4)print(a3_1.shape)> (3, 2, 4)print(a3_2.shape)> (3, 4, 2)",
  "translation": "a3_0 = np.stack（（a1，a2））＃默认轴= 0（维度0）a3_1 = np.stack（（a1，a2），axis = 1）＃沿维度1a3_2 = np.stack（（a1，a2 ），axis = 2）＃沿着维度2print（a3_0.shape）>（2，3，4）print（a3_1.shape）>（3，2，4）print（a3_2.shape）>（3，4，2 ）"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*lFzT2UEpHRdSle9OxzFFyQ.png?q=20",
  "type": "image",
  "file": "1*lFzT2UEpHRdSle9OxzFFyQ.png"
}, {
  "tag": "P",
  "text": "Let’s print the arrays to see how they look like. See the figure above for visualizations.",
  "translation": "让我们打印数组以查看它们的外观。 有关可视化的信息，请参见上图。"
}, {
  "tag": "PRE",
  "text": "print(a3_0)> [[[ 1  2  3  4]    [ 5  6  7  8]    [ 9 10 11 12]]   [[13 14 15 16]    [17 18 19 20]    [21 22 23 24]]]print(a3_1)> [[[ 1  2  3  4]    [13 14 15 16]]   [[ 5  6  7  8]    [17 18 19 20]]   [[ 9 10 11 12]    [21 22 23 24]]]print(a3_2)> [[[ 1 13]    [ 2 14]    [ 3 15]    [ 4 16]]   [[ 5 17]    [ 6 18]    [ 7 19]    [ 8 20]]   [[ 9 21]    [10 22]    [11 23]    [12 24]]]",
  "translation": "打印（a3_0）> [[[1 2 3 4] [5 6 7 8] [9 10 11 12]] [[13 14 15 16] [17 18 19 20] [21 22 23 24]]]打印（a3_1 ）> [[[1 2 3 4] [13 14 15 16]] [[5 6 7 8] [17 18 19 20]] [[9 10 11 12] [21 22 23 24]]] print（a3_2） > [[[1 13] [2 14] [3 15] [4 16]] [[5 17] [6 18] [7 19] [8 20]] [[9 21] [10 22] [11 23 ] [12 24]]"
}, {
  "tag": "P",
  "text": "Because the three 3D arrays have been created by stacking two arrays along different dimensions, if we want to retrieve the original two arrays from these 3D arrays, we’ll have to subset along the correct dimension/axis.",
  "translation": "由于这三个3D数组是通过沿不同维度堆叠两个数组而创建的，因此，如果我们要从这些3D数组中检索原始的两个数组，则必须沿正确的维度/轴进行子集化。"
}, {
  "tag": "P",
  "text": "Test: How can we retrieve our a1 array from these 3D arrays?",
  "translation": "测试：我们如何从这些3D数组中检索a1数组？"
}, {
  "tag": "PRE",
  "text": "print(a1)  # check what's a1> [[ 1  2  3  4]   [ 5  6  7  8]   [ 9 10 11 12]]# solutionsa3_0[0, :, :]a3_0[0]  # same as abovea3_1[:, 0, :]a3_2[:, :, 0]",
  "translation": "print（a1）＃检查什么是a1> [[1 2 3 4] [5 6 7 8] [9 10 11 12]]＃solutionsa3_0 [0，：，：] a3_0 [0]＃与上述a3_1 [:, 0相同 ，：] a3_2 [:,：，0]"
}, {
  "tag": "H1",
  "text": "Flatten multidimensional arrays",
  "translation": "展平多维数组"
}, {
  "tag": "P",
  "text": "We can also flatten multi-dimensional arrays with ravel(). Below, we ravel row by row (default order='C') to 1D array.",
  "translation": "我们还可以使用ravel（）展平多维数组。 下面，我们逐行浏览（默认顺序为“ C”）到一维数组。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/30/1*2gr2mIweIusX1IPrMEz6jQ.png?q=20",
  "type": "image",
  "file": "1*2gr2mIweIusX1IPrMEz6jQ.png"
}, {
  "tag": "PRE",
  "text": "print(a3_0)> [[[ 1  2  3  4]    [ 5  6  7  8]    [ 9 10 11 12]]   [[13 14 15 16]    [17 18 19 20]    [21 22 23 24]]]print(a3_0.ravel())> [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]",
  "translation": "print（a3_0）> [[[1 2 3 4] [5 6 7 8] [9 10 11 12]] [[13 14 15 16] [17 18 19 20] [21 22 23 24]]] print（a3_0 .ravel（））> [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]"
}, {
  "tag": "P",
  "text": "Ravel column by column (order='F') to 1D array",
  "translation": "逐列划定（order ='F'）到一维数组"
}, {
  "tag": "PRE",
  "text": "print(a3_0.ravel(order='F'))> [ 1 13  5 17  9 21  2 14  6 18 10 22  3 15  7 19 11 23  4 16  8 20 12 24]",
  "translation": "print（a3_0.ravel（order ='F'））>> [1 13 5 17 9 21 2 14 6 18 10 22 3 15 7 19 11 23 4 16 8 20 12 24]"
}, {
  "tag": "H1",
  "text": "Reshape multidimensional arrays",
  "translation": "重塑多维数组"
}, {
  "tag": "P",
  "text": "We can also use reshape() to reshape multi-dimensional arrays.",
  "translation": "我们还可以使用reshape（）重塑多维数组。"
}, {
  "tag": "PRE",
  "text": "# reshape row by row (default order=C) to 2D arrayprint(a3_0)  # 2_3_4> [[[ 1  2  3  4]    [ 5  6  7  8]    [ 9 10 11 12]]   [[13 14 15 16]    [17 18 19 20]    [21 22 23 24]]]print(a3_0.reshape(4, -1))  # reshape to 4_6 (row by row)> [[ 1  2  3  4  5  6]   [ 7  8  9 10 11 12]   [13 14 15 16 17 18]   [19 20 21 22 23 24]]print(a3_0.reshape(4, -1, order='F'))  # reshape (column by column)> [[ 1  9  6  3 11  8]   [13 21 18 15 23 20]   [ 5  2 10  7  4 12]   [17 14 22 19 16 24]]print(a3_0.reshape(4, 2, 3))  # reshape to 4_2_3 (row by row)> [[[ 1  2  3]    [ 4  5  6]]   [[ 7  8  9]    [10 11 12]]   [[13 14 15]    [16 17 18]]   [[19 20 21]    [22 23 24]]]",
  "translation": "＃将每一行（默认顺序为C）整形为2D arrayprint（a3_0）＃2_3_4> [[[1 2 3 4] [5 6 7 8] [9 10 11 12]] [[13 14 15 16] [17 18 19 20] [21 22 23 24]]] print（a3_0.reshape（4，-1））＃重塑为4_6（逐行）> [[1 2 3 4 5 6] [7 8 9 10 11 12 ] [13 14 15 16 17 18] [19 20 21 22 23 24]] print（a3_0.reshape（4，-1，order ='F'））＃reshape（按列划分）> [[1 9 6 3 11 8] [13 21 18 15 23 20] [5 2 10 7 4 12] [17 14 22 19 16 24]] print（a3_0.reshape（4，2，3））＃重塑为4_2_3（逐行） > [[[1 2 3] [4 5 6]] [[7 8 9] [10 11 12]] [[13 14 15] [16 17 18]] [[19 20 21] [22 23 24]] ]"
}, {
  "tag": "H1",
  "text": "Final remarks",
  "translation": "结束语"
}, {
  "tag": "P",
  "text": "I hope now you have a better understanding of how numpy reshapes multi-dimensional arrays. I look forward to your thoughts and comments. Also, check out this visual introduction to numpy and data representation.",
  "translation": "我希望您现在对numpy如何重塑多维数组有了更好的了解。 我期待您的想法和评论。 另外，请查看有关numpy和数据表示的直观介绍。"
}, {
  "tag": "P",
  "text": "If you want a pdf copy of the cheatsheet above, you can download it here. If you find this post useful, follow me and visit my site for more data science tutorials.",
  "translation": "如果您需要上述备忘单的pdf副本，则可以在此处下载。 如果您觉得这篇文章有用，请关注我并访问我的网站以获取更多数据科学教程。"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Hause的文章《Reshaping numpy arrays in Python — a step-by-step pictorial tutorial》，参考：https://towardsdatascience.com/reshaping-numpy-arrays-in-python-a-step-by-step-pictorial-tutorial-aed5f471cf0b)",
  "translation": "（本文翻译自Hause的文章《在Python中重塑numpy数组-分步绘画教程》，参考：https：//towardsdatascience.com/reshaping-numpy-arrays-in-python-a-step-by- step-pictorial-tutorial-aed5f471cf0b）"
}]