[{
  "tag": "H1",
  "text": "Know Kubernetes — Pictorially",
  "translation": "了解Kubernetes —以图片方式"
}, {
  "tag": "P",
  "text": "Recently, I started my Kubernetes journey and wanted to understand its internals better. I did a talk on these lines and here is the blog version of it",
  "translation": "最近，我开始了Kubernetes之旅，希望更好地了解其内部。 我在这些方面做了一个演讲，这是它的博客版本"
}, {
  "tag": "H1",
  "text": "Container",
  "translation": "容器"
}, {
  "tag": "P",
  "text": "Before we try to understand Kubernetes, Let us spend little time on clarifying what a container is, and why they are so popular. After all, there is no point in talking about containers orchestrator (Kubernetes) without knowing what a container is :)",
  "translation": "在我们尝试了解Kubernetes之前，让我们花一点时间来澄清什么是容器以及它们为什么如此受欢迎。 毕竟，在不知道容器是什么的情况下谈论容器编排器（Kubernetes）毫无意义。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*lus49PaFI90rVMd23fV86A.png?q=20",
  "caption": "Container",
  "type": "image",
  "file": "1*lus49PaFI90rVMd23fV86A.png"
}, {
  "tag": "P",
  "text": "A “container” is… a container to hold all the stuff you put in. Duh!",
  "translation": "“容器”是……一个用来存放您放入的所有物品的容器。"
}, {
  "tag": "P",
  "text": "Stuff like your application code, dependent libraries, and its dependencies all the way up to the kernel. The key concept here is isolation. Isolate all your stuff from the rest so that you have better control of them. There are three types of isolation provided by containers",
  "translation": "像应用程序代码，依赖库以及它的依赖关系一直到内核。 这里的关键概念是隔离。 将所有内容与其余内容隔离开，以便您更好地控制它们。 容器提供三种隔离类型"
}, {
  "tag": "UL",
  "texts": ["Workspace isolation (Process, Network)", "Resource isolation (CPU, Memory)", "File system isolation (Union File System)"],
  "translations": ["工作区隔离（流程，网络）", "资源隔离（CPU，内存）", "文件系统隔离（联合文件系统）"]
}, {
  "tag": "P",
  "text": "Think of containers like VMs on diet. They are lean, fast (to startup) and small. And, all this was not built ground up. Instead, they used the constructs (like cgroups, namespaces) present in linux system to build a nice abstraction over it",
  "translation": "考虑一下像VM一样的容器。 它们精简，快速（启动）且体积小。 而且，所有这些都没有建立起来。 取而代之的是，他们使用linux系统中存在的构造（例如cgroups，名称空间）在其上构建了一个不错的抽象"
}, {
  "tag": "P",
  "text": "Now we know what containers are, It is easy to understand why they are very popular. Instead of just shipping only your application binary / code, It is possible to ship the whole environment needed to run your application in a practical way as containers can be built as very small units. A perfect fix for “It works in my machine” issue",
  "translation": "现在我们知道什么是容器了，很容易理解为什么它们很受欢迎。 不仅可以仅分发应用程序二进制/代码，还可以以实用的方式交付运行应用程序所需的整个环境，因为可以将容器构建为非常小的单元。 解决“在我的机器上工作”问题的完美解决方案"
}, {
  "tag": "H1",
  "text": "When to use Kubernetes?",
  "translation": "什么时候使用Kubernetes？"
}, {
  "tag": "P",
  "text": "All is well with containers and software developers life is much better now. Then why do we need another piece of technology, a container orchestrator like Kubernetes?",
  "translation": "容器一切都很好，软件开发人员的生活现在要好得多。 那么，为什么我们需要另一项技术，如Kubernetes这样的容器协调器呢？"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*QDhBk9xFa77T4n3-5lHIsg.png?q=20",
  "type": "image",
  "file": "1*QDhBk9xFa77T4n3-5lHIsg.png"
}, {
  "tag": "P",
  "text": "You need it when you get to this state, where there are too many containers to manage",
  "translation": "进入此状态时，需要用到太多容器来管理"
}, {
  "tag": "P",
  "text": "Q: Where is my front end container, how many of them am I running?A: Hard to tell. Use a container orchestrator",
  "translation": "问：我的前端容器在哪里，我要在其中运行多少个容器？ 使用容器协调器"
}, {
  "tag": "P",
  "text": "Q: How will I make my front end containers to talk to newly created backend containers?A: Hardcode the IPs. Or, Use a container orchestrator",
  "translation": "问：如何使前端容器与新创建的后端容器对话？答：对IP进行硬编码。 或者，使用容器协调器"
}, {
  "tag": "P",
  "text": "Q: How will I do rolling upgrades?A: Manually hand holding in each step. Or, Use a container orchestrator",
  "translation": "问：如何进行滚动升级？答：在每个步骤中手动握住。 或者，使用容器协调器"
}, {
  "tag": "H1",
  "text": "Why I prefer Kubernetes",
  "translation": "为什么我更喜欢Kubernetes"
}, {
  "tag": "P",
  "text": "There are multiple orchestrators like docker swarm, Mesos and Kubernetes. My choice is Kubernetes (and hence this article) because Kubernetes is …",
  "translation": "有多个编排器，例如docker swarm，Mesos和Kubernetes。 我的选择是Kubernetes（因此是本文），因为Kubernetes是……"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*eHVk7p4I2LuSnVwvYaHbyw.png?q=20",
  "type": "image",
  "file": "1*eHVk7p4I2LuSnVwvYaHbyw.png"
}, {
  "tag": "P",
  "text": "… like lego blocks. It not only has the components needed to run a container orchestrator at scale, but also has the flexibility to swap different components in and out with custom ones. Want to have a custom scheduler, sure just plug it in. Need to have a new resource type, write a CRD. Also, the community is very active and evolving the tool rapidly",
  "translation": "……就像乐高积木一样。 它不仅具有大规模运行容器协调器所需的组件，而且还具有使用自定义组件灵活地交换不同组件的灵活性。 想要有一个自定义的调度程序，请确保将其插入。需要有一个新的资源类型，编写一个CRD。 此外，社区非常活跃，并且工具迅速发展"
}, {
  "tag": "H1",
  "text": "Kubernetes Architecture",
  "translation": "Kubernetes体系结构"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*xYujRQjcpd-mQbNTwEbukA.png?q=20",
  "type": "image",
  "file": "1*xYujRQjcpd-mQbNTwEbukA.png"
}, {
  "tag": "P",
  "text": "Every Kubernetes cluster has two types of nodes (machines). Master and a Worker. As the name suggests, Master is to control and monitor the cluster where as the worker runs the payload (applications)",
  "translation": "每个Kubernetes集群都有两种类型的节点（机器）。 主人和工人。 顾名思义，Master是在工作程序运行有效负载（应用程序）的地方控制和监视群集"
}, {
  "tag": "P",
  "text": "A cluster could work with a single master node. But better to have three of them for high availability (Known as HA Clusters)",
  "translation": "群集可以与单个主节点一起使用。 但是最好拥有三个以实现高可用性（称为HA群集）"
}, {
  "tag": "P",
  "text": "Let us take a closer look at the master and what it is composed of",
  "translation": "让我们仔细看一下母版及其组成"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*qgogo7I03e5kyNWKVWtFYg.png?q=20",
  "type": "image",
  "file": "1*qgogo7I03e5kyNWKVWtFYg.png"
}, {
  "tag": "P",
  "text": "etcd : Database to store all the data about kubernetes objects, their current state, access information and other cluster config information",
  "translation": "etcd：数据库，用于存储有关kubernetes对象，其当前状态，访问信息和其他集群配置信息的所有数据"
}, {
  "tag": "P",
  "text": "API Server : RESTful API server that exposes end points to operate the cluster. Almost all of the components in master and worker nodes communicates to this server to perform their duties",
  "translation": "API服务器：RESTful API服务器，公开端点以操作集群。 主节点和工作节点中的几乎所有组件都与该服务器通信以执行其职责"
}, {
  "tag": "P",
  "text": "Scheduler : Responsible to decide which payload needs to run in which machine",
  "translation": "调度程序：负责决定哪个有效负载需要在哪台机器上运行"
}, {
  "tag": "P",
  "text": "Control Manager : It is a control loop that watches the state of the cluster (gets this data by making calls to API server) and takes actions to bring it to the expected state",
  "translation": "控制管理器：这是一个控制循环，它监视群集的状态（通过调用API服务器来获取此数据）并采取措施将其置于预期状态"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*sHmUG1htz-brFTGPz3HXXQ.png?q=20",
  "type": "image",
  "file": "1*sHmUG1htz-brFTGPz3HXXQ.png"
}, {
  "tag": "P",
  "text": "kubelet : Is the heart of the worker node. It communicates with the master node API server and runs the containers scheduled for its node",
  "translation": "kubelet：是工作程序节点的心脏。 它与主节点API服务器通信并运行为其节点安排的容器"
}, {
  "tag": "P",
  "text": "kube Proxy : Takes care of networking needs of pods using IP tables / IPVS",
  "translation": "kube代理：使用IP表/ IPVS处理Pod的网络需求"
}, {
  "tag": "P",
  "text": "Pod : The work horse of kubernetes which runs all your containers. You cannot run a containers inside kubernetes without a pod abstraction over it. A pod adds functionalities that is crucial to kuberenetes way of networking between containers",
  "translation": "Pod：运行您所有容器的kubernetes的功劳。 如果没有Pod的抽象，就无法在kubernetes中运行容器。 Pod添加了对容器之间的kuberenetes联网方式至关重要的功能"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*c80mIDN0Wz7b2xb5Qfxerw.png?q=20",
  "caption": "Happy pod",
  "type": "image",
  "file": "1*c80mIDN0Wz7b2xb5Qfxerw.png"
}, {
  "tag": "P",
  "text": "A pod could have more than one container and all the servers running inside these containers can see each other as localhosts. This makes it very convenient to separate different aspects of your app as separate containers and load them all together as one pod. There are different pod patterns like sidecar, proxy and ambassador to address different needs. Check this article to learn more about them",
  "translation": "一个Pod可以有多个容器，并且在这些容器中运行的所有服务器都可以将彼此视为本地主机。 这使得将应用程序的不同方面分离为单独的容器，并将它们全部作为一个容器加载在一起非常方便。 有不同的吊舱模式，例如挎斗，代理和大使，可以满足不同的需求。 查看本文以了解有关它们的更多信息"
}, {
  "tag": "P",
  "text": "Pod networking interface provides a mechanism to network it with other pods in the same nodes and other worker nodes",
  "translation": "Pod联网接口提供了一种将其与同一节点和其他工作程序节点中的其他Pod联网的机制"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*F2wfrW5zO6Y36Yr_jL014g.png?q=20",
  "type": "image",
  "file": "1*F2wfrW5zO6Y36Yr_jL014g.png"
}, {
  "tag": "P",
  "text": "Also, each pod will be assigned its own IP address which is used by kube-proxy to route traffic. And this IP address is visible only within the cluster",
  "translation": "此外，每个Pod都将分配有自己的IP地址，kube-proxy会使用该IP地址来路由流量。 而且此IP地址仅在群集中可见"
}, {
  "tag": "P",
  "text": "A volume mounted inside a pod is also visible to all the containers and sometimes these volumes can be used to communicate asynchronously between the pods. For example, say your app is a photo uploading app (like instagram may be), it could save these file in a volume and another container in the same pod can watch for new files in this volume and start processing it to create multiple sizes and upload them to cloud storage",
  "translation": "所有容器也可以看到安装在容器内的卷，有时这些卷可用于在容器之间进行异步通信。 例如，假设您的应用是照片上传应用（例如instagram），它可以将这些文件保存在一个卷中，而同一容器中的另一个容器可以监视该卷中的新文件，并开始对其进行处理以创建多种尺寸， 将它们上传到云存储"
}, {
  "tag": "H1",
  "text": "Controllers",
  "translation": "控制器"
}, {
  "tag": "P",
  "text": "In kubernetes, there are lot of controllers like ReplicaSet, Replication Controllers, Deployments, StatefulSets and Service. These are objects that control pods in one way or another. Let us look at some of the important ones",
  "translation": "在kubernetes中，有很多控制器，例如ReplicaSet，Replication Controllers，Deployments，StatefulSet和Service。 这些是以一种或另一种方式控制吊舱的对象。 让我们看一些重要的"
}, {
  "tag": "H1",
  "text": "ReplicaSet",
  "translation": "复制集"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*CrG3p2FUcjiHhwLyGQzQ2Q.png?q=20",
  "caption": "ReplicaSet doing what it is good at. Replicating pods",
  "type": "image",
  "file": "1*CrG3p2FUcjiHhwLyGQzQ2Q.png"
}, {
  "tag": "P",
  "text": "The main responsibility of this controller is to create replicas of the given pod. If a pod dies for some reason, this controller will be notified and it immediately jumps into action to create a new pod",
  "translation": "该控制器的主要职责是创建给定Pod的副本。 如果吊舱因某种原因死亡，则会通知该控制器，并立即采取行动以创建新的吊舱"
}, {
  "tag": "H1",
  "text": "Deployment",
  "translation": "部署方式"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*6qQCQLV8cIBkMY7K4GKrig.png?q=20",
  "caption": "Deployment (with a messy hair) trying to control the ReplicaSet",
  "type": "image",
  "file": "1*6qQCQLV8cIBkMY7K4GKrig.png"
}, {
  "tag": "P",
  "text": "Deployment is a higher order object which uses a ReplicaSet to manage replicas. It provides rolling upgrades by scaling up a new ReplicaSet and scaling down (eventually removing) an existing ReplicaSet",
  "translation": "部署是一个高阶对象，它使用ReplicaSet来管理副本。 它通过放大新的ReplicaSet和缩小（最终删除）现有的ReplicaSet来提供滚动升级。"
}, {
  "tag": "H1",
  "text": "Service",
  "translation": "服务"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*oAF5BE2RplGHtGmcC0L5Ew.png?q=20",
  "caption": "Service represented as a drone delivering data packets to corresponding pods",
  "type": "image",
  "file": "1*oAF5BE2RplGHtGmcC0L5Ew.png"
}, {
  "tag": "P",
  "text": "Service is a controller object whose prime responsibility is to work as a load balancer in distributing the “packets” to the corresponding nodes. It is basically a controller construct to group similar pods (usually identified by pod labels) across worker nodes.",
  "translation": "服务是一个控制器对象，其主要职责是在将“数据包”分发到相应节点时充当负载平衡器。 基本上，它是一种控制器构造，用于在工作节点之间对相似的Pod（通常由Pod标签标识）进行分组。"
}, {
  "tag": "P",
  "text": "Say if your “front-end” app wants to communicate to “back-end” app, there could be many running instances of each. Instead of worrying about hard coding the IPs of every back-end pod, you send the data packets to the back-end service which then decides how to load balance and forwards accordingly",
  "translation": "假设您的“前端”应用程序想与“后端”应用程序通信，则每个应用程序可能有许多正在运行的实例。 您不必担心对每个后端Pod的IP进行硬编码，而是将数据包发送到后端服务，然后由后端服务决定如何进行负载平衡并相应地转发"
}, {
  "tag": "P",
  "text": "PS: Note that service is more like a virtual entity as all the packet routing is handled by IP tables /IPVS /CNI plugin. It just makes it easier to think of it as a real entity sitting out their to understand its role in the kubernetes ecosystem",
  "translation": "PS：请注意，服务更像是一个虚拟实体，因为所有数据包路由均由IP表/ IPVS / CNI插件处理。 它只是使它更容易被视为一个真正的实体，让他们脱颖而出以了解其在kubernetes生态系统中的作用"
}, {
  "tag": "H1",
  "text": "Ingress",
  "translation": "入口"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*FEufKCJPNrCwkrJkwtjQWQ.png?q=20",
  "caption": "Ingress a floating platform through which all the packets flow into the cluster",
  "type": "image",
  "file": "1*FEufKCJPNrCwkrJkwtjQWQ.png"
}, {
  "tag": "P",
  "text": "Ingress controller is a single point of contact to the outside world to talk to all the services that are running inside the cluster. This makes it it easy for us to set security policies, monitoring and even logging at a single place",
  "translation": "入口控制器是与外界联系的单点，可以与集群中运行的所有服务进行对话。 这使我们可以轻松地在单个位置设置安全策略，监控甚至记录日志"
}, {
  "tag": "P",
  "text": "P.S: There are lot of other controller objects in Kubernetes like DaemonSets, StatefulSets and Jobs. There are also objects like Secrets, ConfigMaps that are used to store application secrets and configurations. I will be covering them in my next blog post based on the reception of this one.",
  "translation": "P.S：Kubernetes中还有很多其他控制器对象，例如DaemonSets，StatefulSets和Jobs。 还有一些诸如Secrets，ConfigMaps之类的对象，用于存储应用程序的机密和配置。 我将在收到下一篇博客文章时介绍它们。"
}]