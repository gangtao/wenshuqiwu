[{
  "tag": "H1",
  "text": "Want to Solve More Programming Problems Yourself?",
  "translation": "是否想自己解决更多的编程问题？"
}, {
  "tag": "P",
  "text": "If you enjoyed solving these problems, go to one of the websites that I mentioned in this piece. Most websites provide plenty of free challenges that you can try to solve.",
  "translation": "如果您喜欢解决这些问题，请转至我在本文中提到的网站之一。 大多数网站都提供许多免费的挑战，您可以尝试解决这些挑战。"
}, {
  "tag": "UL",
  "texts": ["LeetCode", "Project Euler", "HackerRank", "Coderbyte"],
  "translations": ["LeetCode", "欧拉计划", "黑客排名", "编码字节"]
}, {
  "tag": "H1",
  "text": "Solutions",
  "translation": "解决方案"
}, {
  "tag": "H2",
  "text": "1. Plus Minus",
  "translation": "1.加号减号"
}, {
  "tag": "P",
  "text": "A really great problem to get you started with a solution that’s really straightforward.",
  "translation": "让您开始真正简单的解决方案是一个非常大的问题。"
}, {
  "tag": "PRE",
  "text": "<?phpfunction getFractionals($numbers) { $length = count($numbers); $results = [  'positive' => 0,  'negative' => 0,  'zero' => 0, ];  for ($i = 0; $i < $length; $i++) {  if ($numbers[$i] < 0) {   $results['negative'] += 1;   } else if ($numbers[$i] > 0) {   $results['positive'] += 1;   } else {   $results['zero'] += 1;   } }  return [  $results['positive'] / $length,  $results['negative'] / $length,  $results['zero'] / $length   ];}print_r(getFractionals([1, 1, 0, -1, -1])); // [0.4, 0.4, 0.2]print_r(getFractionals([-4, 3, -9, 0, 4, 1])); // [0.5, 0.3333, 0.16667]",
  "translation": "<？phpfunction getFractionals（$ numbers）{$ length = count（$ numbers）; $ results = ['正'=> 0，'负'=> 0，'零'=> 0，]; for（$ i = 0; $ i <$ length; $ i ++）{如果（$ numbers [$ i] <0）{$ results ['negative'] + = 1; }否则if（$ numbers [$ i]> 0）{$ results ['positive'] + = 1; } else {$ results ['zero'] + = 1; }} return [$ results ['positive'] / $ length，$ results ['negative'] / $ length，$ results ['zero'] / $ length];} print_r（getFractionals（[1，1，0， -1，-1]）））； // [0.4，0.4，0.2] print_r（getFractionals（[-4，3，-9，0，4，1]））; // [0.5，0.3333，0.16667]"
}, {
  "tag": "H2",
  "text": "2. Two Sum",
  "translation": "2.两个和"
}, {
  "tag": "P",
  "text": "Although this one’s a little bit harder than the first problem, you shouldn’t have too much trouble solving this one. I used a simple brute-force approach.",
  "translation": "尽管这个问题比第一个问题要难一些，但解决这个问题应该不会有太多麻烦。 我使用了一种简单的蛮力方法。"
}, {
  "tag": "PRE",
  "text": "<?phpfunction twoSum($numbers, $target) {  for ($i = 0; $i < count($numbers); $i++) {    for ($j = $i + 1; $j < count($numbers); $j++) {      if ($numbers[$j] + $numbers[$i] === $target) {        return [$i, $j];      }    }  }}print_r(twoSum([2, 7, 11, 15], 9)); // [0, 1]print_r(twoSum([2, 7, 11, 15], 17)); // [0, 3]",
  "translation": "<？phpfunction twoSum（$ numbers，$ target）{for（$ i = 0; $ i <count（$ numbers）; $ i ++）{for（$ j = $ i + 1; $ j <count（$ numbers） ; $ j ++）{if（$ numbers [$ j] + $ numbers [$ i] === $ target）{return [$ i，$ j]; }}}} print_r（twoSum（[2，7，11，15]，9））; // [0，1] print_r（twoSum（[2，7，11，15]，17））; // [0，3]"
}, {
  "tag": "H2",
  "text": "3. Largest palindrome product",
  "translation": "3.最大的回文产品"
}, {
  "tag": "P",
  "text": "The solution I came up with has the advantage it can be used to find the biggest palindrome that’s the product of any two x-digit numbers.",
  "translation": "我想出的解决方案具有一个优势，它可以用于查找最大的回文数，该回文数是任意两个x位数的乘积。"
}, {
  "tag": "P",
  "text": "I’ve also added stop conditions to avoid unnecessary extra looping.",
  "translation": "我还添加了停止条件，以避免不必要的额外循环。"
}, {
  "tag": "PRE",
  "text": "<?phpfunction isPalindrome($number) {  return (string) $number === strrev((string) $number);}function getBiggestPalindrome($digits) {  $start = pow(10, $digits) - 1;  $max = 0;for ($i = $start; $i > 0; $i--) {    if ($i * $start <= $max) {      break;      }for ($j = $start; $j > 0; $j--) {      $product = $i * $j;if ($product < $max) {        break;        }if ($product > $max && isPalindrome($product)) {        $max = $product;      }    }  }return $max;}echo getBiggestPalindrome(2); // 9009echo getBiggestPalindrome(3); // 906609, which is 993 * 913",
  "translation": "<？phpfunction isPalindrome（$ number）{return（string）$ number === strrev（（string）$ number）;} function getBiggestPalindrome（$ digits）{$ start = pow（10，$ digits）-1; $ max = 0; for（$ i = $ start; $ i> 0; $ i--）{if（$ i * $ start <= $ max）{中断; } for（$ j = $ start; $ j> 0; $ j--）{$ product = $ i * $ j; if（$ product <$ max）{break; } if（$ product> $ max && isPalindrome（$ product））{$ max = $ product; }}}返回$ max;} echo getBiggestPalindrome（2）; // 9009 echo getBiggestPalindrome（3）; // 906609，即993 * 913"
}, {
  "tag": "H2",
  "text": "4. Distinct powers",
  "translation": "4.独特的权力"
}, {
  "tag": "P",
  "text": "I solved the distinct powers problem by going the brute-force route.",
  "translation": "我通过蛮力路线解决了独特的权力问题。"
}, {
  "tag": "P",
  "text": "Add each result to the array, and then remove duplicates from the array. The last step is to sort the array.",
  "translation": "将每个结果添加到数组，然后从数组中删除重复项。 最后一步是对数组进行排序。"
}, {
  "tag": "PRE",
  "text": "<?phpfunction distinctPowers($min, $max) { $numbers = [];  for ($i = $min; $i <= $max; $i++) {  for ($j = $min; $j <= $max; $j++) {     $numbers[] = pow($i, $j);  } }  $unique_numbers = array_unique($numbers); sort($unique_numbers);  return $unique_numbers;}echo print_r(distinctPowers(2, 5), 1); // [4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125]echo print_r(count(distinctPowers(2, 100)), 1); // 9183 distinct terms",
  "translation": "<？phpfunction differentPowers（$ min，$ max）{$ numbers = []; for（$ i = $ min; $ i <= $ max; $ i ++）{for（$ j = $ min; $ j <= $ max; $ j ++）{$ numbers [] = pow（$ i，$ j ）; $ unique_numbers = array_unique（$ numbers）; sort（$ unique_numbers）; return $ unique_numbers;}回显print_r（distinctPowers（2，5），1）; // [4，8，9，16，25，27，32，64，81，125，243，256，625，1024，3125] echo print_r（count（distinctPowers（2，100）），1）; // 9183个不同的术语"
}, {
  "tag": "H2",
  "text": "5. Kaprekars Constant",
  "translation": "5. Kaprekars Constant"
}, {
  "tag": "P",
  "text": "The Kaprekars Constant problem is a little bit harder to solve. It’s the first problem in this list that requires recursion to solve the problem.",
  "translation": "Kaprekars Constant问题很难解决。 这是此列表中的第一个问题，需要递归才能解决。"
}, {
  "tag": "PRE",
  "text": "function KaprekarsConstant($number, $numberOfIterations = 1) {  $number = (string) $number;    if (strlen($number) < 4) {    for ($i = strlen($number); $i < 4; $i++) {      $number .= '0';    }  }    $asc = str_split($number);  $desc = $asc;    rsort($desc);  sort($asc);    $asc_number = (int) implode($asc, '');  $desc_number = (int) implode($desc, '');  $difference = abs($asc_number - $desc_number);    if ($difference !== 6174) {    return KaprekarsConstant($difference, $numberOfIterations + 1);  }    return $numberOfIterations; }echo KaprekarsConstant(2111); // 5echo KaprekarsConstant(9831); // 7",
  "translation": "函数KaprekarsConstant（$ number，$ numberOfIterations = 1）{$ number =（string）$ number; if（strlen（$ number）<4）{for（$ i = strlen（$ number）; $ i <4; $ i ++）{$ number。='0'; $ asc = str_split（$ number）; $ desc = $ asc; rsort（$ desc）; sort（$ asc）; $ asc_number =（int）内爆（$ asc，''）; $ desc_number =（int）implode（$ desc，''）; $ difference = abs（$ asc_number-$ desc_number）; if（$ difference！== 6174）{返回KaprekarsConstant（$ difference，$ numberOfIterations + 1）; } return $ numberOfIterations; } echo KaprekarsConstant（2111）; // 5echo KaprekarsConstant（9831）; // 7"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*B0aWD5_8a1hzvopH2mvlqg.png?q=20",
  "caption": "A screenshot of passing all test cases",
  "type": "image",
  "file": "1*B0aWD5_8a1hzvopH2mvlqg.png"
}, {
  "tag": "H2",
  "text": "6. Swap Nodes in Pairs",
  "translation": "6.成对交换节点"
}, {
  "tag": "P",
  "text": "This one took me a while to figure out. The trick in my solution is to pass variables by reference instead of by value. Still, this one might take some time to get your head around.",
  "translation": "这花了我一段时间才弄清楚。 我的解决方案中的技巧是通过引用而不是通过值传递变量。 不过，这可能需要一些时间才能引起注意。"
}, {
  "tag": "PRE",
  "text": "function swapPairs($head) {    $current = &$head;        while (!is_null($current->next)) {        $nextValue = $current->next->val;                $temp = &$current;        $temp->next->val = $temp->val;        $temp->val = $nextValue;                $current = &$current->next->next;    }        return $head;}",
  "translation": "函数swapPairs（$ head）{$ current =＆$ head; while（！is_null（$ current-> next））{$ nextValue = $ current-> next-> val; $ temp =＆$ current; $ temp-> next-> val = $ temp-> val; $ temp-> val = $ nextValue; $ current =＆$ current-> next-> next; } return $ head;}"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*JdXADC61liJzpH09NdlMHw.png?q=20",
  "type": "image",
  "file": "1*JdXADC61liJzpH09NdlMHw.png"
}, {
  "tag": "H1",
  "text": "Challenges",
  "translation": "挑战性"
}, {
  "tag": "H2",
  "text": "1. Plus Minus",
  "translation": "1.加号减号"
}, {
  "tag": "P",
  "text": "Let’s start with a relatively easy problem provided by HackerRank. This challenge is categorized as a warmup.",
  "translation": "让我们从HackerRank提供的一个相对简单的问题开始。 这项挑战被归为热身。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*Zu_jXcQP7z6mN4_iPTHCoQ.png?q=20",
  "type": "image",
  "file": "1*Zu_jXcQP7z6mN4_iPTHCoQ.png"
}, {
  "tag": "H2",
  "text": "2. Two Sum",
  "translation": "2.两个和"
}, {
  "tag": "P",
  "text": "A challenge that’s considered easy, provided by LeetCode.",
  "translation": "LeetCode提供的挑战被认为很容易。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*Rjp2mrsuMJeC4u1sCH_8fw.png?q=20",
  "type": "image",
  "file": "1*Rjp2mrsuMJeC4u1sCH_8fw.png"
}, {
  "tag": "H2",
  "text": "3. Largest palindrome product",
  "translation": "3.最大的回文产品"
}, {
  "tag": "P",
  "text": "This problem is provided by Project Euler and is considered one of the more easy problems. It’s currently solved by more than 455,000 people.",
  "translation": "此问题由Euler项目提供，被认为是较容易解决的问题之一。 目前有超过455,000人解决了该问题。"
}, {
  "tag": "P",
  "text": "This is the problem:",
  "translation": "这就是问题："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*98y9BTXM1rDSlRkbUpstXg.png?q=20",
  "type": "image",
  "file": "1*98y9BTXM1rDSlRkbUpstXg.png"
}, {
  "tag": "H2",
  "text": "4. Distinct powers",
  "translation": "4.独特的权力"
}, {
  "tag": "P",
  "text": "Another challenge from Project Euler. This one is a little bit harder than the previous problem. It’s solved by around 100,000 people.",
  "translation": "欧拉计划的另一个挑战。 这个问题比以前的问题要难一些。 大约有100,000人解决了此问题。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*0K1C45TCB8iqE4UmuS1QLA.png?q=20",
  "type": "image",
  "file": "1*0K1C45TCB8iqE4UmuS1QLA.png"
}, {
  "tag": "H2",
  "text": "5. Kaprekars Constant",
  "translation": "5. Kaprekars Constant"
}, {
  "tag": "P",
  "text": "If you’ve made it up to this point: Congratulations! It’s time to start the first hard challenge. This challenge is provided by Coderbyte.",
  "translation": "如果您已经做到这一点：恭喜！ 现在是开始第一个艰巨挑战的时候了。 该挑战由Coderbyte提供。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*nTI0LKq42fdEBU6zKJWUcg.png?q=20",
  "type": "image",
  "file": "1*nTI0LKq42fdEBU6zKJWUcg.png"
}, {
  "tag": "H2",
  "text": "6. Swap Nodes in Pairs",
  "translation": "6.成对交换节点"
}, {
  "tag": "P",
  "text": "Definitely the toughest challenge so far, this challenge is provided by LeetCode. Although it’s considered to be of medium difficulty, I found this one harder to solve than the Kaprekars Constant. This one requires you to know how linked lists work.",
  "translation": "到目前为止，绝对是最艰巨的挑战，此挑战由LeetCode提供。 尽管它被认为是中等难度的，但我发现这个问题比Kaprekars Constant更难解决。 这需要您知道链接列表的工作方式。"
}, {
  "tag": "P",
  "text": "But let’s not go into too much detail — here’s the challenge:",
  "translation": "但是，我们不要过分详细-这是挑战："
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*H4e3I21c8jdbnJKRdgqF8Q.png?q=20",
  "type": "image",
  "file": "1*H4e3I21c8jdbnJKRdgqF8Q.png"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/0*HcRHqaIZjFwSQ56b?q=20",
  "caption": "Photo by Fletcher Pride on Unsplash",
  "type": "image",
  "file": "0*HcRHqaIZjFwSQ56b"
}, {
  "tag": "H1",
  "text": "Do You Know How to Solve These Programming Problems?",
  "translation": "您知道如何解决这些编程问题吗？"
}, {
  "tag": "H2",
  "text": "Can you wrap your head around all of them?",
  "translation": "你能把头包住吗？"
}, {
  "tag": "P",
  "text": "Programming is about solving problems. In this piece, I’ve listed six programming problems from several sites that contain programming problems. The problems in this listed are sorted based on how difficult they are to solve — with number one on this list being the easiest, and number six being the most difficult to solve. Can you wrap your head around all of them?",
  "translation": "编程是关于解决问题的。 在本文中，我列出了来自几个包含编程问题的站点的六个编程问题。 此清单中的问题是根据解决的难易程度进行排序的，其中最容易解决的是第一名，而最难解决的是第六名。 你能把头包住吗？"
}, {
  "tag": "P",
  "text": "I provided the solutions to these programming problems, coded in PHP, at the bottom of this article. You can choose a programming language of your choice to solve these problems.",
  "translation": "我在本文底部提供了用PHP编码的这些编程问题的解决方案。 您可以选择一种编程语言来解决这些问题。"
}, {
  "tag": "P",
  "text": "Good luck solving these problems, and happy coding!",
  "translation": "祝您好运解决这些问题，并祝您编程愉快！"
}, {
  "tag": "PRE",
  "text": "(本文翻译自Daan的文章《Do You Know How to Solve These Programming Problems?》，参考：https://medium.com/better-programming/do-you-know-how-to-solve-these-programming-problems-18d04defc05e)",
  "translation": "（本文翻译自Daan的文章《您知道如何解决这些编程问题吗？》，参考：https：//medium.com/better-programming/do-you-know-how-to-solve-these-programming- 问题18d04defc05e）"
}]