[{
  "tag": "P",
  "text": "About the author-:",
  "translation": "关于作者-："
}, {
  "tag": "P",
  "text": "Ravi Rajan is a global IT program manager based out of Mumbai, India. He is also an avid blogger, Haiku poetry writer, archaeology enthusiast, and history maniac. Connect with Ravi on LinkedIn,Medium and Twitter.",
  "translation": "Ravi Rajan是位于印度孟买的全球IT计划经理。 他还是一位狂热的博客作者，Hai句诗作家，考古爱好者和历史狂人。 在LinkedIn，Medium和Twitter上与Ravi联系。"
}, {
  "tag": "H1",
  "text": "References",
  "translation": "参考文献"
}, {
  "tag": "P",
  "text": "· The Practice of Programming — Rob Pike.",
  "translation": "·编程实践— Rob Pike。"
}, {
  "tag": "P",
  "text": "· Clean Code — Robert Martin.",
  "translation": "·清洁代码-罗伯特·马丁（Robert Martin）。"
}, {
  "tag": "P",
  "text": "· Programming Pearls- Jon Bentley",
  "translation": "·编程珍珠-乔恩·本特利"
}, {
  "tag": "P",
  "text": "· Inner Loops — Rick Booth",
  "translation": "·内循环-Rick Booth"
}, {
  "tag": "P",
  "text": "· Practices of Agile Developer — Andy Hunt",
  "translation": "·敏捷开发人员的实践— Andy Hunt"
}, {
  "tag": "H1",
  "text": "And Lastly, Include Code Inspection into your Governance Models",
  "translation": "最后，将代码检查纳入治理模型"
}, {
  "tag": "P",
  "text": "This is for both managers and developers. Managers should ensure code inspections as part of project hygiene and developers should include it as part of best coding practices.",
  "translation": "这既适用于管理人员，也适用于开发人员。 经理应确保将代码检查作为项目卫生的一部分，而开发人员应将其作为最佳编码实践的一部分。"
}, {
  "tag": "P",
  "text": "Inefficient code doesn’t affect the daily running of a system all that much. Because of this obvious flaw, we tend to let inefficient code slide past because it’s not really harming anyone, right? Wrong. Code inefficiency adds up over time and this leads to a slower execution and overly-long processing times for clients.",
  "translation": "低效的代码不会对系统的日常运行造成太大影响。 由于存在这一明显的缺陷，我们倾向于让效率低下的代码滑过，因为它并没有真正伤害到任何人，对吗？ 错误。 随着时间的流逝，代码效率低下，这会导致执行速度变慢，并且客户端的处理时间过长。"
}, {
  "tag": "P",
  "text": "Incorporating regular code checks to remove inefficient snippets will do a lot over the long term, even though chances are you won’t appreciate it unless you left that inefficient code in there and have to wonder later down the line why your code’s taking such a long time to execute. Don’t let past you lead to suffering for future you. Inspect your code for efficiency when you can.",
  "translation": "从长远来看，结合常规代码检查来删除效率低下的代码片段会做很多事情，尽管除非您将无效的代码留在那里，并且稍后不得不怀疑为什么您的代码要花这么长的时间，否则您可能会不满意它 执行时间。 不要让过去成为你未来的痛苦。 尽可能检查代码的效率。"
}, {
  "tag": "P",
  "text": "Have someone code review your work. Ideally, the person is a developer that you admire, but almost any developer will do. If someone can’t understand parts of your code, that’s a red flag.",
  "translation": "让某人对您的工作进行代码审查。 理想情况下，此人是您欣赏的开发人员，但几乎所有开发人员都可以。 如果有人听不懂您的部分代码，那就是一个危险信号。"
}, {
  "tag": "P",
  "text": "Remember improving any code starts with you. And there is no way to code something perfectly from the first pass. There are always changes to be done to code, bugs to be worked out and sometimes your code just doesn’t work the way you want it to. That’s fine, it’s all part of being a programmer.",
  "translation": "记住改进任何代码都是从您开始。 从第一遍开始就没有办法完美地编码某些东西。 总是需要对代码进行更改，要解决错误，有时您的代码无法按照您想要的方式工作。 很好，这完全是成为一名程序员的一部分。"
}, {
  "tag": "P",
  "text": "And most of the times, all it needs is a little cleaning for your code to stop working like a jalopy and start working like a finely tuned Bugatti. Make cleaning code a habit and that is it!!!",
  "translation": "在大多数情况下，它所需要的只是对代码进行一些清理，以使其像jalopy一样停止工作，而像经过微调的布加迪一样开始工作。 使清洁代码成为一种习惯，就是这样！！！"
}, {
  "tag": "P",
  "text": "As Kent Beck has rightly said.",
  "translation": "正如肯特·贝克说的那样。"
}, {
  "tag": "P",
  "text": "“I’m not a great programmer; I’m just a good programmer with great habits.”",
  "translation": "“我不是一个伟大的程序员； 我只是一个有良好习惯的优秀程序员。”"
}, {
  "tag": "H1",
  "text": "Tuning the Code",
  "translation": "调整代码"
}, {
  "tag": "P",
  "text": "There are several techniques we can use to tune the code once the hotspot is found. However, these should be used with care, considering the fact that compiler might be doing a majority of things for you and you might be further complicating the program by your efforts. Whatever you try, make sure to measure its impact before proceeding. Here are a few tuning suggestions.",
  "translation": "一旦发现热点，我们可以使用多种技术来调整代码。 但是，考虑到编译器可能正在为您做很多事情，并且您的努力可能会使程序进一步复杂化，因此应谨慎使用。 无论您尝试什么，请确保在继续操作之前先评估其影响。 这里有一些调优建议。"
}, {
  "tag": "H2",
  "text": "Collect common subexpressions.",
  "translation": "收集常见的子表达式。"
}, {
  "tag": "P",
  "text": "If an expensive computation occurs in multiple places, it is better to compute in one place and remember the result. Don’t put such computations within a loop unless required.",
  "translation": "如果在多个地方进行昂贵的计算，最好在一个地方进行计算并记住结果。 除非需要，否则不要将此类计算放在一个循环中。"
}, {
  "tag": "H2",
  "text": "Replace expensive operations by Cheap ones.",
  "translation": "用便宜的操作代替昂贵的操作。"
}, {
  "tag": "P",
  "text": "String manipulation is probably one of the most common operations in any program. However, it can be an expensive operation if done incorrectly. Similarly, in some cases, you can improve performance by replacing multiplication with a series of shift operations. Even where this is effective (and it isn’t always) it produces very confusing code. So take the decision considering the readability of code also.",
  "translation": "字符串操作可能是任何程序中最常见的操作之一。 但是，如果操作不正确，则操作可能会很昂贵。 同样，在某些情况下，可以通过用一系列移位运算代替乘法来提高性能。 即使这是有效的（但并非总是如此），它也会产生令人困惑的代码。 因此，还要考虑代码的可读性来做出决定。"
}, {
  "tag": "H2",
  "text": "Eliminate Loops.",
  "translation": "消除循环。"
}, {
  "tag": "P",
  "text": "Loops are mostly overheads. Try to avoid loops wherever possible if iterations are not much.",
  "translation": "循环主要是开销。 如果迭代次数不多，请尽量避免循环。"
}, {
  "tag": "H2",
  "text": "Cache frequently used values.",
  "translation": "缓存常用值。"
}, {
  "tag": "P",
  "text": "Caching takes advantage of locality, the tendency of programs and people to reuse recently used data. Caching just the most used character or data significantly improves the performance of the program.",
  "translation": "缓存利用了局部性，程序和人们重用最近使用的数据的趋势。 仅缓存最常用的字符或数据可大大提高程序的性能。"
}, {
  "tag": "H2",
  "text": "Rewrite in a lower-level language.",
  "translation": "用较低级别的语言重写。"
}, {
  "tag": "P",
  "text": "This should be the last resort. Lower level languages tend to be more efficient, although more time consuming from the programmer’s point of view. Occasionally we get significant improvements by rewriting crucial code in lower-level languages but this comes at the cost of reduced portability and maintenance becomes very hard. So take the decision carefully.",
  "translation": "这应该是最后的手段。 尽管从程序员的角度来看，较低级的语言会消耗更多时间，但较低级的语言往往会更有效。 有时，通过用低级语言重写关键代码会获得重大改进，但这是以降低可移植性为代价的，并且维护变得非常困难。 因此，请谨慎做出决定。"
}, {
  "tag": "P",
  "text": "Remember in optimization, the selection is perhaps 90% of the game. It’s worth taking the time to decide what you’re doing and to do it right. Of course: That’s also where the black magic lies!",
  "translation": "请记住，在优化中，选择可能是游戏的90％。 值得花时间来决定自己的工作并正确地做。 当然：这也是黑魔法所在！"
}, {
  "tag": "H1",
  "text": "Enable Compiler Optimizations",
  "translation": "启用编译器优化"
}, {
  "tag": "P",
  "text": "Usually, one sure shot way to optimize is to turn on whatever optimizations the compiler provides inbuilt.",
  "translation": "通常，一种肯定的优化方法是打开编译器提供的内置优化。"
}, {
  "tag": "P",
  "text": "Compiler optimizations usually improve runtime from a few percents to a factor of 2. Sometimes it may also slow the product so just measure carefully before taking the final call. Modern compilers however do sufficiently well in this regard as they obviate much of the need for small scale changes by programmers.",
  "translation": "编译器优化通常可以将运行时间从几个百分点提高到2倍。有时它可能还会减慢产品速度，因此在进行最终调用之前请仔细测量。 但是，现代编译器在这方面做得很好，因为它们避免了程序员对小规模更改的大量需求。"
}, {
  "tag": "P",
  "text": "And some modern compilers also have global optimizers which analyze the entire program for potential improvements. If such a compiler is available in your system, try it by all means. It might reduce a few more seconds.",
  "translation": "而且一些现代的编译器还具有全局优化器，可以分析整个程序以获得潜在的改进。 如果您的系统中提供了这样的编译器，请一定尝试一下。 可能会减少几秒钟。"
}, {
  "tag": "P",
  "text": "The point is that the more aggressively the compiler optimizes, the more likely it might introduce bugs in the compiled program. So it is always advisable to rerun regression tests after enabling the compiler optimization to prevent any surprises.",
  "translation": "关键是，编译器进行的优化越积极，就越有可能在已编译的程序中引入错误。 因此，始终建议在启用编译器优化后重新运行回归测试，以防止出现任何意外情况。"
}, {
  "tag": "H1",
  "text": "Use a Profiler",
  "translation": "使用探查器"
}, {
  "tag": "P",
  "text": "Don’t tune anything without profiling it first. The most common performance tuning mistake is to spend a day rewriting code that consumes a tiny portion of the overall running time.",
  "translation": "在进行任何分析之前，请先对其进行概要分析。 最常见的性能调整错误是花一天时间重写代码，而这些代码只消耗了总运行时间的一小部分。"
}, {
  "tag": "P",
  "text": "A profile is a measurement of where the program spends its time. Some profiles list each function, the number of times it is called, and the fraction of execution time it consumes.",
  "translation": "概要文件是程序花费时间的度量。 一些配置文件列出了每个函数，被调用的次数以及所消耗的执行时间的一部分。"
}, {
  "tag": "P",
  "text": "Others show counts of how many times each statement was executed. Statements that are executed frequently contribute more to run time, while statements which are never executed may indicate useless code or code which has not been tested properly.",
  "translation": "其他的则显示每个语句执行了多少次。 经常执行的语句对运行时间的贡献更大，而从未执行的语句可能表示无用的代码或未经正确测试的代码。"
}, {
  "tag": "P",
  "text": "And the greatest advantage of a good profiling tool is to find hotspots in a program, the functions or sections of code that consume most of the computing time. Most of the time you find the hotspot, you find the issue.",
  "translation": "一个好的性能分析工具的最大优点是可以找到程序中的热点，占用大部分计算时间的函数或代码段。 在大多数情况下，找到热点都会发现问题。"
}, {
  "tag": "P",
  "text": "The best way to use profiling is to identify the hotspot, improve them to the degree possible, and then measure again to see if a new hotspot has surfaced.",
  "translation": "使用概要分析的最佳方法是识别热点，将其改进到可能的程度，然后再次进行测量以查看是否出现了新的热点。"
}, {
  "tag": "H1",
  "text": "Don’t do it.",
  "translation": "不要做"
}, {
  "tag": "P",
  "text": "The first principle of optimization is “Don’t”.",
  "translation": "优化的首要原则是“不要”。"
}, {
  "tag": "P",
  "text": "Is the program good enough already? Knowing how the program is going to be used and the environment in which it runs, is there any benefit of making it faster? These are some questions you should ask prior to optimizing the code.",
  "translation": "该程序已经足够好了吗？ 知道该程序将如何使用以及它在其中运行的环境，使其更快会有什么好处？ 这些是在优化代码之前应该问的一些问题。"
}, {
  "tag": "P",
  "text": "Yes. Optimization only makes sense in terms of effort and cost if the program is important and it is genuinely slow and there is some expectation that it can be made faster while maintaining robustness, correctness, and clarity.",
  "translation": "是。 仅当程序很重要且确实很慢时，才需要付出努力并降低成本，然后才能保持稳定，正确性和清晰度，并且可以更快地进行优化。"
}, {
  "tag": "P",
  "text": "A fast program that gets the wrong results is of no use to anybody. Effectively optimized software has more advantages than disadvantages, but if you do the optimization wrong, the opposite is true.",
  "translation": "一个获得错误结果的快速程序对任何人都没有用。 有效优化的软件的利弊多于利弊，但是，如果您错误地进行了优化，则情况恰恰相反。"
}, {
  "tag": "P",
  "text": "So the very first thing is setting the goals for optimization.",
  "translation": "因此，第一件事就是设定优化目标。"
}, {
  "tag": "P",
  "text": "You need to start out with a clear understanding of what you’re trying to accomplish and how the various optimizations relate to those goals. This goal needs to be stated clearly and simply — simple enough that the least tech-savvy department manager can understand and articulate it — and you need to stick to those goals throughout the process.",
  "translation": "您需要首先清楚地了解您要完成的任务以及各种优化与这些目标的关系。 需要清晰，简单地陈述这个目标-足够简单，以至于最不懂技术的部门经理可以理解和阐明它-并且您需要在整个过程中坚持这些目标。"
}, {
  "tag": "P",
  "text": "And the best way to start is to prioritize what you’re going to work on according to the impact it has on your goals. And whatever you are working on should be measurable. Intuition is always a very lousy guide on which to depend on.",
  "translation": "最好的开始方法是根据对目标的影响来确定要进行的工作的优先级。 无论您在做什么，都应该可以衡量。 直觉永远是一个非常糟糕的指南。"
}, {
  "tag": "H1",
  "text": "5 Powerful Ways to Make Your Code Run Faster.",
  "translation": "5种使代码运行更快的强大方法。"
}, {
  "tag": "H2",
  "text": "Good Code is Clean, Robust and Fast, in that order.",
  "translation": "好的代码按此顺序是干净，健壮和快速的。"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*SAtfAKFSBKYdOX4qr2h-gg.jpeg?q=20",
  "caption": "Image Credits: Unsplash.com Harley Davidson",
  "type": "image",
  "file": "1*SAtfAKFSBKYdOX4qr2h-gg.jpeg"
}, {
  "tag": "P",
  "text": "My 1st “Make this code fast”(code optimization in technical terms)assignment was a humongous SAP custom application having more than 30,000 lines of code.",
  "translation": "我的第一个“快速完成此代码”（技术上的代码优化）分配是一个庞大的SAP定制应用程序，具有30,000多行代码。"
}, {
  "tag": "P",
  "text": "The application was very slow in loading up data and obviously, the users were not happy about it.",
  "translation": "该应用程序加载数据的速度非常慢，显然，用户对此并不满意。"
}, {
  "tag": "P",
  "text": "And I must admit, the application was well written. The database calls were optimally made. The loops were only used as required and modularity was well taken care of in the application. For two days, I sweated over the application, ran various tests and reviewed the code logic, but I could not find anything that made the application slow.",
  "translation": "我必须承认，申请书写得很好。 最佳地进行了数据库调用。 仅根据需要使用循环，并且在应用程序中充分考虑了模块性。 有两天时间，我在应用程序上大汗淋漓，进行了各种测试并检查了代码逻辑，但找不到任何使应用程序变慢的东西。"
}, {
  "tag": "P",
  "text": "I was at my wit’s end. I was running out of options. Then, on the 3rd day, I found the issue.",
  "translation": "我机智尽头。 我没有其他选择了。 然后，在第三天，我发现了问题。"
}, {
  "tag": "P",
  "text": "And it was a Wait statement in one of the loading pages —",
  "translation": "这是其中一个加载页面中的Wait语句-"
}, {
  "tag": "PRE",
  "text": "WAIT FOR 20 SECONDS.",
  "translation": "等待20秒。"
}, {
  "tag": "P",
  "text": "It seems some developer in the past while debugging, had inserted a wait statement and forgot to remove it before moving the code to production. That it has been called from an exit, within the standard code, further magnified the issue. I removed the statement. BINGO!!! It started working.",
  "translation": "在过去的调试过程中，似乎有些开发人员插入了一个wait语句，却忘记了将其移至生产环境之前将其删除。 在标准代码中已从出口处调用它，进一步放大了问题。 我删除了该声明。 答对了！！！ 它开始工作了。"
}, {
  "tag": "P",
  "text": "That said, Code optimization is a double-edged sword.",
  "translation": "也就是说，代码优化是一把双刃剑。"
}, {
  "tag": "P",
  "text": "Optimizing software is a good thing, but it is not a guaranteed good thing.",
  "translation": "优化软件是一件好事，但这并不是可以保证的。"
}, {
  "tag": "P",
  "text": "If you optimize your software for the wrong things, or in the wrong way, optimization can run up costs, slow down production, and actually make the software sub-optimal for its purpose.",
  "translation": "如果针对错误的事物或以错误的方式对软件进行优化，则优化会增加成本，减慢生产速度，并实际上使软件达到最佳效果。"
}, {
  "tag": "P",
  "text": "And most of the times there are serious tradeoffs involved. Improving, say, speed may cost you in resource utilization, and making more efficient use of storage easily can slow things down. You need to carefully consider what tradeoffs you are willing to make in other areas in order to achieve your primary goal.",
  "translation": "在大多数情况下，都需要进行认真的权衡。 例如，提高速度可能会浪费您的资源利用率，而轻松地更有效地利用存储会降低速度。 您需要仔细考虑您愿意在其他领域进行哪些权衡，以实现您的主要目标。"
}, {
  "tag": "P",
  "text": "And here are a few pointers you can consider to make your code more responsive and cut down on the amount of stress you cause to your clients’ devices and their connected databases.",
  "translation": "您可以考虑以下几点指示，以使您的代码更具响应性，并减少您对客户端设备及其连接的数据库造成的压力。"
}]