[{
  "tag": "H1",
  "text": "Conclusion",
  "translation": "结论"
}, {
  "tag": "P",
  "text": "Typescript gives us a way to write JavaScript with compile-time type safety while also supporting constructs like enums, access specifiers that are not supported in JavaScript.",
  "translation": "Typescript为我们提供了一种编写具有编译时类型安全性的JavaScript的方法，同时还支持JavaScript中不支持的枚举，访问说明符之类的构造。"
}, {
  "tag": "P",
  "text": "References: https://basarat.gitbooks.io/typescript/",
  "translation": "参考：https://basarat.gitbooks.io/typescript/"
}, {
  "tag": "H1",
  "text": "Classes",
  "translation": "班级"
}, {
  "tag": "P",
  "text": "The only difference between ES6 classes and typescript classes is that typescript gives us type safety and access specifiers for class variables.",
  "translation": "ES6类和打字稿类之间的唯一区别是，打字稿为我们提供了类型安全性和类变量的访问说明符。"
}, {
  "tag": "P",
  "text": "Access specifiers provide just compile-time safety, since compiled JavaScript does not support them — same as type safety.",
  "translation": "访问说明符仅提供编译时安全性，因为编译的JavaScript不支持它们-与类型安全性相同。"
}, {
  "tag": "PRE",
  "text": "class Animal {  private readonly name: string;  protected isPet: boolean;    constructor(name: string, isPet: boolean = false) {    this.name = name;    this.isPet = isPet;  }    public isPetAnimal() {    return this.isPet;  }    protected getName() {    return this.name;  }}class Snake extends Animal {  public getName() {    // return a.name; // error since name is private in parent class    return super.getName();  }}const animal = new Animal('tom', true);console.log(animal.isPetAnimal()); // true// animal.getName(); // error since its protectedconst snake = new Snake('kaa');console.log(snake.isPetAnimal()); // falseconsole.log(snake.getName()); // kaa",
  "translation": "class Animal {私有只读名称：字符串； 受保护的isPet：布尔值； 构造函数（名称：字符串，isPet：布尔值=假）{this.name =名称； this.isPet = isPet; } public isPetAnimal（）{返回this.isPet; } protected getName（）{返回this.name; }}类Snake扩展Animal {public getName（）{//返回a.name; //错误，因为名称在父类中是私有的，所以返回super.getName（）; }} const animal = new Animal（'tom'，true）; console.log（animal.isPetAnimal（））; // true // animal.getName（）; //错误，因为它的protectedconst snake = new Snake（'kaa'）; console.log（snake.isPetAnimal（））; // falseconsole.log（snake.getName（））; // kaa"
}, {
  "tag": "H1",
  "text": "Namespaces",
  "translation": "命名空间"
}, {
  "tag": "P",
  "text": "Namespaces can be used for logical grouping of functions as demonstrated below:",
  "translation": "命名空间可用于功能的逻辑分组，如下所示："
}, {
  "tag": "PRE",
  "text": "namespace Logger {  export function info(message: string) {    console.log(message);  }    export function error(message: string) {    console.error(message);  }}Logger.info('info text');Logger.error('error text');",
  "translation": "名称空间Logger {导出函数info（message：string）{console.log（message）; }导出函数错误（消息：字符串）{console.error（message）; }} Logger.info（'信息文本'）; Logger.error（'错误文本'）;"
}, {
  "tag": "P",
  "text": "This logical grouping can also be achieved through file-based modules and is recommended over namespaces.",
  "translation": "此逻辑分组也可以通过基于文件的模块来实现，建议在命名空间上使用。"
}, {
  "tag": "H1",
  "text": "Functions",
  "translation": "功能"
}, {
  "tag": "P",
  "text": "We can define the arguments and return type of functions as shown below:",
  "translation": "我们可以定义参数和函数的返回类型，如下所示："
}, {
  "tag": "PRE",
  "text": "interface point {  lat: number,  long: number}function getPoint(lat: number, long: number): point {  return {    lat: lat,    long: long  }}",
  "translation": "接口点{lat：数字，long：数字}函数getPoint（lat：数字，long：数字）：点{返回{lat：lat，long：long}}"
}, {
  "tag": "P",
  "text": "Even if we don’t define the return type of a function, typescript is smart enough to infer the return type on its own. So, the following also works:",
  "translation": "即使我们没有定义函数的返回类型，打字稿也足够聪明，可以自行推断出返回类型。 因此，以下内容也适用："
}, {
  "tag": "PRE",
  "text": "function getPoint(lat: number, long: number) {  return {    lat: lat,    long: long  }}",
  "translation": "函数getPoint（lat：number，long：number）{返回{lat：lat，long：long}}"
}, {
  "tag": "P",
  "text": "But it is always recommended to define return types to avoid mistakes like this:",
  "translation": "但是始终建议定义返回类型，以避免出现以下错误："
}, {
  "tag": "PRE",
  "text": "function getPoint(lat: number, long: number) {  return {    lat: lat,    lnog: long // no error since we left it to typescript to infer the return type  }}",
  "translation": "函数getPoint（lat：number，long：number）{return {lat：lat，lnog：long //没有错误，因为我们将其留给打字稿来推断返回类型}}"
}, {
  "tag": "H2",
  "text": "Optional parameters",
  "translation": "可选参数"
}, {
  "tag": "P",
  "text": "We can define a parameter as optional:",
  "translation": "我们可以将参数定义为可选："
}, {
  "tag": "PRE",
  "text": "function foo(bar: string, baz?: number) {  // baz is optional}foo('str'); // okfoo('str', 1); // ok",
  "translation": "函数foo（bar：string，baz ?: number）{// baz是可选的} foo（'str'）; // okfoo（'str'，1）; // 好"
}, {
  "tag": "P",
  "text": "Alternatively, we can have default values for parameters:",
  "translation": "另外，我们可以为参数设置默认值："
}, {
  "tag": "PRE",
  "text": "function foo(bar: string, baz: number = 1) {  console.log(bar, baz);}foo('str'); // str, 1foo('str', 100); // str, 100",
  "translation": "函数foo（bar：string，baz：number = 1）{console.log（bar，baz）;} foo（'str'）; // str，1foo（'str'，100）; // str，100"
}, {
  "tag": "H2",
  "text": "Function overloading",
  "translation": "函数重载"
}, {
  "tag": "P",
  "text": "Typescript allows us to declare overloads. This is useful for documentation and safety purposes. But since JavaScript does not support function overloading, we have to implement a single generic function for all overloads.",
  "translation": "Typescript允许我们声明重载。 这对于文档和安全目的很有用。 但是由于JavaScript不支持函数重载，因此我们必须为所有重载实现单个通用函数。"
}, {
  "tag": "PRE",
  "text": "function stringOrNumber(a: string): string;function stringOrNumber(a: number): number;function stringOrNumber(a: any) {  if (typeof a === 'string') {    // typescript knows 'a' is a string in this block    // let b = a * 2; // error        return a;  } else if (typeof a === 'number') {    // typescript knows 'a' is a number in this block    // let b = a.substr('') // error        return a * 2;  }}stringOrNumber('hello'); // hellostringOrNumber(100); // 200stringOrNumber(true); // error",
  "translation": "函数stringOrNumber（a：字符串）：字符串;函数stringOrNumber（a：数量）：数字;函数stringOrNumber（a：任意）{if（typeof a ==='string'）{//打字稿知道'a'是字符串 在此块中//让b = a * 2; //错误返回a; }否则if（typeof a ==='number'）{//打字稿知道'a'是该块中的数字// // b = a.substr（''）//错误返回a * 2; }} stringOrNumber（'hello'）; // hellostringOrNumber（100）; // 200stringOrNumber（true）; //错误"
}, {
  "tag": "H2",
  "text": "Declaring functions",
  "translation": "宣告功能"
}, {
  "tag": "P",
  "text": "There are two ways to declare a function without an implementation.",
  "translation": "有两种方法可以在没有实现的情况下声明函数。"
}, {
  "tag": "PRE",
  "text": "type longHand = {  (a: number): number}type shortHand = (a: number) => number;",
  "translation": "输入longHand = {（a：数字）：数字}输入shortHand =（a：数字）=>数字；"
}, {
  "tag": "P",
  "text": "The only difference in shorthand and longhand declarations comes if we want to declare function overloads. For example:",
  "translation": "如果我们要声明函数重载，则速记和速记声明的唯一区别在于。 例如："
}, {
  "tag": "PRE",
  "text": "type longHand = {  (a: number): number,  (a: string): string,}",
  "translation": "输入longHand = {（a：数字）：数字，（a：字符串）：字符串，}"
}, {
  "tag": "H1",
  "text": "Type Annotations",
  "translation": "类型注释"
}, {
  "tag": "P",
  "text": "All variables, function arguments and function return types are defined using type annotations in typescript as shown below:",
  "translation": "所有的变量，函数参数和函数返回类型都是使用typescript中的类型注释定义的，如下所示："
}, {
  "tag": "PRE",
  "text": "const a: number = 124;const b: number = 56;function sum(a: number, b: number): number {  return a + b;}",
  "translation": "const a：数字= 124； const b：数字= 56；函数sum（a：数字，b：数字）：数字{返回a + b;}"
}, {
  "tag": "H2",
  "text": "Primitive types",
  "translation": "原始类型"
}, {
  "tag": "P",
  "text": "The JavaScript primitive types ie number, string, boolean can all be used as built-in types in typescript.",
  "translation": "JavaScript基本类型（例如，数字，字符串，布尔值）都可以用作打字稿中的内置类型。"
}, {
  "tag": "PRE",
  "text": "let a: number;a = 5;a = '5'; // errorlet b: string;b = '100';b = 100; // errorlet c: boolean;c = true;c = 'true'; // error",
  "translation": "设a：数字; a = 5; a ='5'; // errorlet b：string; b ='100'; b = 100; // errorlet c：boolean; c = true; c ='true'; //错误"
}, {
  "tag": "H2",
  "text": "Arrays",
  "translation": "数组"
}, {
  "tag": "P",
  "text": "If we want to define a variable as an array, we can simply postfix [] with any valid type annotation. This allows us to safely do manipulation of the array objects without worrying about assigning an array member with the wrong type. This is demonstrated below:",
  "translation": "如果我们想将变量定义为数组，则可以简单地将postfix []与任何有效的类型注释一起使用。 这使我们可以安全地对数组对象进行操作，而不必担心为数组成员分配错误的类型。 如下所示："
}, {
  "tag": "PRE",
  "text": "let numArray: number[] = [ 24, 57, 100 ];numArray[0] = 10; // oknumArray[1] = '10'; // error",
  "translation": "let numArray：number [] = [24，57，100]; numArray [0] = 10; // oknumArray [1] ='10'; //错误"
}, {
  "tag": "H2",
  "text": "Interfaces/User-defined types",
  "translation": "接口/用户定义类型"
}, {
  "tag": "P",
  "text": "We can define the schemas complex objects in JavaScript with the help of types or interfaces as shown below:",
  "translation": "我们可以借助类型或接口在JavaScript中定义架构复杂对象，如下所示："
}, {
  "tag": "PRE",
  "text": "type point = {  x: number;  y: number;}let a: point = {  x: 1,  y: 1};a.x = 0;a.y = '1'; // errora.z = 2; //errorinterface point2 {  x: number;  y: number;}let b: point2 = {  x: 1,  y: 1};b.x = 0;b.y = '1'; // errorb.z = 2; //error",
  "translation": "类型点= {x：数字； y：number;}让a：point = {x：1，y：1}; a.x = 0; a.y ='1'; // errora.z = 2; // errorinterface point2 {x：number; y：number;} let b：point2 = {x：1，y：1}; b.x = 0; b.y ='1'; // errorb.z = 2; //错误"
}, {
  "tag": "P",
  "text": "Types and interfaces can both be used to define types. They can both be extended/implemented by classes. Detailed differences in interface and type can be read here.",
  "translation": "类型和接口都可以用来定义类型。 它们都可以通过类扩展/实现。 界面和类型的详细区别可以在此处阅读。"
}, {
  "tag": "P",
  "text": "Optional properties",
  "translation": "可选属性"
}, {
  "tag": "P",
  "text": "We can simply postfix ? to the variable we know is optional as described below:",
  "translation": "我们可以简单地后缀吗？ 我们知道的变量是可选的，如下所述："
}, {
  "tag": "PRE",
  "text": "type point = {  x: number;  y: number;  z?: number;}let a: point = { x: 1 }; // error missing property 'y'let b: point = { x: 1, y: 1 }; // ok since z is optional",
  "translation": "类型点= {x：数字； y：数字； z ?: number;}让a：point = {x：1}; //错误缺少属性'y'let b：point = {x：1，y：1}; //好的，因为z是可选的"
}, {
  "tag": "H2",
  "text": "Inline annotations",
  "translation": "内联注释"
}, {
  "tag": "P",
  "text": "Instead of creating a new type or interface for every object, we can define its structure inline as demonstrated below:",
  "translation": "代替为每个对象创建新的类型或接口，我们可以内联定义其结构，如下所示："
}, {
  "tag": "PRE",
  "text": "let student: {  age: number;  name: string,};student = {  age: 15,  name: 'John doe'};function getAge(student: { age: number }) {  return student.age;}console.log(getAge(student)); // 15",
  "translation": "让学生：{年龄：数字； 名称：字符串，}；学生= {年龄：15，名称：“ John doe”}；函数getAge（学生：{年龄：数字}）{return student.age;} console.log（getAge（student））; // 15"
}, {
  "tag": "H2",
  "text": "Special types",
  "translation": "特殊类型"
}, {
  "tag": "UL",
  "texts": ["any → We can define the type of a variable as any indicating that anything can be assigned to it. One should avoid using this since this defeats the purpose of defining types.", "null and undefined → Unless strictNullChecks flag in ts compiler options is true , we can assign null/undefined to any other type.", ":void → This used when a function does not have a return type."],
  "translations": ["任何→我们可以将变量的类型定义为任何，表示可以为其分配任何内容。 一个人应该避免使用它，因为这违反了定义类型的目的。", "null和undefined→除非ts编译器选项中的strictNullChecks标志为true，否则我们可以将null / undefined分配给任何其他类型。", "：void→当函数没有返回类型时使用。"]
}, {
  "tag": "H2",
  "text": "Generics",
  "translation": "泛型"
}, {
  "tag": "P",
  "text": "Some functions/algorithms do not depend on the actual type of the object. For example, a function takes a list of items and a predicate to return a filtered list based on the predicate.",
  "translation": "某些功能/算法不取决于对象的实际类型。 例如，一个函数获取一个项目列表和一个谓词，以根据该谓词返回过滤后的列表。"
}, {
  "tag": "PRE",
  "text": "type student = {  name: string,  age: number}const students: student[] = [  {    age: 17,    name: 'John doe'  },  {    age: 15,    name: 'Jane doe'  }];function filter<T>(list: T[], predicate): T[] {  return list.filter(predicate);}console.log(filter(students, (s: student) => s.age > 15));// [ { age: 17, name: 'John doe' } ]",
  "translation": "类型学生= {名称：字符串，年龄：数字}常量学生：student [] = [{年龄：17，名称：'John doe'}，{年龄：15，名称：'Jane doe'}]；函数过滤器< T>（列表：T []，谓词）：T [] {返回list.filter（predicate）;} console.log（filter（students，（s：student）=> s.age> 15））; // [{年龄：17，姓名：“约翰·多伊”}]"
}, {
  "tag": "P",
  "text": "This way we get type safety in the returned list as well. In fact, since JavaScript already has a filter function for arrays, internally typescript uses generics to define its structure.",
  "translation": "这样，我们也可以在返回的列表中获得类型安全性。 实际上，由于JavaScript已经具有用于数组的过滤器功能，因此内部Typescript使用泛型来定义其结构。"
}, {
  "tag": "H2",
  "text": "Union type",
  "translation": "联合类型"
}, {
  "tag": "P",
  "text": "In some cases, we want a variable to be one of multiple types, for eg, a string or a number . We can simply define it like this:",
  "translation": "在某些情况下，我们希望变量为多种类型之一，例如字符串或数字。 我们可以像这样简单地定义它："
}, {
  "tag": "PRE",
  "text": "let a: number | string;a = 100; // oka = '100'; // ok",
  "translation": "设一个： 字符串; a = 100; // oka ='100'; // 好"
}, {
  "tag": "H2",
  "text": "Intersection type",
  "translation": "交叉点类型"
}, {
  "tag": "P",
  "text": "In some cases, we want to merge the properties of two objects into a new object. Intersection type allows us to do this in a type-safe way, as demonstrated below:",
  "translation": "在某些情况下，我们希望将两个对象的属性合并到一个新对象中。 交集类型允许我们以类型安全的方式执行此操作，如下所示："
}, {
  "tag": "PRE",
  "text": "function extend<T, U>(a: T, b: U): T & U {  return {    ...a,    ...b  };}const test = extend({ name: 'John' }, { age: 25 });console.log(test);//{ name: 'John', age: 25 }",
  "translation": "函数extend <T，U>（a：T，b：U）：T＆U {return {... a，... b};} const test = extend（{name：'John'}，{age ：25}）; console.log（test）; // {名称：“约翰”，年龄：25}"
}, {
  "tag": "H2",
  "text": "Tuple type",
  "translation": "元组类型"
}, {
  "tag": "P",
  "text": "In JavaScript, we generally use arrays as a tuple. We can simply define that tuple as :[typeOfElement1, typeOfElement2] in typescript.",
  "translation": "在JavaScript中，我们通常使用数组作为元组。 我们可以简单地在typescript中将该元组定义为：[typeOfElement1，typeOfElement2]。"
}, {
  "tag": "PRE",
  "text": "let a: [string, number];a[0] = '100'; // oka[1] = 100; // oka[1] = '100'; //errora[0] = 100; // error",
  "translation": "让a：[string，number]; a [0] ='100'; // oka [1] = 100; // oka [1] ='100'; // errora [0] = 100; //错误"
}, {
  "tag": "H2",
  "text": "Enums",
  "translation": "枚举"
}, {
  "tag": "P",
  "text": "An enum is a collection of related values. JavaScript does not support enum as a data type., but typescript does.",
  "translation": "枚举是相关值的集合。 JavaScript不支持将enum作为数据类型。但是typescript支持。"
}, {
  "tag": "PRE",
  "text": "enum WeekDay {  monday,  tuesday,  wednesday,  thursday,  friday,  saturday,  sunday}function isWorkingDay(day: WeekDay): boolean {  switch (day) {    case WeekDay.saturday:    case WeekDay.sunday:      return false;    default:      return true;  }}const mon = WeekDay.monday;const sat = WeekDay.saturday;console.log(isWorkingDay(mon)); // trueconsole.log(isWorkingDay(sat)); // falseenum Color {  RED = 'red',  GREEN = 'green',  BLUE = 'blue',}// string enums can be used for comparisonsif (someStringFromDb === Color.GREEN) {}",
  "translation": "枚举WeekDay {周一，周二，周三，周四，周五，周六，周日}函数isWorkingDay（day：WeekDay）：boolean {switch（day）{case WeekDay.saturday：case WeekDay.sunday：返回false； 默认值：返回true； }} const mon = WeekDay.monday; const sat = WeekDay.saturday; console.log（isWorkingDay（mon））; // trueconsole.log（isWorkingDay（sat））; // falseenum Color {RED ='red'，GREEN ='green'，BLUE ='blue'，} //可以使用字符串枚举进行比较if（someStringFromDb === Color.GREEN）{}"
}, {
  "tag": "H1",
  "text": "The Basics of TypeScript",
  "translation": "TypeScript的基础"
}, {
  "tag": "H2",
  "text": "What is TypeScript and why should you try it?",
  "translation": "什么是TypeScript，为什么要尝试呢？"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/0*OYrHp_b84xKs_hgW?q=20",
  "caption": "Photo by Arnold Francisca on Unsplash",
  "type": "image",
  "file": "0*OYrHp_b84xKs_hgW"
}, {
  "tag": "P",
  "text": "Typescript is a superset of JavaScript that compiles to plain JavaScript. As the name suggests, typescript gives us a way to write JavaScript with type safety as you can with other strongly typed languages, like C# or Java.",
  "translation": "Typescript是JavaScript的超集，可编译为纯JavaScript。 顾名思义，typescript为我们提供了一种编写类型安全的JavaScript的方法，就像使用其他强类型语言（如C＃或Java）一样。"
}, {
  "tag": "P",
  "text": "JavaScript is a valid typescript with types being optional, so one can easily migrate JavaScript projects to typescript and progressively factor in type safety.",
  "translation": "JavaScript是一种有效的打字稿，其类型是可选的，因此可以轻松地将JavaScript项目迁移到打字稿，并逐步考虑类型安全。"
}, {
  "tag": "P",
  "text": "It gives us compile-time type safety and vastly better IntelliSense in IDEs. This helps you to catch bugs early and boost productivity.",
  "translation": "它为我们提供了编译时类型的安全性，并在IDE中提供了更好的IntelliSense。 这可以帮助您及早发现错误并提高生产率。"
}, {
  "tag": "P",
  "text": "Say goodbye to schema-less objects. Say hello to self-documented input and output objects.",
  "translation": "与无模式对象说再见。 向自我记录的输入和输出对象打个招呼。"
}]