[{
  "tag": "H1",
  "text": "References/Further Readings",
  "translation": "参考书目/其他读物"
}, {
  "tag": "P",
  "text": "30-seconds/30-seconds-of-python — Curated collection of useful Python snippets that you can understand in 30 seconds or less.",
  "translation": "30秒/ 30秒python —精选的有用的Python代码片段集合，您可以在30秒或更短的时间内理解。"
}, {
  "tag": "H1",
  "text": "Contacts",
  "translation": "联络人"
}, {
  "tag": "P",
  "text": "If you want to keep updated with my latest articles and projects follow me on Medium. These are some of my contacts details:",
  "translation": "如果您想随时了解我的最新文章和项目，请在Medium上关注我。 这些是我的一些联系方式："
}, {
  "tag": "UL",
  "texts": ["Personal Website", "Linkedin", "Medium Profile", "GitHub", "Kaggle"],
  "translations": ["个人网站", "领英", "中档", "的GitHub", "卡格勒"]
}, {
  "tag": "P",
  "text": "Happy reading, happy learning, and happy coding!",
  "translation": "阅读愉快，学习愉快，编码愉快！"
}, {
  "tag": "H1",
  "text": "Conclusions",
  "translation": "结论"
}, {
  "tag": "P",
  "text": "In this article, I’ve presented 25 short Python code snippets that can be used as a reference in your day-to-day work. Stay tuned for my next piece, “25 Useful SQL Queries to Help in Your Day-to-Day Work.”",
  "translation": "在本文中，我介绍了25个简短的Python代码段，可用作您日常工作中的参考。 请继续关注我的下一篇文章“ 25种有用的SQL查询，以帮助您进行日常工作。”"
}, {
  "tag": "H1",
  "text": "Code Snippets",
  "translation": "代码段"
}, {
  "tag": "P",
  "text": "In this piece, I’ll present 25 short code snippets that can help you in your day-to-day tasks.",
  "translation": "在本文中，我将介绍25个简短的代码段，这些代码段可以帮助您完成日常任务。"
}, {
  "tag": "H2",
  "text": "1. Swap values between two variables",
  "translation": "1.在两个变量之间交换值"
}, {
  "tag": "P",
  "text": "In other languages, to swap values between two variables without using a third variable, we either have to use arithmetic operators or bitwise XOR. In Python, it is much simpler, as shown below.",
  "translation": "在其他语言中，要在两个变量之间交换值而不使用第三个变量，我们必须使用算术运算符或按位XOR。 在Python中，它要简单得多，如下所示。"
}, {
  "tag": "PRE",
  "text": "a = 5                               b = 10                                                                a, b = b, a                                                                 print(a) # 10                               print(b) # 5",
  "translation": "a = 5 b = 10 a，b = b，一个print（a）＃10 print（b）＃5"
}, {
  "tag": "H2",
  "text": "2. Check if the given number is even",
  "translation": "2.检查给定数字是否为偶数"
}, {
  "tag": "P",
  "text": "The following function returns True if the given number is even, False otherwise.",
  "translation": "如果给定数字为偶数，则以下函数返回True，否则返回False。"
}, {
  "tag": "PRE",
  "text": "def is_even(num):  return num % 2 == 0is_even(10) # True",
  "translation": "def is_even（num）：返回num％2 == 0is_even（10）＃True"
}, {
  "tag": "H2",
  "text": "3. Split a multiline string into a list of lines",
  "translation": "3.将多行字符串拆分为行列表"
}, {
  "tag": "P",
  "text": "The following function can be used for splitting a multiline string into a list of lines.",
  "translation": "以下函数可用于将多行字符串拆分为行列表。"
}, {
  "tag": "PRE",
  "text": "def split_lines(s):  return s.split('\\n')split_lines('50\\n python\\n snippets') # ['50', ' python', ' snippets']",
  "translation": "def split_lines（s）：返回s.split（'\\ n'）split_lines（'50 \\ n python \\ n代码段'）＃['50'，'python'，'代码段']"
}, {
  "tag": "H2",
  "text": "4. Find memory used by an object",
  "translation": "4.查找对象使用的内存"
}, {
  "tag": "P",
  "text": "The standard library’s sys module provides the getsizeof() function. That function accepts an object, calls the object’s sizeof() method, and returns the result, so you can make your objects inspectable.",
  "translation": "标准库的sys模块提供了getsizeof（）函数。 该函数接受一个对象，调用该对象的sizeof（）方法，然后返回结果，以便使您的对象可检查。"
}, {
  "tag": "PRE",
  "text": "import sysprint(sys.getsizeof(5)) # 28print(sys.getsizeof(\"Python\")) # 55",
  "translation": "import sysprint（sys.getsizeof（5））＃28print（sys.getsizeof（“ Python”））＃55"
}, {
  "tag": "H2",
  "text": "5. Reverse a string",
  "translation": "5.反转字符串"
}, {
  "tag": "P",
  "text": "Python string library doesn’t support the built-in reverse() as done by other Python containers like list. There are many approaches to reversing a string, of which the easiest way is making use of the slicing operator.",
  "translation": "Python字符串库不像其他Python容器（如list）那样支持内置的reverse（）。 有许多种反转字符串的方法，最简单的方法是利用切片运算符。"
}, {
  "tag": "PRE",
  "text": "language = \"python\"                                reversed_language = language[::-1]                                                                 print(reversed_language) # nohtyp",
  "translation": "语言=“ python” reversed_language =语言[::-1] print（reversed_language）＃nohtyp"
}, {
  "tag": "H2",
  "text": "6. Print a string n times",
  "translation": "6.打印一个字符串n次"
}, {
  "tag": "P",
  "text": "It is very easy to print a string n times without using loops, as shown below.",
  "translation": "如下所示，不使用循环将字符串打印n次非常容易。"
}, {
  "tag": "PRE",
  "text": "def repeat(string, n):  return (string * n)repeat('python', 3) # pythonpythonpython",
  "translation": "def repeat（string，n）：return（string * n）repeat（'python'，3）＃pythonpythonpython"
}, {
  "tag": "H2",
  "text": "7. Check if a string is a palindrome",
  "translation": "7.检查字符串是否是回文"
}, {
  "tag": "P",
  "text": "The following function is used for checking if a string is a palindrome or not.",
  "translation": "以下函数用于检查字符串是否为回文。"
}, {
  "tag": "PRE",
  "text": "def palindrome(string):    return string == string[::-1]palindrome('python') # False",
  "translation": "def palindrome（string）：返回字符串== string [::-1] palindrome（'python'）＃False"
}, {
  "tag": "H2",
  "text": "8. Combine a list of strings into a single string",
  "translation": "8.将字符串列表合并为一个字符串"
}, {
  "tag": "P",
  "text": "The next snippet combines a list of strings into a single string.",
  "translation": "下一个代码段将字符串列表组合为单个字符串。"
}, {
  "tag": "PRE",
  "text": "strings = ['50', 'python', 'snippets']print(','.join(strings)) # 50,python,snippets",
  "translation": "strings = ['50'，'python'，'snippets'] print（'，'。join（strings））＃50，python，snippets"
}, {
  "tag": "H2",
  "text": "9. Find the first element of a list",
  "translation": "9.查找列表的第一个元素"
}, {
  "tag": "P",
  "text": "This function returns the first element of the passed list.",
  "translation": "此函数返回传递的列表的第一个元素。"
}, {
  "tag": "PRE",
  "text": "def head(list):  return list[0]print(head([1, 2, 3, 4, 5])) # 1",
  "translation": "def head（list）：返回列表[0] print（head（[1、2、3、4、5]））＃1"
}, {
  "tag": "H2",
  "text": "10. Find elements that exist in either of the two lists",
  "translation": "10.查找两个列表之一中存在的元素"
}, {
  "tag": "P",
  "text": "This function returns every element that exists in either of the two lists.",
  "translation": "此函数返回两个列表之一中存在的每个元素。"
}, {
  "tag": "PRE",
  "text": "def union(a,b):  return list(set(a + b))union([1, 2, 3, 4, 5], [6, 2, 8, 1, 4]) # [1,2,3,4,5,6,8]",
  "translation": "def union（a，b）：返回列表（set（a + b））union（[1、2、3、4、5]，[6、2、8、1、4]）＃[1,2， 3,4,5,6,8]"
}, {
  "tag": "H2",
  "text": "11. Find all the unique elements present in a given list",
  "translation": "11.查找给定列表中存在的所有唯一元素"
}, {
  "tag": "P",
  "text": "This function returns the unique elements present in a given list.",
  "translation": "此函数返回给定列表中存在的唯一元素。"
}, {
  "tag": "PRE",
  "text": "def unique_elements(numbers):  return list(set(numbers))unique_elements([1, 2, 3, 2, 4]) # [1, 2, 3, 4]",
  "translation": "def unique_elements（numbers）：返回列表（set（numbers））unique_elements（[1、2、3、2、4]）＃[1、2、3、4]"
}, {
  "tag": "H2",
  "text": "12. Find the average of a list of numbers",
  "translation": "12.查找数字列表的平均值"
}, {
  "tag": "P",
  "text": "This function returns the average of two or more numbers present in a list.",
  "translation": "此函数返回列表中存在的两个或多个数字的平均值。"
}, {
  "tag": "PRE",
  "text": "def average(*args):  return sum(args, 0.0) / len(args)average(5, 8, 2) # 5.0",
  "translation": "def average（* args）：返回总和（args，0.0）/ len（args）average（5，8，2）＃5.0"
}, {
  "tag": "H2",
  "text": "13. Check if a list contains all unique values",
  "translation": "13.检查列表是否包含所有唯一值"
}, {
  "tag": "P",
  "text": "This function checks if all the elements in a list are unique or not.",
  "translation": "此函数检查列表中的所有元素是否唯一。"
}, {
  "tag": "PRE",
  "text": "def unique(list):    if len(list)==len(set(list)):        print(\"All elements are unique\")    else:        print(\"List has duplicates\")unique([1,2,3,4,5]) # All elements are unique",
  "translation": "def unique（list）：如果len（list）== len（set（list））：print（“所有元素都是唯一的”）else：print（“列表中有重复项”）unique（[1,2,3,4 ，5]）＃所有元素都是唯一的"
}, {
  "tag": "H2",
  "text": "14. Track frequency of elements in a list",
  "translation": "14.跟踪列表中元素的频率"
}, {
  "tag": "P",
  "text": "Python counter keeps track of the frequency of each element in the container. Counter() returns a dictionary with elements as keys and frequency of its occurrence as its values.",
  "translation": "Python计数器跟踪容器中每个元素的频率。 Counter（）返回一个字典，其中元素作为键，其出现频率作为其值。"
}, {
  "tag": "PRE",
  "text": "from collections import Counterlist = [1, 2, 3, 2, 4, 3, 2, 3]count = Counter(list)print(count) # {2: 3, 3: 3, 1: 1, 4: 1}",
  "translation": "从集合中导入Counterlist = [1、2、3、2、4、3、2、3] count = Counter（list）print（count）＃{2：3，3：3，1：1，4：1}"
}, {
  "tag": "H2",
  "text": "15. Find the most frequent element in a list",
  "translation": "15.在列表中查找最频繁的元素"
}, {
  "tag": "P",
  "text": "This function returns the most frequent element that appears in a list.",
  "translation": "此函数返回出现在列表中的最频繁的元素。"
}, {
  "tag": "PRE",
  "text": "def most_frequent(list):    return max(set(list), key = list.count)numbers = [1, 2, 3, 2, 4, 3, 1, 3]most_frequent(numbers) # 3",
  "translation": "def most_frequent（list）：返回max（set（list），键= list.count）numbers = [1、2、3、2、4、3、1、3] most_frequent（numbers）＃3"
}, {
  "tag": "H2",
  "text": "16. Convert an angle from degrees to radians",
  "translation": "16.将角度从度转换为弧度"
}, {
  "tag": "P",
  "text": "The next function is used for converting an angle from degrees to radians.",
  "translation": "下一个功能用于将角度从度转换为弧度。"
}, {
  "tag": "PRE",
  "text": "import mathdef degrees_to_radians(deg):  return (deg * math.pi) / 180.0degrees_to_radians(90) # 1.5707963267948966",
  "translation": "导入mathdef degree_to_radians（deg）：返回（deg * math.pi）/ 180.0degrees_to_radians（90）＃1.5707963267948966"
}, {
  "tag": "H2",
  "text": "17. Calculate time taken to execute a piece of code",
  "translation": "17.计算执行一段代码所花费的时间"
}, {
  "tag": "P",
  "text": "The following snippet is used for calculating the time taken to execute a piece of code.",
  "translation": "以下代码段用于计算执行一段代码所需的时间。"
}, {
  "tag": "PRE",
  "text": "import timestart_time = time.time()a,b = 5,10c = a+bend_time = time.time()time_taken = (end_time- start_time)*(10**6)print(\"Time taken in micro_seconds:\", time_taken) # Time taken in micro_seconds: 39.577484130859375",
  "translation": "导入时间start_time = time.time（）a，b = 5,10c = a + bend_time = time.time（）time_taken =（end_time- start_time）*（10 ** 6）print（“以微秒为单位的时间：”，time_taken ）＃时间（以微秒为单位）：39.577484130859375"
}, {
  "tag": "H2",
  "text": "18. Find gcd of a list of numbers",
  "translation": "18.找到数字列表的gcd"
}, {
  "tag": "P",
  "text": "This function calculates the greatest common divisor of a list of numbers.",
  "translation": "此函数计算数字列表的最大公约数。"
}, {
  "tag": "PRE",
  "text": "from functools import reduceimport mathdef gcd(numbers):  return reduce(math.gcd, numbers)gcd([24,108,90]) # 6",
  "translation": "从functools import reduceimport mathdef gcd（numbers）：返回reduce（math.gcd，numbers）gcd（[24,108,90]）＃6"
}, {
  "tag": "H2",
  "text": "19. Find unique characters in a string",
  "translation": "19.查找字符串中的唯一字符"
}, {
  "tag": "P",
  "text": "This snippet can be used to find all the unique characters present in a string.",
  "translation": "该代码段可用于查找字符串中存在的所有唯一字符。"
}, {
  "tag": "PRE",
  "text": "string = \"abcbcabdb\"   unique = set(string)new_string = ''.join(unique)print(new_string) # abcd",
  "translation": "字符串=“ abcbcabdb”唯一=设置（string）new_string =''.join（唯一）打印（new_string）＃abcd"
}, {
  "tag": "H2",
  "text": "20. Use lambda functions",
  "translation": "20.使用lambda函数"
}, {
  "tag": "P",
  "text": "Lambda is an anonymous function with the capability of holding a single expression only.",
  "translation": "Lambda是一个匿名函数，只能保存单个表达式。"
}, {
  "tag": "PRE",
  "text": "x = lambda a, b, c : a + b + cprint(x(5, 10, 20)) # 35",
  "translation": "x = lambda a，b，c：a + b + cprint（x（5，10，20））＃35"
}, {
  "tag": "H2",
  "text": "21. Use map functions",
  "translation": "21.使用地图功能"
}, {
  "tag": "P",
  "text": "This function returns a list of the results after applying the given function to each item of a given iterable(list, tuple, etc.)",
  "translation": "在将给定函数应用于给定iterable的每个项目（列表，元组等）之后，此函数返回结果列表。"
}, {
  "tag": "PRE",
  "text": "def multiply(n):     return n * n   list = (1, 2, 3) result = map(multiply, list) print(list(result)) # {1, 4, 9}",
  "translation": "def乘法（n）：返回n * n list =（1、2、3）result = map（multiply，list）print（list（result））＃{1、4、9}"
}, {
  "tag": "H2",
  "text": "22. Use filter functions",
  "translation": "22.使用过滤器功能"
}, {
  "tag": "P",
  "text": "This function filters the given sequence with the help of a function that tests each element in the sequence to be true or not.",
  "translation": "此功能借助一个功能来过滤给定的序列，该功能会测试序列中的每个元素是否正确。"
}, {
  "tag": "PRE",
  "text": "arr = [1, 2, 3, 4, 5]arr = list(filter(lambda x : x%2 == 0, arr))print (arr) # [2, 4]",
  "translation": "arr = [1、2、3、4、5] arr = list（filter（lambda x：x％2 == 0，arr））print（arr）＃[2，4]"
}, {
  "tag": "H2",
  "text": "23. Use list comprehensions",
  "translation": "23.使用列表理解"
}, {
  "tag": "P",
  "text": "List comprehensions provide us with a simple way to create a list based on some iterable. During the creation, elements from the iterable can be conditionally included in the new list and transformed as needed.",
  "translation": "列表理解为我们提供了一种基于可迭代的列表创建的简单方法。 在创建期间，可将iterable中的元素有条件地包含在新列表中，并根据需要进行转换。"
}, {
  "tag": "PRE",
  "text": "numbers = [1, 2, 3]squares = [number**2 for number in numbers]print(squares) # [1, 4, 9]",
  "translation": "数字= [1、2、3]正方形= [数字** 2表示数字] print（squares）＃[1、4、9]"
}, {
  "tag": "H2",
  "text": "24. Use slicing operator",
  "translation": "24.使用切片运算符"
}, {
  "tag": "P",
  "text": "Slicing is used to extract a continuous sequence or subsequence of elements from a given sequence. The following function is used for concatenating the results of two slicing operations. First, we are slicing the list from index d to end, then from start to index d.",
  "translation": "切片用于从给定序列中提取元素的连续序列或子序列。 以下函数用于合并两个切片操作的结果。 首先，我们将列表从索引d切到末尾，然后从开始切成索引d。"
}, {
  "tag": "PRE",
  "text": "def rotate(arr, d):  return arr[d:] + arr[:d]  if __name__ == '__main__':  arr = [1, 2, 3, 4, 5]  arr = rotate(arr, 2)  print (arr) # [3, 4, 5, 1, 2]",
  "translation": "def rotation（arr，d）：如果__name__ =='__main__'，则返回arr [d：] + arr [：d]：arr = [1、2、3、4、5] arr = rotation（arr，2）打印 （arr）＃[3，4，5，1，2]"
}, {
  "tag": "H2",
  "text": "25. Use chained function call",
  "translation": "25.使用链接函数调用"
}, {
  "tag": "P",
  "text": "The final snippet is used to call multiple functions from a single line and evaluate the result.",
  "translation": "最后的代码段用于从一行开始调用多个函数并评估结果。"
}, {
  "tag": "PRE",
  "text": "def add(a, b):    return a + bdef subtract(a, b):       return a - ba, b = 5, 10print((subtract if a > b else add)(a, b)) # 15",
  "translation": "def add（a，b）：返回a + bdef减去（a，b）：返回a-ba，b = 5，10print（（如果a> b else加，减去）（a，b））＃15"
}, {
  "tag": "FIGURE",
  "image": "https://miro.medium.com/max/60/1*E8dtcW7fEoJc7qw20_rTKg.jpeg?q=20",
  "caption": "Photo by Sean Lim on Unsplash",
  "type": "image",
  "file": "1*E8dtcW7fEoJc7qw20_rTKg.jpeg"
}, {
  "tag": "H1",
  "text": "25 Useful Python Snippets to Help in Your Day-to-Day Work",
  "translation": "25个有用的Python代码段可帮助您进行日常工作"
}, {
  "tag": "H2",
  "text": "Python snippets that can be taken as a reference for your daily work",
  "translation": "Python片段，可以作为您日常工作的参考"
}, {
  "tag": "P",
  "text": "Python is a general-purpose and high-level programming language. You can use Python for developing desktop GUI applications, websites, and web applications, for data science, etc. Also, Python, as a high-level programming language, allows you to focus on the core functionality of the application by taking care of common programming tasks. The simple syntax rules of the programming language further make it easier for you to keep the code base readable and application maintainable.",
  "translation": "Python是一种通用的高级编程语言。 您可以使用Python开发桌面GUI应用程序，网站和Web应用程序，进行数据科学等。此外，Python作为一种高级编程语言，使您可以通过注意通用来专注于应用程序的核心功能。 编程任务。 编程语言的简单语法规则使您更容易保持代码库的可读性和应用程序的可维护性。"
}, {
  "tag": "P",
  "text": "The advantages of using Python when compared to other programming languages are:",
  "translation": "与其他编程语言相比，使用Python的优势在于："
}, {
  "tag": "OL",
  "texts": ["Compatible with major platforms and operating systems", "Many open-source frameworks and tools", "Readable and maintainable code", "Robust standard library", "Standard test-driven development"],
  "translations": ["与主要平台和操作系统兼容", "许多开源框架和工具", "可读且可维护的代码", "强大的标准库", "标准测试驱动的开发"]
}]